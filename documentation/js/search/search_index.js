var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.061,1,2.523]],["body/classes/AllExceptionsFilter.html",[0,0.066,1,3.619,2,1.354,3,0.217,4,0.217,5,0.144,6,5.042,7,2.992,8,0.806,9,1.804,10,2.969,11,4.482,12,4.482,13,3.325,14,4.482,15,2.686,16,5.042,17,0.192,18,0.963,19,0.571,20,5.377,21,1.159,22,3.925,23,6.724,24,3.524,25,3.765,26,0.431,27,3.925,28,0.91,29,0.02,30,0.673,31,0.359,32,0.764,33,4.482,34,4.071,35,5.377,36,3.925,37,2.715,38,0.683,39,3.619,40,0.518,41,3.925,42,2.153,43,0.645,44,2.523,45,3.325,46,2.715,47,2.992,48,4.482,49,3.363,50,3.363,51,2.153,52,1.893,53,1.893,54,3.619,55,2.992,56,3.925,57,3.925,58,0.217,59,1.783,60,1.651,61,2.007,62,2.715,63,2.201,64,3.925,65,3.925,66,3.363,67,3.363,68,3.363,69,3.363,70,4.785,71,0.993,72,3.925,73,5.232,74,2.992,75,2.311,76,3.925,77,4.482,78,3.925,79,2.992,80,3.925,81,3.925,82,3.925,83,3.925,84,3.925,85,3.363,86,3.925,87,0.014,88,0.014]],["title/controllers/AppController.html",[89,1.399,90,2.523]],["body/controllers/AppController.html",[0,0.082,3,0.271,4,0.271,5,0.179,17,0.24,18,1.108,19,0.633,26,0.403,29,0.02,38,1.048,40,0.492,43,0.803,58,0.271,59,2.219,60,1.37,87,0.016,88,0.016,89,2.31,90,4.165,91,2.508,92,4.186,93,5.836,94,1.776,95,2.876,96,5.431,97,4.886,98,4.886,99,5.333,100,4.165,101,6.021,102,0.879,103,3.842,104,4.186,105,3.544,106,2.68,107,2.876,108,1.237,109,4.886]],["title/modules/AppModule.html",[110,2.78,111,2.523]],["body/modules/AppModule.html",[0,0.042,1,2.596,3,0.208,4,0.137,5,0.091,24,2.953,29,0.021,34,1.706,40,0.563,43,0.405,47,1.88,52,1.189,53,1.189,58,0.208,63,0.807,87,0.01,88,0.01,90,3.142,91,1.926,102,0.36,103,3.386,104,2.113,110,3.462,111,5.08,112,1.88,113,1.706,114,2.113,115,2.113,116,1.706,117,3.891,118,2.113,119,2.113,120,2.113,121,3.386,122,3.386,123,3.155,124,3.656,125,3.656,126,3.386,127,3.386,128,3.155,129,3.656,130,3.656,131,2.953,132,3.386,133,3.215,134,2.113,135,1.706,136,1.88,137,3.142,138,3.142,139,3.142,140,3.142,141,3.142,142,2.466,143,2.466,144,2.113,145,2.466,146,1.266,147,1.88,148,2.466,149,3.752,150,1.926,151,2.466,152,1.704,153,2.466,154,1.452,155,2.466,156,2.466,157,1.88,158,2.466,159,2.466,160,4.542,161,3.752,162,2.596,163,2.466,164,3.752,165,2.466,166,1.926,167,2.466,168,3.752,169,2.466,170,2.113,171,2.113,172,2.466,173,3.752,174,2.886,175,2.466,176,2.466,177,1.88,178,2.466,179,2.466,180,2.466,181,2.113,182,1.706,183,2.466,184,2.596,185,2.466,186,2.466,187,3.752,188,2.466,189,2.86,190,3.752,191,2.209,192,1.706,193,3.752,194,2.113,195,2.466,196,2.466,197,2.385,198,2.466,199,2.113,200,2.466,201,1.88,202,2.466,203,2.466,204,2.466,205,1.266,206,2.466,207,1.88,208,2.466,209,2.466,210,2.466,211,2.466,212,2.466,213,2.466,214,2.209,215,2.466,216,2.466,217,2.466,218,2.466,219,3.752,220,3.215,221,2.466,222,2.466,223,1.567,224,2.466,225,2.466,226,2.466,227,2.466,228,2.466,229,2.466,230,2.466,231,1.88,232,2.466,233,2.466,234,2.466,235,2.466,236,2.466,237,2.466,238,2.466,239,1.567,240,2.466,241,2.113,242,2.466,243,1.742,244,2.466,245,2.113,246,3.215,247,2.466,248,0.767,249,2.466,250,2.466,251,2.466,252,2.113,253,2.466,254,2.466,255,2.466,256,2.332,257,2.466,258,2.466,259,2.113,260,2.466,261,2.113,262,2.466,263,2.466,264,0.728,265,2.466,266,2.466,267,2.466,268,2.466,269,1.353,270,2.466,271,1.353,272,2.466,273,2.466,274,2.466,275,2.113,276,2.466,277,2.113,278,2.113,279,3.891,280,4.542,281,1.706,282,2.113]],["title/injectables/AppService.html",[103,2.146,283,0.599]],["body/injectables/AppService.html",[0,0.09,3,0.295,4,0.295,5,0.196,17,0.261,18,1.168,19,0.658,26,0.439,29,0.02,38,0.927,40,0.402,43,0.876,58,0.295,63,1.744,87,0.017,88,0.017,93,6.01,99,4.837,102,0.926,103,3.735,108,1.349,283,1.043,284,1.838,285,4.062,286,5.328,287,4.565]],["title/entities/ArticleContentEntity.html",[152,1.656,288,1.399]],["body/entities/ArticleContentEntity.html",[0,0.06,3,0.198,4,0.198,5,0.131,17,0.241,19,0.725,26,0.563,29,0.02,30,0.777,31,0.468,40,0.423,58,0.198,71,1.528,87,0.013,88,0.013,94,2.481,102,0.955,150,3.101,152,2.23,243,2.317,248,1.877,288,1.371,289,1.96,290,4.076,291,3.062,292,1.308,293,2.311,294,5.174,295,2.083,296,3.565,297,3.313,298,1.835,299,2.317,300,3.062,301,4.91,302,3.743,303,3.574,304,3.574,305,3.574,306,4.276,307,3.574,308,3.397,309,4.91,310,4.91,311,3.574,312,1.99,313,4.206,314,3.743,315,4.206,316,4.206,317,3.574,318,2.23,319,3.743,320,4.206,321,3.574,322,4.276,323,3.574,324,2.183,325,3.743,326,3.12,327,3.574,328,3.555,329,3.574,330,4.206,331,4.206,332,1.233,333,3.062,334,1.532,335,3.574,336,3.574,337,3.062,338,3.574,339,3.574,340,3.574,341,3.062]],["title/controllers/ArticleController.html",[89,1.399,137,2.523]],["body/controllers/ArticleController.html",[0,0.03,3,0.098,4,0.098,5,0.234,8,1.081,10,1.664,17,0.087,18,0.532,19,0.64,26,0.412,28,0.869,29,0.02,30,0.643,31,0.419,32,0.729,38,1.097,40,0.488,43,0.291,44,2.038,45,3.348,46,2.001,58,0.258,59,0.805,60,0.811,61,0.68,71,1.652,87,0.008,88,0.008,89,0.68,91,0.911,94,1.816,95,2.94,102,0.535,105,3.101,106,0.973,107,2.94,108,1.39,122,2.157,128,2.01,137,2.001,150,2.17,152,1.919,205,0.911,223,3.878,248,2.048,264,1.248,293,2.505,295,2.202,298,1.678,308,4.042,324,1.817,342,1.519,343,1.127,344,3.912,345,2.157,346,2.478,347,2.205,348,2.478,349,2.893,350,2.478,351,3.621,352,1.519,353,2.889,354,3.644,355,3.174,356,2.157,357,1.774,358,3.139,359,1.767,360,2.157,361,1.774,362,1.774,363,2.893,364,2.205,365,2.893,366,2.205,367,2.245,368,1.712,369,1.774,370,3.222,371,1.774,372,1.774,373,1.774,374,1.774,375,1.774,376,3.222,377,4.227,378,4.279,379,2.478,380,1.774,381,3.931,382,3.221,383,4.513,384,1.774,385,1.774,386,1.838,387,2.893,388,2.478,389,2.893,390,2.001,391,1.838,392,2.478,393,1.587,394,1.838,395,1.519,396,5.006,397,2.01,398,2.205,399,1.774,400,1.774,401,1.774,402,2.038,403,3.621,404,2.478,405,4.227,406,3.222,407,2.893,408,2.893,409,2.893,410,3.455,411,1.519,412,2.038,413,1.703,414,1.774,415,1.774,416,1.774,417,1.838,418,1.352,419,1.227,420,2.291,421,1.227,422,1.519,423,1.774,424,1.774,425,3.664,426,1.352,427,1.774,428,1.774,429,1.774,430,1.044,431,1.774,432,2.328,433,1.227,434,1.519,435,3.174,436,1.227,437,1.519,438,1.044,439,2.924,440,1.127,441,1.227,442,1.519,443,1.774,444,1.352,445,1.519,446,1.352,447,1.774,448,1.127,449,1.519,450,1.838,451,1.352,452,1.227,453,1.127,454,1.774,455,3.621,456,4.227,457,4.227,458,2.924,459,3.621,460,4.227,461,3.621,462,4.227,463,1.774,464,1.774,465,1.774,466,1.774,467,1.774,468,1.774,469,1.774,470,1.519,471,1.774,472,1.774,473,1.774,474,1.774,475,1.774,476,1.774,477,1.774,478,2.478,479,1.774,480,1.519,481,1.774,482,1.519,483,1.519,484,1.774,485,1.774,486,2.01,487,0.805,488,1.227,489,1.774,490,2.893,491,2.893,492,1.774,493,1.774,494,1.24,495,2.893,496,2.893,497,2.893,498,1.519,499,1.127,500,1.127,501,1.774,502,2.893,503,2.893,504,1.395,505,1.587,506,2.478,507,1.587,508,1.774,509,1.774,510,1.774,511,1.774,512,1.774,513,1.774,514,1.774]],["title/classes/ArticleDto.html",[0,0.061,412,1.758]],["body/classes/ArticleDto.html",[0,0.055,2,1.133,3,0.182,4,0.182,5,0.121,17,0.161,19,0.73,21,0.97,26,0.58,28,0.572,29,0.02,30,0.423,31,0.482,32,0.479,40,0.349,58,0.182,71,1.474,87,0.012,88,0.012,100,2.273,102,1.041,152,2.644,154,1.934,248,1.908,256,1.687,290,1.934,292,1.234,293,2.375,295,2.117,296,3.408,297,2.941,298,1.299,299,2.355,308,3.203,312,2.36,318,2.644,359,3.156,366,2.504,367,2.586,397,3.367,410,3.71,412,2.233,417,2.943,515,2.814,516,2.631,517,4.247,518,5.363,519,4.63,520,5.823,521,4.63,522,3.285,523,3.285,524,3.285,525,3.285,526,3.285,527,3.53,528,3.203,529,3.285,530,3.967,531,3.285,532,3.285,533,2.941,534,3.285,535,4.63,536,4.63,537,4.63,538,3.285,539,3.967,540,4.63,541,3.53,542,3.285,543,2.273,544,3.285,545,2.814,546,2.814,547,3.285,548,3.285,549,3.285,550,3.285,551,3.285,552,2.814,553,4.63,554,3.285,555,3.285,556,3.285,557,3.285,558,3.285,559,3.285,560,3.285,561,3.285,562,3.285,563,3.285,564,3.285]],["title/entities/ArticleEntity.html",[150,1.872,288,1.399]],["body/entities/ArticleEntity.html",[0,0.054,3,0.179,4,0.179,5,0.118,9,1.832,17,0.158,19,0.723,26,0.558,29,0.02,30,0.838,31,0.464,32,0.924,40,0.436,58,0.179,71,1.462,87,0.012,88,0.012,94,2.461,150,3.416,152,2.624,154,1.9,166,2.966,243,2.34,248,1.003,288,1.238,289,1.771,292,1.219,293,2.246,298,1.776,300,2.765,302,3.486,306,2.461,312,1.853,314,2.461,318,2.077,319,3.486,322,4.049,325,3.486,326,2.907,328,3.127,330,3.918,331,3.918,332,1.113,341,4.95,353,3.345,359,2.561,366,3.486,367,2.561,397,2.509,430,1.9,516,2.277,517,3.997,565,2.765,566,5.312,567,5.312,568,5.312,569,4.649,570,2.461,571,3.228,572,4.574,573,4.574,574,3.228,575,3.918,576,3.228,577,4.574,578,3.228,579,3.228,580,3.228,581,3.228,582,4.574,583,4.574,584,4.55,585,3.918,586,3.228,587,3.228,588,2.765,589,3.228,590,3.918,591,4.574,592,2.907,593,4.574,594,3.228,595,3.486,596,3.228,597,3.918,598,1.9,599,4.574,600,3.918,601,5.312,602,3.228,603,3.228,604,2.765,605,2.765]],["title/classes/ArticleRequestDto.html",[0,0.061,355,2.317]],["body/classes/ArticleRequestDto.html",[0,0.089,2,1.363,3,0.219,4,0.219,5,0.145,8,0.811,17,0.194,19,0.722,26,0.556,29,0.02,31,0.479,40,0.298,58,0.219,71,1.33,77,4.503,87,0.014,88,0.014,94,2.147,102,1.019,231,4.007,239,3.341,292,1.401,293,2.409,295,2.037,296,3.753,297,3.239,298,1.474,299,2.266,318,3.06,355,3.341,359,2.848,391,3.341,393,2.883,402,2.535,441,4.757,517,4.533,527,4.007,528,3.636,530,4.503,543,3.636,597,4.503,606,3.386,607,4.007,608,4.503,609,5.256,610,4.503,611,5.891,612,3.953,613,3.953,614,5.256,615,3.953,616,5.256,617,3.953,618,3.953,619,5.256,620,4.007,621,4.503,622,3.953,623,2.512]],["title/controllers/ArticleSearchController.html",[89,1.399,139,2.523]],["body/controllers/ArticleSearchController.html",[0,0.052,3,0.172,4,0.172,5,0.114,8,1.165,17,0.152,18,0.819,19,0.607,26,0.367,28,0.775,29,0.02,30,0.573,31,0.305,32,0.65,38,0.988,40,0.497,43,0.511,58,0.172,59,1.411,60,0.871,71,1.667,87,0.012,88,0.012,89,1.192,91,1.595,94,1.618,95,2.62,102,0.913,105,3.061,106,1.704,107,2.62,108,1.437,121,3.061,139,3.079,194,2.662,223,3.609,248,2.226,293,2.157,295,1.794,297,3.115,298,1.593,299,2.611,324,2.221,334,1.332,343,1.974,344,4.096,353,3.533,367,2.738,368,1.593,381,4.64,382,4.158,390,3.079,391,3.609,394,2.828,402,2.146,412,1.498,418,2.368,420,2.274,430,1.829,432,3.305,433,2.149,434,2.662,435,3.305,436,2.149,437,2.662,438,1.829,439,3.598,440,1.974,452,2.149,453,1.974,478,3.813,480,2.662,482,2.662,483,2.662,486,2.441,505,2.441,598,1.829,624,3.964,625,2.662,626,3.107,627,5.962,628,4.451,629,3.107,630,6.318,631,3.107,632,3.107,633,3.107,634,4.865,635,3.393,636,3.107,637,3.107,638,3.107,639,3.107,640,4.455,641,3.107,642,3.107,643,3.107,644,4.451,645,3.107,646,3.107,647,3.107,648,3.107]],["title/injectables/ArticleSearchService.html",[121,2.146,283,0.599]],["body/injectables/ArticleSearchService.html",[0,0.042,3,0.139,4,0.139,5,0.092,8,0.941,9,1.309,17,0.123,18,0.699,19,0.562,21,1.121,26,0.422,28,0.89,29,0.02,30,0.658,31,0.351,32,0.747,38,1.007,40,0.467,43,0.412,58,0.139,60,0.703,61,1.963,63,1.243,71,1.567,87,0.01,88,0.01,102,0.959,108,1.392,121,2.235,146,1.286,152,1.724,154,1.474,243,1.457,245,3.928,248,2.151,264,1.354,283,0.624,284,0.864,290,1.474,293,2.136,295,1.309,297,3.174,298,1.542,299,2.555,324,2.074,332,0.864,334,1.074,344,3.646,345,1.894,353,3.298,359,1.208,360,1.474,367,2.899,368,1.435,381,4.284,382,3.54,386,2.914,390,2.627,394,2.413,402,2.467,412,1.208,420,2.186,430,1.474,438,1.474,486,1.374,487,1.724,494,1.074,499,1.592,504,1.208,516,1.074,598,1.474,624,4.192,627,5.628,630,6.371,634,4.711,635,2.894,640,3.928,649,2.146,650,3.797,651,4.585,652,3.797,653,2.505,654,2.807,655,2.505,656,3.253,657,3.797,658,2.505,659,4.958,660,2.894,661,3.797,662,4.585,663,4.585,664,4.585,665,2.505,666,2.505,667,1.539,668,3.237,669,3.172,670,3.797,671,2.505,672,1.474,673,1.474,674,2.505,675,3.797,676,3.797,677,2.146,678,3.797,679,3.495,680,2.505,681,3.797,682,2.505,683,2.505,684,2.505,685,2.146,686,2.505,687,2.505,688,2.505,689,2.505,690,2.505,691,2.505,692,2.505,693,2.505,694,2.505,695,2.505,696,2.505,697,2.505,698,2.505,699,2.505,700,2.505,701,3.253,702,2.505,703,2.146,704,2.146,705,2.505,706,2.505,707,1.909,708,2.505,709,2.146,710,2.505,711,2.505,712,2.505,713,2.505,714,2.146,715,2.146,716,1.909,717,1.474,718,2.505,719,2.146,720,2.505,721,1.909,722,1.909,723,2.505,724,2.505,725,2.505]],["title/injectables/ArticleService.html",[122,2.146,283,0.599]],["body/injectables/ArticleService.html",[0,0.025,3,0.082,4,0.082,5,0.054,8,0.863,9,0.855,17,0.072,18,0.456,19,0.613,21,0.732,25,2.658,26,0.4,28,0.793,29,0.021,30,0.586,31,0.411,32,0.665,38,0.921,40,0.466,42,0.807,43,0.242,44,2.553,51,0.807,52,0.709,53,0.709,58,0.082,60,1.427,61,1.952,62,1.018,63,1.791,71,1.582,87,0.007,88,0.007,102,0.613,108,1.226,122,1.459,126,2.852,127,2.852,128,2.658,131,2.488,146,0.755,150,1.648,152,2.72,154,0.866,166,1.648,191,0.866,192,1.018,243,1.747,248,2.09,264,1.949,283,0.407,284,0.507,288,0.564,290,0.866,293,2.467,295,0.855,298,1.791,299,0.951,308,3.663,312,1.846,318,1.125,324,1.671,332,0.507,334,0.631,344,3.117,345,2.069,346,2.123,347,2.871,348,2.123,350,2.123,351,2.123,352,2.123,353,2.658,355,2.393,356,1.459,358,3.902,359,3.048,364,1.122,367,2.454,368,1.616,378,3.902,381,3.663,382,2.605,383,4.359,386,1.575,390,1.714,391,2.393,392,2.123,393,2.498,394,1.575,395,2.123,396,4.536,397,1.76,402,2.639,403,3.226,410,3.987,411,2.123,412,1.816,413,1.459,417,2.04,420,2.139,430,0.866,438,0.866,441,1.018,442,1.26,445,1.26,458,1.018,486,1.359,487,0.668,494,2.412,499,1.575,504,2.336,505,1.76,506,2.123,507,1.76,516,1.062,527,3.204,528,2.907,541,1.122,545,1.26,592,0.935,598,0.866,620,1.122,621,2.123,635,1.889,654,3.002,656,2.75,659,4.688,667,1.004,668,2.474,669,2.22,672,0.866,673,0.866,677,1.26,679,1.889,701,1.26,703,2.123,704,2.123,714,3.902,715,1.26,719,1.26,721,2.447,722,1.889,726,1.26,727,3.21,728,1.26,729,3.21,730,1.471,731,2.123,732,3.766,733,1.471,734,2.478,735,1.471,736,2.478,737,1.471,738,2.871,739,1.471,740,1.471,741,1.26,742,2.478,743,1.471,744,3.766,745,1.471,746,1.471,747,1.122,748,1.471,749,0.935,750,1.471,751,1.26,752,1.471,753,1.018,754,1.471,755,1.471,756,2.478,757,1.471,758,2.478,759,1.471,760,1.471,761,1.471,762,3.766,763,2.478,764,1.471,765,2.478,766,2.478,767,2.478,768,2.478,769,1.471,770,1.714,771,1.471,772,2.478,773,2.478,774,3.21,775,1.471,776,1.471,777,1.26,778,1.471,779,1.471,780,2.478,781,2.478,782,1.471,783,2.478,784,1.471,785,1.471,786,1.471,787,1.471,788,1.471,789,1.471,790,1.471,791,2.478,792,1.471,793,1.575,794,1.122,795,1.471,796,1.26,797,1.471,798,1.122,799,1.471,800,1.471,801,0.807,802,1.26,803,1.471,804,1.471,805,1.471,806,1.471,807,1.471,808,1.471,809,1.471,810,1.471,811,1.471,812,3.21,813,3.21,814,1.471,815,3.21,816,1.018,817,1.471,818,1.471,819,1.471,820,1.471,821,1.471,822,1.471,823,1.471,824,1.471,825,1.471,826,1.471,827,2.478,828,1.471,829,2.478,830,3.766,831,3.21,832,1.272,833,2.123,834,1.26,835,3.766,836,1.471,837,1.471,838,1.471,839,1.122,840,1.471,841,1.471,842,1.471,843,1.471,844,1.471,845,1.471,846,1.471,847,1.471,848,1.471]],["title/controllers/AuthController.html",[89,1.399,141,2.523]],["body/controllers/AuthController.html",[0,0.041,3,0.133,4,0.133,5,0.088,8,1.335,17,0.118,18,0.678,19,0.641,26,0.413,28,0.872,29,0.02,30,0.645,31,0.344,32,0.732,38,1.064,40,0.43,43,0.396,44,2.605,58,0.133,59,1.093,60,0.675,71,1.133,79,2.809,87,0.01,88,0.01,89,0.924,91,1.236,94,1.823,95,2.951,102,0.995,105,3.181,106,1.321,107,2.951,108,1.269,123,2.455,135,3.942,141,2.549,205,1.236,264,1.806,269,2.964,295,0.83,298,1.033,343,1.53,368,1.716,402,2.748,417,2.341,419,1.666,420,2.156,421,1.666,426,1.835,439,2.549,440,1.53,451,1.835,452,1.666,455,2.063,486,3.253,487,1.093,488,3.468,505,1.321,516,1.579,832,2.574,833,2.063,849,2.063,850,2.063,851,3.834,852,3.834,853,3.156,854,3.834,855,2.408,856,3.468,857,5.517,858,5.032,859,3.34,860,2.408,861,3.834,862,5.786,863,2.408,864,2.408,865,3.822,866,3.183,867,3.684,868,2.063,869,3.845,870,3.684,871,3.845,872,2.408,873,2.408,874,2.408,875,2.408,876,3.468,877,3.738,878,2.408,879,3.834,880,2.408,881,2.408,882,2.063,883,3.942,884,3.468,885,2.408,886,2.408,887,2.408,888,2.408,889,4.475,890,2.408,891,2.063,892,4.103,893,1.835,894,2.408,895,1.417,896,2.408,897,3.684,898,3.684,899,3.156,900,3.684,901,5.013,902,2.408,903,5.013,904,1.666,905,2.549,906,4.475,907,3.684,908,3.684,909,2.408,910,3.096,911,3.684,912,1.835,913,2.408,914,2.408,915,2.341,916,2.408,917,2.408,918,2.408,919,2.408,920,2.408,921,2.408]],["title/injectables/AuthService.html",[123,2,283,0.599]],["body/injectables/AuthService.html",[0,0.028,3,0.091,4,0.091,5,0.06,8,1.132,17,0.08,18,0.498,19,0.607,21,0.799,26,0.481,28,0.989,29,0.02,30,0.732,31,0.39,32,0.83,38,1.138,40,0.429,43,0.269,58,0.091,60,0.759,61,2.46,63,1.951,71,1.019,79,1.247,87,0.007,88,0.007,102,1.036,108,1.537,123,1.485,135,1.873,146,0.84,207,1.247,214,3.508,243,1.843,256,2.467,264,1.912,269,1.485,271,2.918,277,1.402,278,1.402,283,0.445,284,0.564,288,1.544,298,1.595,312,2.061,318,1.573,332,0.564,345,2.217,360,0.963,368,1.778,376,2.064,398,2.064,413,1.594,420,2.244,450,1.72,458,1.132,459,1.402,487,0.743,494,2.683,500,1.04,504,2.742,505,0.897,507,0.897,516,1.725,592,1.04,654,2.208,672,0.963,673,0.963,679,1.247,832,1.39,851,2.319,852,2.319,853,2.319,854,2.319,856,3.817,857,5.191,858,4.055,859,3.184,861,2.319,862,4.357,865,4.334,866,3.328,868,2.319,869,3.789,871,3.833,877,2.785,879,1.402,882,2.319,883,1.873,895,0.963,904,1.132,905,1.873,910,2.396,912,2.64,915,1.72,922,1.402,923,2.707,924,4.025,925,2.707,926,2.707,927,2.707,928,2.707,929,1.402,930,5.086,931,1.636,932,2.319,933,2.707,934,1.636,935,2.707,936,3.448,937,2.707,938,2.707,939,1.636,940,2.319,941,1.873,942,2.707,943,1.636,944,2.707,945,4.459,946,1.636,947,2.707,948,4.025,949,4.025,950,2.707,951,2.707,952,2.707,953,3.068,954,2.707,955,1.636,956,2.707,957,1.636,958,2.707,959,1.636,960,2.707,961,1.636,962,2.319,963,1.636,964,2.707,965,4.025,966,1.636,967,1.72,968,1.402,969,1.247,970,1.247,971,1.402,972,1.402,973,1.636,974,1.402,975,3.448,976,1.636,977,1.247,978,1.636,979,1.636,980,1.247,981,1.636,982,1.636,983,1.636,984,1.636,985,1.636,986,2.707,987,2.707,988,2.707,989,2.707,990,2.707,991,1.636,992,1.636,993,1.636,994,1.636,995,1.636,996,2.707,997,1.636,998,3.463,999,1.636,1000,2.707,1001,1.247,1002,2.707,1003,1.636,1004,1.636,1005,1.402,1006,1.402,1007,2.707,1008,1.636,1009,1.636,1010,1.636,1011,1.636,1012,1.636,1013,1.636,1014,1.636]],["title/classes/BadValidationRequestException.html",[0,0.061,1015,2.523]],["body/classes/BadValidationRequestException.html",[0,0.077,2,1.578,3,0.254,4,0.254,5,0.168,8,0.939,10,3.117,21,1.351,26,0.377,28,1.006,29,0.02,30,0.589,31,0.314,32,0.668,40,0.345,43,0.752,44,3.055,45,2.908,58,0.254,63,1.892,75,3.729,87,0.015,88,0.015,102,0.844,292,1.219,293,1.993,360,3.917,394,2.908,487,2.877,608,3.92,623,3.673,721,5.073,722,3.488,1015,3.998,1016,4.406,1017,4.406,1018,3.92,1019,6.655,1020,5.78,1021,5.78,1022,3.402,1023,5.78,1024,5.879,1025,4.576,1026,3.92,1027,4.576,1028,4.576,1029,4.576,1030,4.576,1031,4.576,1032,3.998,1033,4.576,1034,4.576,1035,2.908]],["title/injectables/BasicStrategy.html",[124,2.317,283,0.599]],["body/injectables/BasicStrategy.html",[0,0.073,3,0.24,4,0.24,5,0.159,8,0.89,13,2.756,17,0.213,18,1.028,19,0.599,21,1.824,26,0.461,28,0.755,29,0.02,30,0.558,31,0.298,32,0.633,38,0.972,40,0.466,43,0.713,58,0.24,87,0.015,88,0.015,102,1.009,108,1.413,124,3.926,205,2.226,243,1.664,256,2.226,283,0.918,284,1.495,345,2.022,368,1.566,420,2.031,869,3.947,871,3.856,967,4.146,1022,2.553,1035,2.756,1036,3.715,1037,5.292,1038,4.709,1039,5.921,1040,5.589,1041,5.585,1042,4.336,1043,4.784,1044,4.336,1045,3.306,1046,3,1047,3.306,1048,5.585,1049,5.585]],["title/classes/CheckArticleType.html",[0,0.061,432,2.317]],["body/classes/CheckArticleType.html",[0,0.079,2,1.608,3,0.258,4,0.258,5,0.171,8,0.957,15,3.002,17,0.229,18,1.076,19,0.62,26,0.384,28,0.811,29,0.02,30,0.6,31,0.483,32,0.68,38,0.811,40,0.441,43,0.766,58,0.258,63,1.526,87,0.016,88,0.016,108,1.18,264,1.376,293,2.38,353,3.863,367,3.081,430,2.744,432,3.716,433,4.045,487,2.902,504,2.248,598,2.744,660,4.458,667,2.589,915,3.716,1050,3.994,1051,4.458,1052,5.848,1053,4.871,1054,4.045,1055,4.458,1056,4.42,1057,5.107,1058,4.662,1059,4.662,1060,4.662]],["title/injectables/CronJobService.html",[125,2.317,283,0.599]],["body/injectables/CronJobService.html",[0,0.08,3,0.262,4,0.262,5,0.173,17,0.231,18,1.085,19,0.624,21,1.394,26,0.486,28,0.822,29,0.02,30,0.607,31,0.324,32,0.689,38,0.822,40,0.485,43,0.776,58,0.262,59,2.144,60,1.324,87,0.016,88,0.016,94,1.716,125,3.746,131,3.627,191,2.779,192,3.266,201,3.599,283,0.969,284,1.628,345,2.104,368,1.653,406,4.493,749,3,801,3.233,1061,5.505,1062,4.044,1063,6.73,1064,4.721,1065,4.721,1066,5.894,1067,4.721,1068,5.505,1069,5.894,1070,3.746,1071,5.894,1072,4.493,1073,5.049,1074,3.746,1075,4.721,1076,4.721]],["title/classes/CustomValidationPipe.html",[0,0.061,448,2.317]],["body/classes/CustomValidationPipe.html",[0,0.086,2,1.762,3,0.283,4,0.283,5,0.188,8,1.049,21,1.965,26,0.421,29,0.02,40,0.467,43,0.84,44,2.984,58,0.283,87,0.016,88,0.016,243,1.96,264,1.508,295,2.134,448,3.932,607,4.717,915,3.932,967,3.932,1015,3.535,1016,3.895,1017,3.895,1022,3.642,1024,5.301,1026,4.377,1035,3.247,1054,3.535,1077,4.377,1078,6.187,1079,6.656,1080,5.109,1081,5.109,1082,5.109,1083,5.109]],["title/injectables/EmailService.html",[126,2.146,283,0.599]],["body/injectables/EmailService.html",[0,0.065,3,0.214,4,0.214,5,0.142,8,0.792,10,2.348,17,0.189,18,0.952,19,0.566,21,1.139,24,3.509,25,3.67,26,0.426,28,0.9,29,0.02,30,0.665,31,0.355,32,0.755,38,0.671,40,0.516,42,2.116,43,0.634,51,2.116,52,1.86,53,1.86,58,0.214,60,1.636,61,2.238,87,0.014,88,0.014,126,3.044,174,2.451,177,2.941,184,4.036,241,3.305,259,3.305,264,2.018,283,0.85,284,1.33,293,2.473,295,1.33,296,2.451,297,2.116,299,1.48,345,1.91,368,1.45,412,3.006,420,1.402,438,2.271,450,3.286,753,3.578,793,4.131,794,5.1,1070,2.451,1084,3.305,1085,5.171,1086,2.669,1087,6.834,1088,3.857,1089,5.171,1090,3.857,1091,3.305,1092,2.941,1093,3.857,1094,5.834,1095,3.857,1096,3.857,1097,3.857,1098,5.834,1099,3.857,1100,3.305,1101,3.857,1102,3.857,1103,3.857,1104,2.669,1105,5.171,1106,5.171,1107,3.857,1108,3.857,1109,3.857,1110,3.857,1111,3.305,1112,3.857,1113,3.857,1114,4.43,1115,2.941,1116,3.857]],["title/classes/ErrorResponse.html",[0,0.061,54,2.523]],["body/classes/ErrorResponse.html",[0,0.081,2,1.663,3,0.267,4,0.267,5,0.177,10,3.269,13,3.796,17,0.236,19,0.712,26,0.535,29,0.02,31,0.445,54,4.132,55,5.169,58,0.267,70,4.553,71,1.512,74,4.946,75,3.819,87,0.016,88,0.016,102,0.99,292,1.591,379,5.117,866,2.712,1117,4.131,1118,4.823,1119,6.781,1120,5.973,1121,4.823,1122,5.117,1123,5.117,1124,4.823,1125,5.973]],["title/injectables/ExcelService.html",[127,2.146,283,0.599]],["body/injectables/ExcelService.html",[0,0.043,3,0.141,4,0.141,5,0.17,8,0.951,9,1.326,17,0.125,18,0.708,19,0.45,26,0.457,28,0.806,29,0.021,30,0.596,31,0.459,32,0.676,38,1.014,40,0.456,43,0.419,58,0.307,61,2.565,63,2.086,71,0.645,87,0.01,88,0.01,102,0.963,108,1.474,127,2.264,243,1.475,248,1.604,283,0.632,284,0.879,292,1.025,293,1.326,295,2.009,297,2.541,298,1.079,299,2.235,318,1.747,324,0.879,328,3.038,334,1.092,344,3.98,347,2.932,356,2.727,359,2.671,364,1.942,367,1.854,370,5.206,410,2.661,412,3.181,420,1.876,438,1.5,450,2.444,516,2.212,533,1.397,610,4.421,620,5.028,667,1.558,707,4.95,717,1.5,777,3.295,798,2.932,1040,3.295,1126,2.182,1127,4.633,1128,4.633,1129,3.846,1130,3.846,1131,3.846,1132,2.548,1133,5.161,1134,6.225,1135,6.829,1136,3.846,1137,5.54,1138,3.846,1139,2.548,1140,4.223,1141,3.846,1142,5.825,1143,2.548,1144,6.493,1145,5.54,1146,3.846,1147,2.548,1148,4.633,1149,2.932,1150,2.548,1151,1.942,1152,4.633,1153,3.969,1154,3.832,1155,3.295,1156,2.548,1157,2.548,1158,2.548,1159,2.548,1160,2.548,1161,2.548,1162,2.548,1163,2.548,1164,2.548,1165,2.548,1166,2.548,1167,2.548,1168,2.548,1169,5.161,1170,2.548,1171,2.548,1172,2.548,1173,2.548,1174,2.548,1175,2.548,1176,2.548,1177,2.182,1178,2.548,1179,2.182,1180,2.548,1181,2.548,1182,3.846,1183,2.548,1184,2.548,1185,2.548,1186,3.846,1187,2.548,1188,2.548,1189,2.548,1190,2.548]],["title/injectables/FileService.html",[128,2,283,0.599]],["body/injectables/FileService.html",[0,0.042,3,0.138,4,0.138,5,0.25,8,0.777,9,0.86,10,2.876,17,0.122,18,0.696,19,0.6,21,0.736,24,2.966,25,3.293,26,0.476,28,0.955,29,0.02,30,0.845,31,0.396,32,0.801,38,1.045,39,3.532,40,0.495,42,1.368,43,0.41,51,1.368,52,1.202,53,1.202,58,0.138,59,1.132,60,1.061,61,1.958,62,1.725,63,1.497,87,0.01,88,0.01,102,0.993,108,1.634,128,2.508,182,4.381,184,3.797,243,2.105,246,3.242,256,2.621,264,0.736,281,2.618,283,0.622,284,0.86,292,1.008,312,1.01,345,1.891,368,1.432,397,2.076,404,2.136,420,1.663,444,1.901,487,1.132,494,1.069,499,3.244,528,4.381,667,1.01,673,1.468,753,1.725,832,1.28,940,3.242,941,3.532,953,2.885,1091,2.136,1104,2.618,1111,2.136,1115,1.901,1140,2.885,1155,3.918,1191,2.136,1192,5.777,1193,5.105,1194,3.784,1195,3.784,1196,3.784,1197,2.494,1198,2.494,1199,3.784,1200,4.573,1201,5.488,1202,2.494,1203,2.494,1204,3.784,1205,3.918,1206,4.573,1207,5.777,1208,4.573,1209,2.136,1210,3.784,1211,2.494,1212,3.242,1213,3.784,1214,3.784,1215,2.494,1216,3.784,1217,6.003,1218,3.784,1219,2.494,1220,4.573,1221,3.784,1222,3.242,1223,3.784,1224,3.784,1225,3.242,1226,3.918,1227,3.242,1228,3.486,1229,4.573,1230,3.784,1231,3.784,1232,3.784,1233,3.784,1234,3.486,1235,2.494,1236,4.573,1237,2.494,1238,2.494,1239,2.494,1240,3.784,1241,2.136,1242,2.494,1243,3.242,1244,2.494,1245,3.784,1246,2.494,1247,2.494,1248,2.494,1249,2.494,1250,2.494,1251,2.494,1252,2.494,1253,2.494,1254,2.494,1255,2.494,1256,2.494,1257,2.494,1258,2.494,1259,2.494,1260,2.494,1261,2.494,1262,2.494,1263,2.494,1264,2.494,1265,2.494,1266,2.494,1267,2.494,1268,4.573,1269,3.784,1270,2.494,1271,2.494,1272,2.494,1273,2.494,1274,2.494,1275,2.494,1276,2.494,1277,2.494]],["title/classes/HttpExceptionFilter.html",[0,0.061,162,2.523]],["body/classes/HttpExceptionFilter.html",[0,0.072,2,1.478,3,0.238,4,0.238,5,0.157,7,3.268,8,0.88,10,2.79,11,4.749,12,4.749,13,3.523,14,4.749,15,2.846,16,5.263,17,0.21,18,1.02,19,0.596,20,5.263,21,1.266,25,3.779,26,0.457,28,0.965,29,0.02,30,0.713,31,0.38,32,0.809,33,4.749,34,4.25,35,5.565,37,2.965,38,0.746,39,3.835,40,0.49,42,2.351,43,0.704,44,2.673,45,3.904,46,2.965,48,4.749,49,3.672,50,3.672,51,2.351,52,2.067,53,2.067,58,0.238,60,1.202,61,1.644,63,2.126,66,3.672,67,3.672,68,3.672,69,3.672,70,4.683,71,1.085,74,3.268,75,2.523,85,3.672,87,0.015,88,0.015,162,3.835,1086,2.965,1092,3.268,1278,5.263,1279,4.286,1280,6.495,1281,4.286,1282,4.286,1283,4.286,1284,4.286,1285,3.672,1286,5.543,1287,4.286,1288,4.286]],["title/interfaces/JwtPayload.html",[271,2,1289,2]],["body/interfaces/JwtPayload.html",[3,0.309,4,0.309,5,0.205,17,0.274,29,0.019,31,0.383,58,0.309,71,1.749,87,0.017,88,0.017,271,3.577,292,1.738,856,4.927,895,3.285,1289,3.061,1290,3.861,1291,4.781]],["title/interfaces/JwtRequest.html",[876,2.523,1289,2]],["body/interfaces/JwtRequest.html",[3,0.297,4,0.297,5,0.196,17,0.263,29,0.02,31,0.367,40,0.404,44,3.069,58,0.297,87,0.017,88,0.017,231,4.081,269,3.491,271,4.066,292,1.696,876,4.402,877,3.704,895,3.152,969,4.081,1022,3.746,1289,2.937,1290,3.704,1292,4.587,1293,5.354,1294,4.081,1295,5.354]],["title/injectables/JwtStrategy.html",[129,2.317,283,0.599]],["body/injectables/JwtStrategy.html",[0,0.068,3,0.225,4,0.225,5,0.149,17,0.199,18,0.985,19,0.581,21,1.199,26,0.441,28,0.931,29,0.02,30,0.689,31,0.367,32,0.781,38,0.707,40,0.522,43,0.667,58,0.225,60,1.139,61,1.558,63,1.329,87,0.014,88,0.014,108,1.028,129,3.401,146,2.085,205,2.085,214,3.15,264,1.58,269,3.489,271,2.227,275,3.479,283,0.879,284,1.4,298,1.501,312,1.645,332,1.4,345,1.959,368,1.501,461,3.479,494,1.74,504,3.274,507,2.935,516,2.727,654,3.489,672,2.39,856,2.809,858,3.095,859,2.43,866,3.19,877,2.809,895,2.39,910,4.14,912,4.562,929,3.479,932,4.584,967,4.043,968,3.479,969,3.095,975,3.479,1001,3.095,1005,3.479,1006,3.479,1022,2.39,1035,2.581,1038,3.095,1045,3.095,1046,2.809,1047,3.095,1296,3.479,1297,4.061,1298,5.351,1299,4.061,1300,4.061,1301,4.061,1302,4.061,1303,4.061,1304,4.061,1305,5.351,1306,4.061,1307,4.061]],["title/injectables/LocalStrategy.html",[130,2.317,283,0.599]],["body/injectables/LocalStrategy.html",[0,0.063,3,0.208,4,0.208,5,0.138,8,0.772,9,1.753,17,0.184,18,0.936,19,0.559,21,1.11,26,0.419,28,1.202,29,0.02,30,0.654,31,0.349,32,0.742,38,0.885,40,0.465,43,0.618,44,2.974,45,3.23,58,0.208,59,1.708,60,1.055,63,1.231,87,0.014,88,0.014,102,0.969,108,0.952,123,3.643,130,3.23,205,1.93,243,2.209,256,2.61,264,1.501,283,0.835,284,1.297,345,1.885,360,2.992,368,1.426,397,2.062,398,3.875,420,1.848,486,2.788,487,2.308,494,1.612,504,2.974,623,3.92,793,3.23,794,3.875,866,2.801,869,4.057,871,3.839,891,3.221,910,4.267,915,3.23,953,4.702,967,3.92,974,3.221,1022,2.213,1035,2.39,1038,2.866,1043,4.355,1045,2.866,1046,2.601,1047,2.866,1285,5.284,1308,3.221,1309,3.76,1310,3.76,1311,3.76,1312,6.168,1313,5.083,1314,5.083,1315,5.083,1316,5.083,1317,3.221,1318,5.083,1319,3.76,1320,3.76]],["title/classes/Migrations1691261966905.html",[0,0.061,1321,2.78]],["body/classes/Migrations1691261966905.html",[0,0.048,2,0.983,3,0.158,4,0.158,5,0.105,9,2.163,15,2.146,17,0.339,18,0.769,19,0.637,26,0.408,28,0.727,29,0.019,30,0.747,31,0.34,32,0.61,38,0.727,40,0.215,58,0.158,87,0.011,88,0.011,102,0.61,239,3.466,248,1.95,292,1.114,293,1.881,295,1.442,296,1.811,298,1.703,299,1.899,302,4.157,306,5.004,312,2.953,320,3.581,326,3.691,332,0.983,337,2.441,345,1.987,368,1.53,386,1.811,393,2.293,413,3.419,494,3.133,516,1.221,517,2.892,543,4.018,569,2.172,575,2.441,584,3.581,590,5.512,595,4.157,604,4.672,605,4.672,667,1.155,716,2.172,717,1.677,832,2.8,859,1.898,883,2.892,1154,4.781,1321,4.157,1322,4.672,1323,2.172,1324,4.241,1325,3.581,1326,2.441,1327,3.581,1328,5.624,1329,2.849,1330,3.581,1331,2.441,1332,4.975,1333,4.944,1334,5.2,1335,5.2,1336,4.975,1337,4.975,1338,3.581,1339,1.811,1340,2.441,1341,2.441,1342,5.454,1343,6.433,1344,2.849,1345,4.18,1346,4.18,1347,4.18,1348,2.441,1349,2.441,1350,4.18,1351,4.18,1352,6.433,1353,5.454,1354,5.454,1355,4.18,1356,6.433,1357,5.454,1358,4.951,1359,4.18,1360,4.18,1361,4.18,1362,4.18,1363,2.849,1364,5.454,1365,5.796]],["title/classes/Migrations1691666064778.html",[0,0.061,1366,2.78]],["body/classes/Migrations1691666064778.html",[0,0.072,2,1.478,3,0.238,4,0.238,5,0.157,9,1.912,15,2.846,17,0.301,18,1.02,19,0.697,26,0.507,28,0.965,29,0.02,30,0.866,31,0.422,32,0.809,38,0.965,40,0.323,58,0.238,87,0.015,88,0.015,102,0.809,292,1.477,298,1.555,312,2.792,332,1.478,345,2.255,368,1.822,494,2.633,500,2.724,516,1.837,569,3.268,667,1.737,866,2.79,869,2.351,871,3.04,883,3.835,905,2.965,1032,2.965,1154,2.965,1323,3.268,1324,5.263,1325,4.749,1326,3.672,1327,4.749,1328,6.152,1330,4.749,1331,3.672,1332,3.672,1333,3.835,1334,4.749,1335,3.672,1336,3.672,1337,3.672,1338,3.672,1341,3.672,1365,4.749,1366,4.951,1367,5.565,1368,4.286,1369,3.672,1370,4.286,1371,3.672,1372,5.543]],["title/controllers/PushNotificationController.html",[89,1.399,140,2.523]],["body/controllers/PushNotificationController.html",[0,0.066,3,0.216,4,0.216,5,0.143,8,1.07,17,0.191,18,0.96,19,0.652,26,0.43,28,0.907,29,0.02,30,0.671,31,0.358,32,0.761,38,0.907,40,0.492,43,0.642,58,0.216,59,1.773,60,1.095,87,0.014,88,0.014,89,1.498,91,2.005,94,1.896,95,3.069,105,3.455,106,2.142,107,3.069,108,1.319,131,3.013,140,3.607,191,3.455,192,2.701,205,2.005,295,1.347,343,2.481,345,2.198,368,1.757,419,2.701,420,1.896,421,2.701,426,2.976,440,2.481,451,2.976,488,2.701,749,3.73,801,3.908,832,3.519,859,3.373,1074,4.426,1373,3.345,1374,4.466,1375,4.466,1376,3.345,1377,4.356,1378,3.904,1379,3.904,1380,3.345,1381,5.752,1382,3.904,1383,3.904,1384,5.213,1385,3.345,1386,3.904,1387,3.904,1388,3.904,1389,3.904,1390,3.904,1391,3.904,1392,3.904,1393,3.904,1394,3.904]],["title/injectables/PushNotificationService.html",[131,1.872,283,0.599]],["body/injectables/PushNotificationService.html",[0,0.043,3,0.143,4,0.143,5,0.095,8,0.529,9,0.89,10,2.12,17,0.127,18,0.715,19,0.651,21,0.762,25,3.21,26,0.459,28,0.904,29,0.02,30,0.668,31,0.356,32,0.758,38,0.969,40,0.499,42,1.415,43,0.424,51,1.415,52,1.244,53,1.244,58,0.143,60,1.309,61,1.993,63,1.823,75,2.286,87,0.01,88,0.01,100,2.686,102,0.377,108,0.653,131,1.993,146,1.325,152,2.359,154,1.519,174,1.64,189,3.959,191,3.445,197,2.967,199,2.21,223,1.64,248,1.942,264,1.146,283,0.638,284,0.89,290,1.519,293,1.61,294,2.21,295,1.791,299,1.489,316,2.21,318,1.172,324,1.791,332,0.89,334,1.106,345,2.194,367,1.244,368,1.753,402,1.872,420,1.412,458,1.785,494,2.226,498,2.21,499,1.64,654,3.055,672,1.519,749,3.72,753,2.686,770,1.785,793,3.72,798,1.967,801,3.629,802,5.668,816,1.785,832,1.993,859,3.135,866,2.359,884,1.785,941,2.686,971,2.21,980,2.96,1032,1.785,1070,1.64,1074,3.301,1086,1.785,1092,1.967,1100,2.21,1114,2.21,1115,1.967,1154,1.785,1294,2.96,1374,3.326,1375,3.326,1376,3.326,1377,3.859,1380,3.326,1381,4.45,1385,2.21,1395,2.21,1396,5.194,1397,3.883,1398,4.668,1399,5.194,1400,2.58,1401,2.58,1402,2.58,1403,2.58,1404,2.686,1405,3.326,1406,2.96,1407,3.883,1408,2.58,1409,3.883,1410,3.883,1411,2.96,1412,2.58,1413,2.58,1414,1.967,1415,2.58,1416,2.58,1417,3.883,1418,2.58,1419,2.21,1420,2.58,1421,2.58,1422,2.58,1423,5.194,1424,2.58,1425,2.58,1426,2.58,1427,2.58,1428,2.58,1429,3.883,1430,2.58,1431,2.58,1432,2.58,1433,3.883,1434,2.58,1435,2.58,1436,2.58,1437,3.883,1438,3.883,1439,3.883,1440,3.883,1441,2.58,1442,3.883,1443,3.883,1444,4.668,1445,2.58,1446,2.58,1447,3.883,1448,2.58,1449,3.883,1450,2.58,1451,4.668,1452,2.58,1453,2.58,1454,2.58,1455,2.58]],["title/classes/PushTokenDto.html",[0,0.061,1377,2.317]],["body/classes/PushTokenDto.html",[0,0.086,2,1.754,3,0.282,4,0.282,5,0.187,17,0.249,19,0.698,26,0.509,29,0.02,31,0.423,40,0.384,58,0.282,87,0.016,88,0.016,102,0.901,248,2.199,292,1.644,324,2.291,801,3.385,859,3.213,1377,3.921,1404,4.778,1456,4.357,1457,5.086,1458,5.086,1459,6.17,1460,5.286,1461,5.086]],["title/entities/PushTokenEntity.html",[197,2.317,288,1.399]],["body/entities/PushTokenEntity.html",[0,0.06,3,0.196,4,0.196,5,0.13,8,0.725,9,2.248,17,0.173,19,0.691,26,0.496,29,0.02,30,0.774,31,0.412,40,0.421,58,0.196,87,0.013,88,0.013,94,2.185,102,0.711,197,3.097,248,1.733,288,2.139,289,1.939,292,1.298,318,2.73,319,4.582,324,2.175,325,3.714,326,3.097,328,3.283,332,1.219,334,1.515,402,2.35,413,3.837,453,4.143,585,5.149,595,4.969,668,3.283,673,2.08,707,3.714,770,3.371,793,3.097,801,3.575,839,3.714,859,3.137,866,2.73,941,3.371,1070,3.097,1072,3.714,1073,4.174,1074,3.097,1348,4.174,1349,4.174,1404,4.158,1405,4.174,1406,3.714,1414,4.807,1419,4.777,1462,3.028,1463,4.873,1464,4.174,1465,4.873,1466,4.873,1467,4.873,1468,4.873,1469,4.174,1470,4.873,1471,4.873,1472,5.577,1473,3.534,1474,3.534,1475,4.777,1476,3.534,1477,3.534,1478,6.011,1479,5.584,1480,4.873,1481,4.873,1482,4.873,1483,4.873,1484,4.873,1485,4.873,1486,3.534]],["title/classes/RequiredParameterPipe.html",[0,0.061,892,2.523]],["body/classes/RequiredParameterPipe.html",[0,0.081,2,1.66,3,0.267,4,0.267,5,0.177,8,0.988,15,3.062,17,0.236,18,1.098,19,0.629,26,0.397,28,0.837,29,0.02,30,0.619,31,0.33,32,0.702,38,0.837,40,0.363,43,0.791,58,0.267,87,0.016,88,0.016,102,0.946,108,1.218,264,1.421,312,1.95,360,2.833,391,3.791,487,2.185,504,2.32,592,3.058,660,4.547,667,2.746,892,4.126,893,4.547,1051,4.547,1053,4.941,1054,4.126,1055,4.547,1056,4.484,1057,5.165,1487,4.123,1488,5.11,1489,6.482,1490,4.812,1491,4.812,1492,4.812]],["title/injectables/SentryService.html",[24,1.872,283,0.599]],["body/injectables/SentryService.html",[0,0.081,3,0.266,4,0.266,5,0.176,17,0.235,18,1.095,19,0.628,21,1.756,24,3.054,25,3.889,26,0.491,28,1.035,29,0.02,30,0.766,31,0.408,32,0.868,37,3.315,38,0.834,39,4.115,40,0.488,42,2.628,43,0.788,51,2.628,52,2.311,53,2.311,58,0.266,60,1.344,61,1.838,62,3.315,75,3.502,87,0.016,88,0.016,102,0.944,283,0.978,284,1.653,741,4.105,816,4.813,1086,3.315,1493,4.105,1494,5.949,1495,4.792,1496,5.949,1497,4.792,1498,4.105,1499,4.105,1500,5.949,1501,4.792,1502,4.792,1503,4.792]],["title/classes/StringToNumberPipe.html",[0,0.061,435,2.317]],["body/classes/StringToNumberPipe.html",[0,0.082,2,1.674,3,0.269,4,0.269,5,0.178,8,0.996,15,3.079,17,0.238,18,1.104,19,0.631,26,0.4,28,0.845,29,0.02,30,0.625,31,0.333,32,0.708,38,0.845,40,0.366,43,0.798,58,0.269,63,1.589,71,1.767,87,0.016,88,0.016,102,1.019,108,1.518,435,3.811,436,4.149,592,4.135,667,1.967,1051,4.571,1053,4.96,1054,4.149,1055,4.571,1056,4.502,1057,5.181,1504,4.158,1505,5.997,1506,4.854,1507,5.997,1508,4.854,1509,4.854]],["title/controllers/TagController.html",[89,1.399,138,2.523]],["body/controllers/TagController.html",[0,0.053,3,0.173,4,0.173,5,0.115,8,1.235,17,0.153,18,0.822,19,0.676,26,0.469,28,0.99,29,0.02,30,0.732,31,0.39,32,0.83,38,1.122,40,0.473,43,0.513,58,0.173,59,1.417,60,0.875,87,0.012,88,0.012,89,1.197,91,1.602,94,2.069,95,3.349,105,3.544,106,1.711,107,3.349,108,1.44,132,3.068,138,3.088,248,1.871,264,1.947,295,1.076,298,1.596,324,1.962,334,1.337,343,1.983,345,2.28,356,3.349,359,2.153,368,1.85,393,4.102,413,2.628,417,2.837,418,2.378,419,2.158,420,2.069,421,3.088,422,3.824,439,3.088,440,1.983,448,1.983,449,2.673,452,2.158,453,1.983,486,2.449,488,2.158,500,3.826,505,1.711,507,2.449,533,3.736,832,3.386,899,3.824,904,2.158,977,3.974,1151,2.378,1406,3.403,1510,2.673,1511,3.824,1512,3.824,1513,3.824,1514,3.824,1515,2.673,1516,3.12,1517,3.12,1518,3.12,1519,5.751,1520,3.824,1521,2.673,1522,3.12,1523,3.12,1524,2.673,1525,3.12,1526,3.12,1527,2.673,1528,3.12,1529,3.12,1530,3.12,1531,3.12,1532,3.12,1533,3.12,1534,3.12,1535,3.12,1536,3.12,1537,3.12,1538,3.12,1539,3.12,1540,3.12]],["title/classes/TagDto.html",[0,0.061,533,2]],["body/classes/TagDto.html",[0,0.091,2,1.411,3,0.227,4,0.227,5,0.15,17,0.201,19,0.707,21,1.208,26,0.547,28,0.712,29,0.02,30,0.773,31,0.455,32,0.597,40,0.453,58,0.227,71,1.361,87,0.014,88,0.014,94,2.184,100,4.155,102,0.993,166,3.492,239,2.599,248,2.06,292,1.433,298,1.685,299,2.304,324,2.071,334,1.753,393,3.859,533,2.949,546,3.504,552,3.504,611,5.94,623,2.599,717,3.901,747,3.118,866,2.442,1122,4.606,1339,2.599,1541,3.504,1542,5.376,1543,5.376,1544,4.09,1545,5.376,1546,5.376,1547,4.09,1548,5.376,1549,4.09,1550,6.006,1551,4.09,1552,4.09,1553,4.09,1554,4.09,1555,4.09,1556,4.09]],["title/entities/TagEntity.html",[166,1.872,288,1.399]],["body/entities/TagEntity.html",[0,0.074,3,0.243,4,0.243,5,0.161,9,1.513,17,0.215,19,0.723,26,0.559,29,0.02,31,0.465,32,0.821,40,0.469,58,0.243,71,1.424,87,0.015,88,0.015,94,2.463,102,0.956,150,3.364,166,2.889,248,1.931,288,1.683,289,2.406,292,1.499,298,1.742,299,2.383,324,2.337,326,3.576,328,3.857,332,1.513,333,3.759,334,1.88,344,3.657,570,3.344,588,3.759,600,4.82,716,4.289,717,3.657,1475,5.322,1557,3.759,1558,5.627,1559,5.627,1560,4.387,1561,4.387,1562,5.627,1563,4.387,1564,4.387,1565,4.387,1566,4.387]],["title/injectables/TagService.html",[132,2.146,283,0.599]],["body/injectables/TagService.html",[0,0.057,3,0.187,4,0.187,5,0.124,9,1.164,17,0.165,18,0.868,19,0.685,21,1.393,26,0.511,28,1.079,29,0.02,30,0.798,31,0.425,32,0.905,38,1.025,40,0.498,43,0.555,58,0.187,60,0.946,61,1.294,63,1.781,87,0.013,88,0.013,108,1.377,132,2.778,146,1.732,166,3.183,248,1.997,264,1.831,283,0.775,284,1.164,298,1.653,299,1.294,312,1.912,324,2.032,332,1.164,334,1.446,345,2.312,359,1.627,368,1.887,393,3.401,494,2.754,500,2.144,504,2.275,505,1.851,507,1.851,533,3.799,654,3.232,667,1.367,668,3.203,672,1.986,673,1.986,717,3.203,728,2.891,731,4.042,747,2.572,751,2.891,904,2.334,977,2.572,1151,2.572,1511,4.042,1512,4.042,1513,4.042,1514,4.042,1515,4.042,1519,4.661,1521,4.042,1524,4.042,1527,4.042,1567,2.891,1568,3.374,1569,3.374,1570,3.374,1571,3.374,1572,3.374,1573,3.374,1574,5.892,1575,5.892,1576,3.374,1577,3.374,1578,3.374,1579,4.718,1580,4.718,1581,3.374,1582,3.374,1583,3.374,1584,3.374,1585,4.718,1586,3.374,1587,3.374,1588,3.374,1589,3.374,1590,3.374,1591,3.374]],["title/interfaces/UploadedFileDto.html",[354,2.523,1289,2]],["body/interfaces/UploadedFileDto.html",[3,0.219,4,0.219,5,0.273,8,0.81,17,0.193,29,0.02,30,0.867,31,0.5,58,0.219,71,1.493,87,0.014,88,0.014,102,1.093,184,4.351,292,1.399,354,3.632,356,2.323,376,3.008,446,3.008,541,4.002,607,3.008,839,4.002,1104,4.351,1140,5.387,1212,5.388,1222,5.769,1226,5.769,1227,5.769,1289,2.88,1290,2.73,1592,3.38,1593,5.9,1594,3.946,1595,6.734,1596,6.29,1597,6.29,1598,5.25,1599,5.25,1600,5.25,1601,5.25,1602,5.25,1603,5.25,1604,5.25,1605,5.25,1606,5.25,1607,5.25,1608,5.25]],["title/entities/UserEntity.html",[214,2.146,288,1.399]],["body/entities/UserEntity.html",[0,0.064,3,0.212,4,0.212,5,0.14,9,1.317,17,0.187,19,0.719,26,0.55,29,0.02,30,0.799,31,0.458,32,0.75,40,0.288,58,0.212,71,1.3,87,0.014,88,0.014,94,2.425,102,0.974,214,3.023,243,2.559,256,3.187,288,1.465,289,2.094,292,1.368,298,1.628,312,2.515,313,4.4,314,4.732,315,4.4,318,2.819,322,4.424,328,3.654,332,1.317,397,2.817,516,2.487,570,2.91,834,5.317,857,5.085,859,2.819,865,4.424,866,2.332,869,3.183,871,3.183,905,2.641,962,4.4,1001,2.91,1333,3.553,1369,4.4,1371,4.4,1404,4.294,1464,4.4,1479,4.4,1520,4.4,1609,3.271,1610,5.803,1611,3.818,1612,5.136,1613,3.818,1614,3.818,1615,3.818,1616,3.818,1617,4.4,1618,3.818,1619,5.136,1620,4.4,1621,5.136,1622,3.818,1623,3.818,1624,3.818]],["title/coverage.html",[1625,4.265]],["body/coverage.html",[0,0.119,1,2.086,5,0.111,6,2.583,7,3.32,24,1.548,29,0.02,31,0.207,54,2.086,55,2.298,87,0.012,88,0.012,89,2.375,90,2.086,92,2.583,103,1.775,116,2.086,121,1.775,122,1.775,123,1.654,124,1.916,125,1.916,126,1.775,127,1.775,128,1.654,129,1.916,130,1.916,131,1.548,132,1.775,136,2.298,137,2.086,138,2.086,139,2.086,140,2.086,141,2.086,147,2.298,150,1.548,152,1.978,157,2.298,162,2.086,166,1.548,191,2.564,197,1.916,214,1.775,264,0.89,271,1.654,281,2.086,283,1.157,285,3.32,288,2.279,290,2.564,291,3.731,293,1.04,342,2.583,354,2.086,355,1.916,412,1.454,432,1.916,433,2.086,435,1.916,436,2.086,441,2.086,446,2.298,448,1.916,515,2.583,533,1.654,565,2.583,606,2.583,624,3.32,625,2.583,649,2.583,668,1.775,669,2.086,709,5.865,726,2.583,749,2.768,849,2.583,876,2.086,892,2.086,893,2.298,895,2.564,922,2.583,970,2.298,1015,2.086,1016,2.298,1017,2.298,1018,2.583,1032,5.058,1036,2.583,1050,2.583,1061,2.583,1062,2.583,1077,2.583,1084,2.583,1117,2.583,1126,2.583,1149,4.981,1191,2.583,1209,2.583,1228,2.298,1234,2.298,1278,2.583,1289,2.805,1291,2.583,1292,2.583,1296,2.583,1308,2.583,1321,2.298,1322,2.583,1323,3.32,1333,2.086,1366,2.298,1367,2.583,1373,2.583,1377,1.916,1395,2.583,1414,2.298,1456,2.583,1462,2.583,1487,2.583,1493,2.583,1504,2.583,1510,2.583,1541,2.583,1557,2.583,1567,2.583,1592,2.583,1609,2.583,1625,2.583,1626,2.583,1627,3.015,1628,3.015,1629,6.19,1630,7.086,1631,5.113,1632,2.583,1633,2.583,1634,2.583,1635,5.113,1636,4.355,1637,2.583,1638,3.731,1639,2.583,1640,5.089,1641,3.015,1642,3.015,1643,3.015,1644,3.015,1645,5.94,1646,5.6,1647,3.015,1648,3.015,1649,4.355,1650,4.355,1651,3.015,1652,3.015,1653,6.19,1654,6.19,1655,4.355,1656,3.015,1657,3.015,1658,3.015,1659,3.32,1660,4.355,1661,4.355,1662,4.355,1663,3.015,1664,3.015,1665,3.015,1666,3.015,1667,3.015,1668,3.015,1669,3.015,1670,3.015]],["title/dependencies.html",[113,3.034,1671,2.608]],["body/dependencies.html",[0,0.092,5,0.155,13,3.484,29,0.02,43,0.693,46,2.915,47,3.212,52,2.032,53,2.938,87,0.015,88,0.015,106,2.311,113,2.915,144,3.61,146,2.163,170,3.61,171,4.696,174,3.484,177,3.212,181,3.61,182,2.915,189,3.212,201,3.212,205,2.163,207,3.212,269,3.007,332,1.453,444,3.212,450,2.678,623,2.678,859,1.914,884,2.915,936,3.61,972,3.61,1046,4.464,1056,2.915,1072,3.212,1153,3.61,1241,3.61,1243,3.61,1317,4.696,1411,3.212,1499,3.61,1672,4.214,1673,4.214,1674,4.214,1675,6.858,1676,4.214,1677,4.214,1678,4.214,1679,4.214,1680,4.214,1681,4.214,1682,4.214,1683,4.214,1684,4.214,1685,4.214,1686,6.093,1687,4.214,1688,4.214,1689,4.214,1690,4.214,1691,4.214,1692,4.214,1693,4.214,1694,4.214,1695,4.214,1696,4.214,1697,4.214,1698,4.214,1699,4.214,1700,4.214,1701,4.214,1702,4.214,1703,4.214,1704,4.214,1705,4.214,1706,4.214,1707,4.214,1708,4.214,1709,4.214,1710,4.214,1711,4.214,1712,4.214,1713,4.214,1714,4.214,1715,4.214,1716,4.214,1717,4.214,1718,4.214,1719,4.214,1720,4.214,1721,4.214,1722,4.214,1723,4.214]],["title/miscellaneous/enumerations.html",[1724,1.792,1725,3.757]],["body/miscellaneous/enumerations.html",[17,0.27,29,0.019,87,0.017,88,0.017,239,4.114,324,2.233,353,3.551,543,4.479,598,3.245,667,2.874,1339,4.114,1340,5.546,1724,3.245,1725,4.722,1726,5.512,1727,6.474,1728,5.512,1729,5.512]],["title/miscellaneous/functions.html",[1724,1.792,1730,3.757]],["body/miscellaneous/functions.html",[17,0.283,29,0.019,38,1.004,87,0.018,88,0.018,116,4.845,368,1.618,1659,4.397,1724,3.396,1730,4.942,1731,4.942]],["title/index.html",[17,0.149,738,2.321,1732,2.608]],["body/index.html",[5,0.245,10,1.91,15,2.159,29,0.015,37,2.91,87,0.015,88,0.015,96,5.321,174,2.673,182,2.91,220,3.603,223,2.673,269,2.307,279,3.603,332,1.45,356,2.476,370,3.206,406,3.206,453,3.48,507,3.003,654,2.307,685,3.603,738,3.206,801,2.307,816,4.212,850,3.603,884,2.91,980,5.225,1037,3.603,1039,3.603,1068,3.603,1070,2.673,1074,2.673,1123,3.603,1205,4.691,1225,3.603,1294,3.206,1339,4.098,1411,4.174,1460,3.603,1469,3.603,1488,4.691,1498,3.603,1620,3.603,1626,3.603,1732,3.603,1733,6.088,1734,4.206,1735,6.088,1736,4.206,1737,4.206,1738,4.206,1739,4.206,1740,4.206,1741,4.206,1742,5.475,1743,4.206,1744,3.603,1745,4.206,1746,5.475,1747,6.088,1748,4.206,1749,4.206,1750,4.206,1751,6.088,1752,4.206,1753,4.206,1754,4.691,1755,4.206,1756,4.206,1757,4.206,1758,4.206,1759,4.206,1760,4.206,1761,4.206,1762,4.206,1763,4.206,1764,4.206,1765,4.206,1766,4.206,1767,4.206,1768,4.691,1769,3.603,1770,3.603,1771,4.206,1772,4.206,1773,4.206,1774,4.206,1775,4.206,1776,4.206,1777,4.206,1778,4.206,1779,4.206,1780,5.475,1781,4.206,1782,4.206,1783,4.206,1784,4.206,1785,5.475,1786,6.088,1787,4.206,1788,4.206,1789,4.206,1790,4.206,1791,4.206,1792,4.206,1793,4.174,1794,4.206,1795,4.206,1796,5.475,1797,4.206,1798,4.206,1799,4.206,1800,4.206,1801,4.206]],["title/modules.html",[112,3.795]],["body/modules.html",[29,0.018,87,0.018,88,0.018,111,4.043,112,4.455,1744,5.006,1802,5.844,1803,5.844,1804,5.844]],["title/overview.html",[1805,4.265]],["body/overview.html",[2,1.578,24,3.252,29,0.02,87,0.015,88,0.015,91,2.349,103,3.729,110,4.406,111,5.3,113,3.166,114,3.92,115,3.92,116,3.166,117,3.92,118,3.92,119,3.92,120,3.92,121,3.729,122,3.729,123,3.475,124,4.026,125,4.026,126,3.729,127,3.729,128,3.475,129,4.026,130,4.026,131,3.252,132,3.729,133,4.951,134,3.92,135,3.166,284,1.578,289,2.51,386,2.908,388,3.92,1290,3.166,1805,3.92,1806,4.576,1807,4.576,1808,4.576,1809,3.92]],["title/properties.html",[292,1.169,1671,2.608]],["body/properties.html",[8,1.169,29,0.02,87,0.018,88,0.018,96,4.341,99,4.341,292,1.517,1339,3.619,1769,4.879,1810,5.695,1811,5.695,1812,5.695,1813,5.695,1814,5.695,1815,5.695]],["title/miscellaneous/variables.html",[1724,1.792,1793,3.343]],["body/miscellaneous/variables.html",[9,2.422,10,2.168,17,0.168,29,0.02,31,0.477,34,2.374,71,1.389,87,0.013,88,0.013,102,0.697,108,1.389,136,2.616,147,3.639,157,3.639,243,2.542,252,2.939,256,2.819,261,4.703,264,1.752,281,3.303,282,2.939,285,2.616,287,4.09,289,1.882,324,1.183,402,1.655,470,4.09,539,4.703,667,2.845,668,2.81,669,3.303,770,2.374,796,2.939,869,1.882,871,1.882,970,3.639,1104,3.303,1149,2.616,1177,4.09,1179,4.09,1228,3.639,1234,3.639,1617,2.939,1632,2.939,1633,4.09,1634,4.09,1637,2.939,1638,5.084,1639,2.939,1640,2.939,1659,2.616,1724,2.02,1731,2.939,1754,2.939,1768,2.939,1770,2.939,1793,2.616,1809,2.939,1816,3.431,1817,3.431,1818,6.238,1819,3.431,1820,3.431,1821,3.431,1822,3.431,1823,3.431,1824,3.431,1825,3.431,1826,3.431,1827,3.431,1828,3.431,1829,3.431,1830,3.431,1831,3.431,1832,3.431,1833,3.431,1834,3.431,1835,3.431,1836,3.431,1837,3.431,1838,3.431,1839,3.431,1840,3.431,1841,4.774,1842,3.431,1843,3.431,1844,3.431,1845,4.774,1846,4.774,1847,4.774,1848,4.774,1849,4.774,1850,4.774,1851,4.774,1852,4.774,1853,4.774,1854,4.774,1855,4.774,1856,5.49,1857,4.774,1858,5.49,1859,5.49,1860,5.49,1861,5.49,1862,5.49,1863,5.49,1864,5.49,1865,5.49,1866,5.49,1867,3.431,1868,3.431]]],"invertedIndex":[["",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"entities/UserEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1032,"title":{},"body":{"classes/BadValidationRequestException.html":{},"classes/Migrations1691666064778.html":{},"injectables/PushNotificationService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":101,"title":{},"body":{"controllers/AppController.html":{}}}],["0.1.1",{"_index":1810,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1714,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1697,"title":{},"body":{"dependencies.html":{}}}],["0.18.5",{"_index":1723,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":1709,"title":{},"body":{"dependencies.html":{}}}],["0.3.17",{"_index":1718,"title":{},"body":{"dependencies.html":{}}}],["0.3.9",{"_index":1687,"title":{},"body":{"dependencies.html":{}}}],["0.32.4",{"_index":1717,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1696,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1708,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1630,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1631,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1669,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1660,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1656,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":386,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/Migrations1691261966905.html":{},"overview.html":{}}}],["1.0.0",{"_index":1711,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":1712,"title":{},"body":{"dependencies.html":{}}}],["1.0.35",{"_index":1689,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":1685,"title":{},"body":{"dependencies.html":{}}}],["1.9.1",{"_index":1672,"title":{},"body":{"dependencies.html":{}}}],["1.9.3",{"_index":1704,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1636,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1629,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1654,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":1658,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":716,"title":{},"body":{"injectables/ArticleSearchService.html":{},"classes/Migrations1691261966905.html":{},"entities/TagEntity.html":{}}}],["10.0.0",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":1677,"title":{},"body":{"dependencies.html":{}}}],["10.2.6",{"_index":1705,"title":{},"body":{"dependencies.html":{}}}],["10/10",{"_index":1668,"title":{},"body":{"coverage.html":{}}}],["10/12",{"_index":1652,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1635,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["1024",{"_index":1841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1025",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["11",{"_index":1657,"title":{},"body":{"coverage.html":{}}}],["11.10.1",{"_index":1698,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":1185,"title":{},"body":{"injectables/ExcelService.html":{}}}],["14",{"_index":1808,"title":{},"body":{"overview.html":{}}}],["14d",{"_index":1854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["15",{"_index":1809,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["1d",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["1s",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["2",{"_index":387,"title":{},"body":{"controllers/ArticleController.html":{}}}],["2.1.0",{"_index":1673,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":1701,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":1646,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1148,"title":{},"body":{"injectables/ExcelService.html":{}}}],["252",{"_index":1429,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["255",{"_index":316,"title":{},"body":{"entities/ArticleContentEntity.html":{},"injectables/PushNotificationService.html":{}}}],["25m",{"_index":1852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":388,"title":{},"body":{"controllers/ArticleController.html":{},"overview.html":{}}}],["3.0.0",{"_index":1676,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1678,"title":{},"body":{"dependencies.html":{}}}],["3.0.9",{"_index":1688,"title":{},"body":{"dependencies.html":{}}}],["3.10.0",{"_index":1720,"title":{},"body":{"dependencies.html":{}}}],["3.5.2",{"_index":1703,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":1666,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":1648,"title":{},"body":{"coverage.html":{}}}],["3/6",{"_index":1655,"title":{},"body":{"coverage.html":{}}}],["32",{"_index":1617,"title":{},"body":{"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["33",{"_index":1653,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":1827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["360",{"_index":1260,"title":{},"body":{"injectables/FileService.html":{}}}],["360px",{"_index":1221,"title":{},"body":{"injectables/FileService.html":{}}}],["4.0.0",{"_index":1679,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1710,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":1722,"title":{},"body":{"dependencies.html":{}}}],["4.7.8",{"_index":1700,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":1650,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1667,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":1315,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["5",{"_index":1807,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":1683,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":1692,"title":{},"body":{"dependencies.html":{}}}],["5.2.3",{"_index":1694,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":1662,"title":{},"body":{"coverage.html":{}}}],["5/8",{"_index":1644,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1149,"title":{},"body":{"injectables/ExcelService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["53",{"_index":1663,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1806,"title":{},"body":{"overview.html":{}}}],["6.9.4",{"_index":1707,"title":{},"body":{"dependencies.html":{}}}],["6/7",{"_index":1642,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1647,"title":{},"body":{"coverage.html":{}}}],["62",{"_index":1643,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1645,"title":{},"body":{"coverage.html":{}}}],["7.1.4",{"_index":1680,"title":{},"body":{"dependencies.html":{}}}],["7.61.0",{"_index":1681,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1716,"title":{},"body":{"dependencies.html":{}}}],["7/13",{"_index":1664,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":1661,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1665,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1649,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1651,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1641,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":1719,"title":{},"body":{"dependencies.html":{}}}],["9.0.2",{"_index":1691,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":261,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["_req",{"_index":1208,"title":{},"body":{"injectables/FileService.html":{}}}],["acceptfile",{"_index":1248,"title":{},"body":{"injectables/FileService.html":{}}}],["accepts",{"_index":363,"title":{},"body":{"controllers/ArticleController.html":{}}}],["access",{"_index":858,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["accesstoken",{"_index":989,"title":{},"body":{"injectables/AuthService.html":{}}}],["according",{"_index":1078,"title":{},"body":{"classes/CustomValidationPipe.html":{}}}],["accounts",{"_index":1465,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["action",{"_index":1360,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["activated",{"_index":983,"title":{},"body":{"injectables/AuthService.html":{}}}],["active",{"_index":516,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ExcelService.html":{},"injectables/JwtStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"entities/UserEntity.html":{}}}],["active.'})@useguards(undefined)@httpcode(200)@post('sign",{"_index":873,"title":{},"body":{"controllers/AuthController.html":{}}}],["activity",{"_index":396,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["activity.'})@apinotfoundresponse({description",{"_index":399,"title":{},"body":{"controllers/ArticleController.html":{}}}],["adapter",{"_index":263,"title":{},"body":{"modules/AppModule.html":{}}}],["add",{"_index":1353,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["added",{"_index":1293,"title":{},"body":{"interfaces/JwtRequest.html":{}}}],["admin",{"_index":884,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PushNotificationService.html":{},"dependencies.html":{},"index.html":{}}}],["admin/lib/messaging/messaging",{"_index":1412,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["administration",{"_index":409,"title":{},"body":{"controllers/ArticleController.html":{}}}],["administrator",{"_index":81,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["administrators",{"_index":1307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["allowed",{"_index":1206,"title":{},"body":{"injectables/FileService.html":{}}}],["allowedfiletypes",{"_index":1249,"title":{},"body":{"injectables/FileService.html":{}}}],["allowedfiletypes.includes(file.mimetype",{"_index":1252,"title":{},"body":{"injectables/FileService.html":{}}}],["already",{"_index":977,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["android",{"_index":1433,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["andwhere('(content.title",{"_index":697,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["andwhere('article.active",{"_index":695,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["andwhere('article.articletype",{"_index":696,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["another",{"_index":1621,"title":{},"body":{"entities/UserEntity.html":{}}}],["api",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/PushNotificationService.html":{},"index.html":{}}}],["apibadrequestresponse",{"_index":897,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibasicauth",{"_index":1384,"title":{},"body":{"controllers/PushNotificationController.html":{}}}],["apibearerauth",{"_index":898,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiconflictresponse",{"_index":899,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TagController.html":{}}}],["apiforbiddenresponse",{"_index":900,"title":{},"body":{"controllers/AuthController.html":{}}}],["apinotfoundresponse",{"_index":439,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/AuthController.html":{},"controllers/TagController.html":{}}}],["apioperation",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/AuthController.html":{},"controllers/PushNotificationController.html":{},"controllers/TagController.html":{}}}],["apioperation({summary",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/AuthController.html":{},"controllers/PushNotificationController.html":{},"controllers/TagController.html":{}}}],["apitags",{"_index":440,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/AuthController.html":{},"controllers/PushNotificationController.html":{},"controllers/TagController.html":{}}}],["apitags('administration",{"_index":452,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/AuthController.html":{},"controllers/TagController.html":{}}}],["apitags('application",{"_index":1386,"title":{},"body":{"controllers/PushNotificationController.html":{}}}],["apiunauthorizedresponse",{"_index":901,"title":{},"body":{"controllers/AuthController.html":{}}}],["app",{"_index":980,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PushNotificationService.html":{},"index.html":{}}}],["app's",{"_index":1745,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":104,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":90,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appdatasource",{"_index":1634,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":453,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"entities/PushTokenEntity.html":{},"controllers/TagController.html":{},"index.html":{}}}],["application/vnd.openxmlformats",{"_index":473,"title":{},"body":{"controllers/ArticleController.html":{}}}],["appmodule",{"_index":111,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":103,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":1427,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["argumentmetadata",{"_index":1057,"title":{},"body":{"classes/CheckArticleType.html":{},"classes/RequiredParameterPipe.html":{},"classes/StringToNumberPipe.html":{}}}],["argumentshost",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":620,"title":{},"body":{"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{},"injectables/ExcelService.html":{}}}],["arrays",{"_index":1134,"title":{},"body":{"injectables/ExcelService.html":{}}}],["article",{"_index":293,"title":{},"body":{"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"classes/Migrations1691261966905.html":{},"injectables/PushNotificationService.html":{},"coverage.html":{}}}],["article.'})@apinotfoundresponse({description",{"_index":357,"title":{},"body":{"controllers/ArticleController.html":{}}}],["article.article.articletype",{"_index":1432,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["article.articlecontentid",{"_index":1094,"title":{},"body":{"injectables/EmailService.html":{}}}],["article.articlecontents",{"_index":301,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["article.body",{"_index":1100,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PushNotificationService.html":{}}}],["article.body.length",{"_index":1428,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["article.body.substring(0",{"_index":1430,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["article.childrenarticles",{"_index":582,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["article.coverimage",{"_index":1101,"title":{},"body":{"injectables/EmailService.html":{}}}],["article.entity",{"_index":333,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/TagEntity.html":{}}}],["article.id",{"_index":1431,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["article.language",{"_index":1159,"title":{},"body":{"injectables/ExcelService.html":{}}}],["article.parentarticle",{"_index":577,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["article.service",{"_index":431,"title":{},"body":{"controllers/ArticleController.html":{}}}],["article.tags",{"_index":846,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.title",{"_index":1098,"title":{},"body":{"injectables/EmailService.html":{}}}],["article=${json.stringify(newarticledto",{"_index":755,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article\\`(\\`id",{"_index":1358,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["article__tag",{"_index":590,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/Migrations1691261966905.html":{}}}],["article_content",{"_index":1343,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["article_id",{"_index":306,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"classes/Migrations1691261966905.html":{}}}],["article_type",{"_index":575,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/Migrations1691261966905.html":{}}}],["articleattributes",{"_index":1165,"title":{},"body":{"injectables/ExcelService.html":{}}}],["articleattributes.map((key",{"_index":1168,"title":{},"body":{"injectables/ExcelService.html":{}}}],["articlecontent",{"_index":366,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{}}}],["articlecontent.article",{"_index":573,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["articlecontent.article.active",{"_index":557,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.article.articletype",{"_index":551,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.article.parent",{"_index":559,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.article.tags",{"_index":809,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlecontent.article.tags?.filter(tag",{"_index":563,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.body",{"_index":555,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.coverimage",{"_index":561,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.dateofpublication",{"_index":549,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.id",{"_index":545,"title":{},"body":{"classes/ArticleDto.html":{},"injectables/ArticleService.html":{}}}],["articlecontent.id)?.article.tags",{"_index":811,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlecontent.language",{"_index":553,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.title",{"_index":547,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontententities",{"_index":703,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["articlecontententities.foreach(articlecontent",{"_index":808,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlecontententities.map(articlecontent",{"_index":719,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["articlecontententity",{"_index":152,"title":{"entities/ArticleContentEntity.html":{}},"body":{"modules/AppModule.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{},"coverage.html":{}}}],["articlecontententity.body",{"_index":688,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["articlecontententity.name}.body",{"_index":713,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["articlecontententity.name}.title",{"_index":712,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["articlecontententity.title",{"_index":687,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["articlecontentid",{"_index":410,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"injectables/ExcelService.html":{}}}],["articlecontentrepository",{"_index":656,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["articlecontents",{"_index":566,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["articlecontroller",{"_index":137,"title":{"controllers/ArticleController.html":{}},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"coverage.html":{}}}],["articledto",{"_index":412,"title":{"classes/ArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"coverage.html":{}}}],["articledto(article",{"_index":848,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articledto(articlecontent",{"_index":701,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["articledto(articlecontententity",{"_index":814,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articledto(newarticlecontententities[0",{"_index":800,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articledto(newarticlecontententity",{"_index":844,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleentity",{"_index":150,"title":{"entities/ArticleEntity.html":{}},"body":{"modules/AppModule.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/TagEntity.html":{},"coverage.html":{}}}],["articleid",{"_index":294,"title":{},"body":{"entities/ArticleContentEntity.html":{},"injectables/PushNotificationService.html":{}}}],["articlerepository",{"_index":729,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlerequestdto",{"_index":355,"title":{"classes/ArticleRequestDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["articles",{"_index":344,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/ExcelService.html":{},"entities/TagEntity.html":{}}}],["articles.map((content",{"_index":1167,"title":{},"body":{"injectables/ExcelService.html":{}}}],["articles/search",{"_index":626,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["articlesearchcontroller",{"_index":139,"title":{"controllers/ArticleSearchController.html":{}},"body":{"modules/AppModule.html":{},"controllers/ArticleSearchController.html":{},"coverage.html":{}}}],["articlesearchservice",{"_index":121,"title":{"injectables/ArticleSearchService.html":{}},"body":{"modules/AppModule.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"coverage.html":{},"overview.html":{}}}],["articleservice",{"_index":122,"title":{"injectables/ArticleService.html":{}},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"coverage.html":{},"overview.html":{}}}],["articlestoaoa",{"_index":1129,"title":{},"body":{"injectables/ExcelService.html":{}}}],["articlestoaoa(articles",{"_index":1131,"title":{},"body":{"injectables/ExcelService.html":{}}}],["articleswithtags.find(tag",{"_index":810,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articletype",{"_index":367,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"injectables/ExcelService.html":{},"injectables/PushNotificationService.html":{}}}],["articletypeenum",{"_index":353,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"miscellaneous/enumerations.html":{}}}],["asc",{"_index":1583,"title":{},"body":{"injectables/TagService.html":{}}}],["assets",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{}}}],["associated",{"_index":535,"title":{},"body":{"classes/ArticleDto.html":{}}}],["async",{"_index":345,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["atd",{"_index":389,"title":{},"body":{"controllers/ArticleController.html":{}}}],["attachment",{"_index":468,"title":{},"body":{"controllers/ArticleController.html":{}}}],["attachments",{"_index":1103,"title":{},"body":{"injectables/EmailService.html":{}}}],["attribute",{"_index":1020,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["attributes",{"_index":1028,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["auth",{"_index":850,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["auth.service",{"_index":891,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{}}}],["authcontroller",{"_index":141,"title":{"controllers/AuthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["authentication",{"_index":1294,"title":{},"body":{"interfaces/JwtRequest.html":{},"injectables/PushNotificationService.html":{},"index.html":{}}}],["authguard",{"_index":451,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/AuthController.html":{},"controllers/PushNotificationController.html":{}}}],["author",{"_index":1813,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":1039,"title":{},"body":{"injectables/BasicStrategy.html":{},"index.html":{}}}],["authservice",{"_index":123,"title":{"injectables/AuthService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["auto_increment",{"_index":1338,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["autocomplete",{"_index":640,"title":{},"body":{"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{}}}],["autocomplete.'})@apinotfoundresponse({description",{"_index":637,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["available",{"_index":1548,"title":{},"body":{"classes/TagDto.html":{}}}],["await",{"_index":494,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/FileService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"injectables/PushNotificationService.html":{},"injectables/TagService.html":{}}}],["backend",{"_index":96,"title":{},"body":{"controllers/AppController.html":{},"index.html":{},"properties.html":{}}}],["backend.git",{"_index":1784,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":487,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"injectables/FileService.html":{},"injectables/LocalStrategy.html":{},"classes/RequiredParameterPipe.html":{}}}],["badrequestexception('email",{"_index":974,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["badrequestexception('missing",{"_index":720,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["badrequestexception('only",{"_index":1254,"title":{},"body":{"injectables/FileService.html":{}}}],["badrequestexception(`cannot",{"_index":768,"title":{},"body":{"injectables/ArticleService.html":{}}}],["badrequestexception(`missing",{"_index":791,"title":{},"body":{"injectables/ArticleService.html":{}}}],["badrequestexception(`required",{"_index":1491,"title":{},"body":{"classes/RequiredParameterPipe.html":{}}}],["badrequestexception(`unsupported",{"_index":1060,"title":{},"body":{"classes/CheckArticleType.html":{}}}],["badvalidationrequestexception",{"_index":1015,"title":{"classes/BadValidationRequestException.html":{}},"body":{"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{},"coverage.html":{}}}],["badvalidationrequestexception(errors",{"_index":1083,"title":{},"body":{"classes/CustomValidationPipe.html":{}}}],["basic",{"_index":1037,"title":{},"body":{"injectables/BasicStrategy.html":{},"index.html":{}}}],["basicstrategy",{"_index":124,"title":{"injectables/BasicStrategy.html":{}},"body":{"modules/AppModule.html":{},"injectables/BasicStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["bcrypt",{"_index":936,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(plainpassword",{"_index":1014,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":1013,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(newpassword",{"_index":1012,"title":{},"body":{"injectables/AuthService.html":{}}}],["belongs",{"_index":309,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["best",{"_index":1105,"title":{},"body":{"injectables/EmailService.html":{}}}],["body",{"_index":295,"title":{},"body":{"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"classes/Migrations1691261966905.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"controllers/TagController.html":{}}}],["body('active",{"_index":513,"title":{},"body":{"controllers/ArticleController.html":{}}}],["body('password",{"_index":908,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('refreshtoken",{"_index":919,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('userid",{"_index":920,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('username",{"_index":907,"title":{},"body":{"controllers/AuthController.html":{}}}],["body(customvalidationpipe",{"_index":493,"title":{},"body":{"controllers/ArticleController.html":{}}}],["body).catch((error",{"_index":502,"title":{},"body":{"controllers/ArticleController.html":{}}}],["body.'})@apinotfoundresponse({description",{"_index":631,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["body.coverimage",{"_index":496,"title":{},"body":{"controllers/ArticleController.html":{}}}],["boolean",{"_index":397,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/FileService.html":{},"injectables/LocalStrategy.html":{},"entities/UserEntity.html":{}}}],["bootstrap",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1804,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1802,"title":{},"body":{"modules.html":{}}}],["buckovsky",{"_index":1815,"title":{},"body":{"properties.html":{}}}],["buffer",{"_index":1140,"title":{},"body":{"injectables/ExcelService.html":{},"injectables/FileService.html":{},"interfaces/UploadedFileDto.html":{}}}],["built",{"_index":1742,"title":{},"body":{"index.html":{}}}],["bytes",{"_index":1608,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["cache",{"_index":1693,"title":{},"body":{"dependencies.html":{}}}],["cacheinterceptor",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["can't",{"_index":1314,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["capture",{"_index":1501,"title":{},"body":{"injectables/SentryService.html":{}}}],["captureexception",{"_index":1494,"title":{},"body":{"injectables/SentryService.html":{}}}],["captureexception(message",{"_index":1496,"title":{},"body":{"injectables/SentryService.html":{}}}],["cascade",{"_index":302,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"classes/Migrations1691261966905.html":{}}}],["case",{"_index":710,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["catch",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch((error",{"_index":1115,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/PushNotificationService.html":{}}}],["catch(e",{"_index":765,"title":{},"body":{"injectables/ArticleService.html":{}}}],["catch(exception",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1282,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catching",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["cb",{"_index":1201,"title":{},"body":{"injectables/FileService.html":{}}}],["cb(new",{"_index":1253,"title":{},"body":{"injectables/FileService.html":{}}}],["cb(null",{"_index":1229,"title":{},"body":{"injectables/FileService.html":{}}}],["celldates",{"_index":1175,"title":{},"body":{"injectables/ExcelService.html":{}}}],["cellstyles",{"_index":1174,"title":{},"body":{"injectables/ExcelService.html":{}}}],["changed",{"_index":1485,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["characters",{"_index":1426,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["charset",{"_index":1834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkandsendpushnotificationscronjob",{"_index":1063,"title":{},"body":{"injectables/CronJobService.html":{}}}],["checkarticletype",{"_index":432,"title":{"classes/CheckArticleType.html":{}},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"classes/CheckArticleType.html":{},"coverage.html":{}}}],["checking",{"_index":660,"title":{},"body":{"injectables/ArticleSearchService.html":{},"classes/CheckArticleType.html":{},"classes/RequiredParameterPipe.html":{}}}],["checks",{"_index":1021,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["checksearchpattern",{"_index":650,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["checksearchpattern(pattern",{"_index":657,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["childrenarticles",{"_index":567,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["cid",{"_index":1112,"title":{},"body":{"injectables/EmailService.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"classes/ErrorResponse.html":{},"classes/HttpExceptionFilter.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"classes/PushTokenDto.html":{},"classes/RequiredParameterPipe.html":{},"classes/StringToNumberPipe.html":{},"classes/TagDto.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"classes/ErrorResponse.html":{},"classes/HttpExceptionFilter.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"classes/PushTokenDto.html":{},"classes/RequiredParameterPipe.html":{},"classes/StringToNumberPipe.html":{},"classes/TagDto.html":{},"overview.html":{}}}],["clickaction",{"_index":1437,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["clone",{"_index":1780,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1764,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":1125,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["column",{"_index":328,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"injectables/ExcelService.html":{},"entities/PushTokenEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["column('datetime",{"_index":319,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"entities/PushTokenEntity.html":{}}}],["column('enum",{"_index":325,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"entities/PushTokenEntity.html":{}}}],["column('longtext",{"_index":310,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["column('timestamp",{"_index":1612,"title":{},"body":{"entities/UserEntity.html":{}}}],["column('varchar",{"_index":313,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/UserEntity.html":{}}}],["column({default",{"_index":570,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["column({name",{"_index":305,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["column({nullable",{"_index":580,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["column({select",{"_index":1615,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({unique",{"_index":1622,"title":{},"body":{"entities/UserEntity.html":{}}}],["columnnames",{"_index":1142,"title":{},"body":{"injectables/ExcelService.html":{}}}],["columns",{"_index":707,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ExcelService.html":{},"entities/PushTokenEntity.html":{}}}],["coming",{"_index":540,"title":{},"body":{"classes/ArticleDto.html":{}}}],["commented",{"_index":456,"title":{},"body":{"controllers/ArticleController.html":{}}}],["common",{"_index":1757,"title":{},"body":{"index.html":{}}}],["compare",{"_index":947,"title":{},"body":{"injectables/AuthService.html":{}}}],["component",{"_index":1737,"title":{},"body":{"index.html":{}}}],["computer",{"_index":1606,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["condition",{"_index":680,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["conditions",{"_index":684,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["config",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["config.ts",{"_index":1638,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["config/database",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["config/logger",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":904,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["conflictexception('tag",{"_index":1576,"title":{},"body":{"injectables/TagService.html":{}}}],["conflictexception(`user",{"_index":976,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PushNotificationService.html":{},"classes/StringToNumberPipe.html":{},"injectables/TagService.html":{}}}],["constraint",{"_index":1354,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["constructor",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ArticleDto.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"injectables/CronJobService.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/TagDto.html":{},"injectables/TagService.html":{}}}],["constructor(@inject(winston_module_provider",{"_index":1092,"title":{},"body":{"injectables/EmailService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{}}}],["constructor(@injectrepository(userentity",{"_index":1301,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(articlecontent",{"_index":519,"title":{},"body":{"classes/ArticleDto.html":{}}}],["constructor(articlecontentrepository",{"_index":653,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["constructor(authservice",{"_index":1309,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(errors",{"_index":1023,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["constructor(httpadapterhost",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["constructor(logger",{"_index":1086,"title":{},"body":{"injectables/EmailService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{}}}],["constructor(private",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/AuthController.html":{},"injectables/CronJobService.html":{},"injectables/FileService.html":{},"injectables/LocalStrategy.html":{},"controllers/PushNotificationController.html":{},"controllers/TagController.html":{}}}],["constructor(pushnotificationservice",{"_index":1064,"title":{},"body":{"injectables/CronJobService.html":{}}}],["constructor(sentryservice",{"_index":1197,"title":{},"body":{"injectables/FileService.html":{}}}],["constructor(tagentity",{"_index":1542,"title":{},"body":{"classes/TagDto.html":{}}}],["constructor(tagrepository",{"_index":728,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["constructor(userentityrepository",{"_index":929,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["consume",{"_index":1752,"title":{},"body":{"index.html":{}}}],["contact",{"_index":80,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["contain",{"_index":1041,"title":{},"body":{"injectables/BasicStrategy.html":{}}}],["containing",{"_index":392,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["content",{"_index":308,"title":{},"body":{"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{}}}],["content.body",{"_index":698,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["content.entity",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{}}}],["content.entity.ts",{"_index":291,"title":{},"body":{"entities/ArticleContentEntity.html":{},"coverage.html":{}}}],["content.entity.ts:13",{"_index":323,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content.entity.ts:19",{"_index":307,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content.entity.ts:22",{"_index":327,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content.entity.ts:25",{"_index":329,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content.entity.ts:28",{"_index":311,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content.entity.ts:31",{"_index":317,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content.entity.ts:34",{"_index":321,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content.entity.ts:38",{"_index":304,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content[key",{"_index":1169,"title":{},"body":{"injectables/ExcelService.html":{}}}],["contenttype",{"_index":1110,"title":{},"body":{"injectables/EmailService.html":{}}}],["context",{"_index":1099,"title":{},"body":{"injectables/EmailService.html":{}}}],["controller",{"_index":89,"title":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/AuthController.html":{},"controllers/PushNotificationController.html":{},"controllers/TagController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/AuthController.html":{},"controllers/PushNotificationController.html":{},"controllers/TagController.html":{},"coverage.html":{}}}],["controller('articles",{"_index":454,"title":{},"body":{"controllers/ArticleController.html":{}}}],["controller('articles/search",{"_index":642,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["controller('auth",{"_index":902,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('push",{"_index":1388,"title":{},"body":{"controllers/PushNotificationController.html":{}}}],["controller('tags",{"_index":1532,"title":{},"body":{"controllers/TagController.html":{}}}],["controllers",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/AuthController.html":{},"controllers/PushNotificationController.html":{},"controllers/TagController.html":{},"overview.html":{}}}],["convert",{"_index":1133,"title":{},"body":{"injectables/ExcelService.html":{}}}],["cookie",{"_index":1073,"title":{},"body":{"injectables/CronJobService.html":{},"entities/PushTokenEntity.html":{}}}],["copy",{"_index":683,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["correct",{"_index":911,"title":{},"body":{"controllers/AuthController.html":{}}}],["correct.'})@apiforbiddenresponse({description",{"_index":872,"title":{},"body":{"controllers/AuthController.html":{}}}],["count",{"_index":382,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["cover",{"_index":527,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{}}}],["coverage",{"_index":1625,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["coverimage",{"_index":296,"title":{},"body":{"entities/ArticleContentEntity.html":{},"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"injectables/EmailService.html":{},"classes/Migrations1691261966905.html":{}}}],["coverimagetodelete",{"_index":830,"title":{},"body":{"injectables/ArticleService.html":{}}}],["create",{"_index":356,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/ExcelService.html":{},"controllers/TagController.html":{},"interfaces/UploadedFileDto.html":{},"index.html":{}}}],["createarticle",{"_index":346,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["createarticle(@param('articletype",{"_index":492,"title":{},"body":{"controllers/ArticleController.html":{}}}],["createarticle(articletype",{"_index":352,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["created",{"_index":1520,"title":{},"body":{"controllers/TagController.html":{},"entities/UserEntity.html":{}}}],["created_at",{"_index":1348,"title":{},"body":{"classes/Migrations1691261966905.html":{},"entities/PushTokenEntity.html":{}}}],["createdat",{"_index":1472,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["createquerybuilder('content",{"_index":691,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["creates",{"_index":365,"title":{},"body":{"controllers/ArticleController.html":{}}}],["createtag",{"_index":1511,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["createtag(@body(customvalidationpipe",{"_index":1533,"title":{},"body":{"controllers/TagController.html":{}}}],["createtag(newtag",{"_index":1515,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["creating",{"_index":734,"title":{},"body":{"injectables/ArticleService.html":{}}}],["creation",{"_index":597,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{}}}],["cron",{"_index":1068,"title":{},"body":{"injectables/CronJobService.html":{},"index.html":{}}}],["cron(cronexpression.every_day_at_noon",{"_index":1066,"title":{},"body":{"injectables/CronJobService.html":{}}}],["cronexpression",{"_index":1075,"title":{},"body":{"injectables/CronJobService.html":{}}}],["cronjobservice",{"_index":125,"title":{"injectables/CronJobService.html":{}},"body":{"modules/AppModule.html":{},"injectables/CronJobService.html":{},"coverage.html":{},"overview.html":{}}}],["crud",{"_index":1759,"title":{},"body":{"index.html":{}}}],["crypt",{"_index":935,"title":{},"body":{"injectables/AuthService.html":{}}}],["crypted",{"_index":938,"title":{},"body":{"injectables/AuthService.html":{}}}],["cryptnewpassword",{"_index":923,"title":{},"body":{"injectables/AuthService.html":{}}}],["cryptnewpassword(newpassword",{"_index":933,"title":{},"body":{"injectables/AuthService.html":{}}}],["cs",{"_index":543,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"classes/Migrations1691261966905.html":{},"miscellaneous/enumerations.html":{}}}],["ctx",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":616,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["current_timestamp",{"_index":595,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/Migrations1691261966905.html":{},"entities/PushTokenEntity.html":{}}}],["customvalidationpipe",{"_index":448,"title":{"classes/CustomValidationPipe.html":{}},"body":{"controllers/ArticleController.html":{},"classes/CustomValidationPipe.html":{},"controllers/TagController.html":{},"coverage.html":{}}}],["d",{"_index":1471,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["d').todate",{"_index":1010,"title":{},"body":{"injectables/AuthService.html":{}}}],["daily",{"_index":1072,"title":{},"body":{"injectables/CronJobService.html":{},"entities/PushTokenEntity.html":{},"dependencies.html":{}}}],["dailyrotatefile",{"_index":1845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":816,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"index.html":{}}}],["database",{"_index":770,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":1822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource(databaseconfig",{"_index":1823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasourceoptions",{"_index":1825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":318,"title":{},"body":{"entities/ArticleContentEntity.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/ExcelService.html":{},"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{},"entities/UserEntity.html":{}}}],["date%.log",{"_index":1847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date_of_publication",{"_index":320,"title":{},"body":{"entities/ArticleContentEntity.html":{},"classes/Migrations1691261966905.html":{}}}],["date_of_publication_idx",{"_index":1345,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["datenf",{"_index":1176,"title":{},"body":{"injectables/ExcelService.html":{}}}],["dateofpublication",{"_index":297,"title":{},"body":{"entities/ArticleContentEntity.html":{},"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{}}}],["datepattern",{"_index":1850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datetime",{"_index":1342,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["dd",{"_index":1177,"title":{},"body":{"injectables/ExcelService.html":{},"miscellaneous/variables.html":{}}}],["dd')}_articles.xlsx",{"_index":471,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deactivated",{"_index":405,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deactivation",{"_index":408,"title":{},"body":{"controllers/ArticleController.html":{}}}],["debug",{"_index":1846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decorators",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"controllers/AuthController.html":{},"injectables/CronJobService.html":{},"controllers/PushNotificationController.html":{},"entities/PushTokenEntity.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["default",{"_index":9,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["default_language",{"_index":668,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"entities/PushTokenEntity.html":{},"injectables/TagService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":268,"title":{},"body":{"modules/AppModule.html":{}}}],["defined",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{}}}],["delete",{"_index":832,"title":{},"body":{"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FileService.html":{},"classes/Migrations1691261966905.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"controllers/TagController.html":{}}}],["delete('token",{"_index":1392,"title":{},"body":{"controllers/PushNotificationController.html":{}}}],["deleted",{"_index":404,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/FileService.html":{}}}],["deletetag",{"_index":1512,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["deletetag(@body",{"_index":1539,"title":{},"body":{"controllers/TagController.html":{}}}],["deletetag(newtag",{"_index":1521,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["deletetoken",{"_index":1374,"title":{},"body":{"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{}}}],["deletetoken(@body",{"_index":1393,"title":{},"body":{"controllers/PushNotificationController.html":{}}}],["deletetoken(token",{"_index":1376,"title":{},"body":{"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{}}}],["deliver",{"_index":1740,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":113,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":718,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalStrategy.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"interfaces/UploadedFileDto.html":{},"properties.html":{}}}],["designed",{"_index":1739,"title":{},"body":{"index.html":{}}}],["destination",{"_index":1227,"title":{},"body":{"injectables/FileService.html":{},"interfaces/UploadedFileDto.html":{}}}],["detail",{"_index":379,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ErrorResponse.html":{}}}],["details",{"_index":378,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["developers",{"_index":1120,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["developing",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["device",{"_index":1404,"title":{},"body":{"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"entities/UserEntity.html":{}}}],["dir",{"_index":260,"title":{},"body":{"modules/AppModule.html":{}}}],["directory",{"_index":1790,"title":{},"body":{"index.html":{}}}],["directory_images",{"_index":1228,"title":{},"body":{"injectables/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dirname",{"_index":1848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["diskstorage",{"_index":1226,"title":{},"body":{"injectables/FileService.html":{},"interfaces/UploadedFileDto.html":{}}}],["disposition",{"_index":467,"title":{},"body":{"controllers/ArticleController.html":{}}}],["dmitrij",{"_index":1814,"title":{},"body":{"properties.html":{}}}],["docker",{"_index":1777,"title":{},"body":{"index.html":{}}}],["dockerization",{"_index":1766,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1626,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["down",{"_index":1325,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["down(queryrunner",{"_index":1327,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["downloads",{"_index":1762,"title":{},"body":{"index.html":{}}}],["drop",{"_index":1364,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["dto",{"_index":607,"title":{},"body":{"classes/ArticleRequestDto.html":{},"classes/CustomValidationPipe.html":{},"interfaces/UploadedFileDto.html":{}}}],["during",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"classes/ArticleRequestDto.html":{},"interfaces/JwtRequest.html":{}}}],["e",{"_index":767,"title":{},"body":{"injectables/ArticleService.html":{}}}],["each",{"_index":364,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/ExcelService.html":{}}}],["easier",{"_index":457,"title":{},"body":{"controllers/ArticleController.html":{}}}],["eg",{"_index":685,"title":{},"body":{"injectables/ArticleSearchService.html":{},"index.html":{}}}],["email",{"_index":794,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{}}}],["email_service",{"_index":1093,"title":{},"body":{"injectables/EmailService.html":{}}}],["emails",{"_index":1761,"title":{},"body":{"index.html":{}}}],["emailservice",{"_index":126,"title":{"injectables/EmailService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["en",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"classes/ArticleRequestDto.html":{},"classes/Migrations1691261966905.html":{},"classes/TagDto.html":{},"miscellaneous/enumerations.html":{}}}],["encoding",{"_index":1595,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["endpoint",{"_index":461,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/JwtStrategy.html":{}}}],["endpoints",{"_index":1751,"title":{},"body":{"index.html":{}}}],["endpoints/**/*.entity{.ts,.js",{"_index":1831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endpoints/article/article.controller",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/article/article.service",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/article/search/article",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/auth/auth.controller",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/auth/auth.service",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/auth/strategies/basic.strategy",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/auth/strategies/jwt.strategy",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/auth/strategies/local.strategy",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/push",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/tag/tag.controller",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/tag/tag.service",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["engine=innodb",{"_index":1337,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["enough",{"_index":702,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["entire",{"_index":1598,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["entities",{"_index":289,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"entities/PushTokenEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/**/*.entity{.ts,.js",{"_index":1832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/article",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/article.entity",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/push",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/tag.entity",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/user.entity",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":288,"title":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"entities/PushTokenEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{}},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"entities/PushTokenEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["entity('article",{"_index":603,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["entity('article_content",{"_index":340,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["entity('push_token",{"_index":1486,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["entity('tag",{"_index":1566,"title":{},"body":{"entities/TagEntity.html":{}}}],["entity('user",{"_index":1624,"title":{},"body":{"entities/UserEntity.html":{}}}],["entity.name",{"_index":708,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["enum",{"_index":326,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"classes/Migrations1691261966905.html":{},"entities/PushTokenEntity.html":{},"entities/TagEntity.html":{}}}],["enumerations",{"_index":1725,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/language.enum",{"_index":1461,"title":{},"body":{"classes/PushTokenDto.html":{}}}],["env",{"_index":1788,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1795,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1792,"title":{},"body":{"index.html":{}}}],["equal",{"_index":952,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":10,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"classes/BadValidationRequestException.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["errorresponse",{"_index":54,"title":{"classes/ErrorResponse.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"classes/ErrorResponse.html":{},"coverage.html":{}}}],["errors",{"_index":1026,"title":{},"body":{"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{}}}],["errors.foreach((error",{"_index":1029,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["example",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"classes/ArticleDto.html":{},"injectables/PushNotificationService.html":{},"classes/TagDto.html":{}}}],["excel",{"_index":370,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ExcelService.html":{},"index.html":{}}}],["excelservice",{"_index":127,"title":{"injectables/ExcelService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/ExcelService.html":{},"coverage.html":{},"overview.html":{}}}],["exception",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/SentryService.html":{},"index.html":{}}}],["exception.filter",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["exception.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:10",{"_index":1279,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:13",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.filter.ts:14",{"_index":1281,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:19",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":1283,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":1286,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception['message",{"_index":82,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception['stack",{"_index":86,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfactory",{"_index":1082,"title":{},"body":{"classes/CustomValidationPipe.html":{}}}],["exceptionfilter",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exceptions",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["exist",{"_index":506,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["exists",{"_index":500,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"classes/Migrations1691666064778.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["exists.'})@apiconflictresponse({description",{"_index":1516,"title":{},"body":{"controllers/TagController.html":{}}}],["exists.'})@httpcode(200)@post",{"_index":1517,"title":{},"body":{"controllers/TagController.html":{}}}],["exitonerror",{"_index":1843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiration",{"_index":962,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{}}}],["expiration_date",{"_index":1371,"title":{},"body":{"classes/Migrations1691666064778.html":{},"entities/UserEntity.html":{}}}],["expirationdate",{"_index":1610,"title":{},"body":{"entities/UserEntity.html":{}}}],["expiresin",{"_index":277,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"entities/UserEntity.html":{}}}],["exportarticles",{"_index":347,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/ExcelService.html":{}}}],["exportarticles(@res",{"_index":464,"title":{},"body":{"controllers/ArticleController.html":{}}}],["exportarticles(articles",{"_index":1138,"title":{},"body":{"injectables/ExcelService.html":{}}}],["exportarticles(response",{"_index":369,"title":{},"body":{"controllers/ArticleController.html":{}}}],["exporting",{"_index":1763,"title":{},"body":{"index.html":{}}}],["exports",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["express",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1200,"title":{},"body":{"injectables/FileService.html":{}}}],["express/multer/interfaces/multer",{"_index":1237,"title":{},"body":{"injectables/FileService.html":{}}}],["extends",{"_index":1022,"title":{},"body":{"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CustomValidationPipe.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["extension",{"_index":1207,"title":{},"body":{"injectables/FileService.html":{}}}],["extname",{"_index":1242,"title":{},"body":{"injectables/FileService.html":{}}}],["extractjwt",{"_index":1300,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fallbacklanguage",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["false",{"_index":256,"title":{},"body":{"modules/AppModule.html":{},"classes/ArticleDto.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"injectables/FileService.html":{},"injectables/LocalStrategy.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["fcm",{"_index":1460,"title":{},"body":{"classes/PushTokenDto.html":{},"index.html":{}}}],["feature",{"_index":795,"title":{},"body":{"injectables/ArticleService.html":{}}}],["features",{"_index":1746,"title":{},"body":{"index.html":{}}}],["field",{"_index":1601,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["fieldname",{"_index":1596,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"entities/UserEntity.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["file.'})@get('export",{"_index":371,"title":{},"body":{"controllers/ArticleController.html":{}}}],["file.destination}/${file.filename",{"_index":497,"title":{},"body":{"controllers/ArticleController.html":{}}}],["file.dto",{"_index":447,"title":{},"body":{"controllers/ArticleController.html":{}}}],["file.dto.ts",{"_index":1592,"title":{},"body":{"interfaces/UploadedFileDto.html":{},"coverage.html":{}}}],["filefilter",{"_index":1193,"title":{},"body":{"injectables/FileService.html":{}}}],["filefilter(_req",{"_index":1199,"title":{},"body":{"injectables/FileService.html":{}}}],["fileinterceptor",{"_index":443,"title":{},"body":{"controllers/ArticleController.html":{}}}],["filename",{"_index":1104,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FileService.html":{},"interfaces/UploadedFileDto.html":{},"miscellaneous/variables.html":{}}}],["filename=${moment().format('yyyy",{"_index":469,"title":{},"body":{"controllers/ArticleController.html":{}}}],["files",{"_index":1205,"title":{},"body":{"injectables/FileService.html":{},"index.html":{}}}],["fileservice",{"_index":128,"title":{"injectables/FileService.html":{}},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/FileService.html":{},"coverage.html":{},"overview.html":{}}}],["fileservice.filefilter",{"_index":1231,"title":{},"body":{"injectables/FileService.html":{}}}],["fileservice.getrandomname(file.originalname",{"_index":1230,"title":{},"body":{"injectables/FileService.html":{}}}],["fileservice.multeroptions",{"_index":491,"title":{},"body":{"controllers/ArticleController.html":{}}}],["filesize",{"_index":1233,"title":{},"body":{"injectables/FileService.html":{}}}],["fileurl",{"_index":1217,"title":{},"body":{"injectables/FileService.html":{}}}],["fileurl.replace(server_url",{"_index":1271,"title":{},"body":{"injectables/FileService.html":{}}}],["fileurl.startswith(server_url",{"_index":1270,"title":{},"body":{"injectables/FileService.html":{}}}],["fill",{"_index":1791,"title":{},"body":{"index.html":{}}}],["filter",{"_index":1204,"title":{},"body":{"injectables/FileService.html":{}}}],["filtered",{"_index":742,"title":{},"body":{"injectables/ArticleService.html":{}}}],["filtering",{"_index":537,"title":{},"body":{"classes/ArticleDto.html":{}}}],["filters",{"_index":1772,"title":{},"body":{"index.html":{}}}],["filters/all",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["filters/http",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["find",{"_index":679,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{}}}],["finding",{"_index":1482,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["firebase",{"_index":1411,"title":{},"body":{"injectables/PushNotificationService.html":{},"dependencies.html":{},"index.html":{}}}],["firebaseadmin",{"_index":1413,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["firebaseadmin.messaging().send(message",{"_index":1443,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["first",{"_index":798,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ExcelService.html":{},"injectables/PushNotificationService.html":{}}}],["fit",{"_index":1261,"title":{},"body":{"injectables/FileService.html":{}}}],["fk_5a8ded7416c4f8d2ec4c0d6b1f4",{"_index":1362,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["fk_695e2a3fb3e8f1995d703d5b91c",{"_index":1359,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["fk_74fd901c12ea1b6d4eea6885d2c",{"_index":1361,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["fk_c27e451a84c599d6164080b0f7a",{"_index":1355,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["flutter",{"_index":1738,"title":{},"body":{"index.html":{}}}],["flutter_notification_click",{"_index":1438,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["folder",{"_index":1600,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["forbiddenexception",{"_index":912,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["forbiddenexception(`user",{"_index":1006,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["foreign",{"_index":1356,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["form",{"_index":541,"title":{},"body":{"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"interfaces/UploadedFileDto.html":{}}}],["format",{"_index":539,"title":{},"body":{"classes/ArticleDto.html":{},"miscellaneous/variables.html":{}}}],["format.colorize",{"_index":1868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.combine",{"_index":1856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.printf(msg",{"_index":1859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.timestamp",{"_index":1858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.uncolorize",{"_index":1857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":507,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"index.html":{}}}],["found.'})@put",{"_index":1529,"title":{},"body":{"controllers/TagController.html":{}}}],["found.'})@put(':id')@useinterceptors(undefined",{"_index":415,"title":{},"body":{"controllers/ArticleController.html":{}}}],["found.'})@put(':id/activity",{"_index":400,"title":{},"body":{"controllers/ArticleController.html":{}}}],["framework",{"_index":1748,"title":{},"body":{"index.html":{}}}],["free",{"_index":1071,"title":{},"body":{"injectables/CronJobService.html":{}}}],["friendly",{"_index":1122,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/TagDto.html":{}}}],["fs",{"_index":1245,"title":{},"body":{"injectables/FileService.html":{}}}],["fs.unlink(olddatarelativeurl",{"_index":1274,"title":{},"body":{"injectables/FileService.html":{}}}],["fulltext",{"_index":337,"title":{},"body":{"entities/ArticleContentEntity.html":{},"classes/Migrations1691261966905.html":{}}}],["function",{"_index":1209,"title":{},"body":{"injectables/FileService.html":{},"coverage.html":{}}}],["functionality",{"_index":1743,"title":{},"body":{"index.html":{}}}],["functions",{"_index":1730,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":724,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["generate",{"_index":940,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{}}}],["generated",{"_index":1459,"title":{},"body":{"classes/PushTokenDto.html":{}}}],["generaterefreshtoken",{"_index":924,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':articletype",{"_index":480,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{}}}],["get('autocomplete/:articletype",{"_index":646,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["get('detail/:id",{"_index":476,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get('export",{"_index":463,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getactiveuser",{"_index":925,"title":{},"body":{"injectables/AuthService.html":{}}}],["getactiveuser(username",{"_index":942,"title":{},"body":{"injectables/AuthService.html":{}}}],["getalltags",{"_index":1513,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["getalltags(@headers('x",{"_index":1535,"title":{},"body":{"controllers/TagController.html":{}}}],["getalltags(language",{"_index":1524,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["getarticlebyid",{"_index":348,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getarticlebyid(@param('id",{"_index":477,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticlebyid(articlecontentid",{"_index":736,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getarticlebyid(id",{"_index":373,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticles",{"_index":349,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticles(@param('articletype",{"_index":481,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticles(articletype",{"_index":380,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticlesbytypeandfilter",{"_index":727,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getarticlesbytypeandfilter(articletype",{"_index":739,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getrandomname",{"_index":1194,"title":{},"body":{"injectables/FileService.html":{}}}],["getrandomname(originalname",{"_index":1210,"title":{},"body":{"injectables/FileService.html":{}}}],["getting",{"_index":738,"title":{"index.html":{}},"body":{"injectables/ArticleService.html":{},"index.html":{}}}],["getversion",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gif",{"_index":1258,"title":{},"body":{"injectables/FileService.html":{}}}],["git",{"_index":1782,"title":{},"body":{"index.html":{}}}],["git@github.com:belligerator/news",{"_index":1783,"title":{},"body":{"index.html":{}}}],["guaranteed",{"_index":1484,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["guarded",{"_index":462,"title":{},"body":{"controllers/ArticleController.html":{}}}],["handlebars",{"_index":1699,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["handleexceptions",{"_index":1865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handler",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["handlerejections",{"_index":1866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashed",{"_index":949,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedpassword",{"_index":945,"title":{},"body":{"injectables/AuthService.html":{}}}],["header",{"_index":1040,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/ExcelService.html":{}}}],["headerresolver",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["headers",{"_index":418,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/TagController.html":{}}}],["headers('x",{"_index":478,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{}}}],["high",{"_index":1435,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["higher",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["host",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["host.interface",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["hpx",{"_index":1188,"title":{},"body":{"injectables/ExcelService.html":{}}}],["http",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/BasicStrategy.html":{},"classes/ErrorResponse.html":{},"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["http://localhost:3000",{"_index":1799,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/api/swagger",{"_index":1801,"title":{},"body":{"index.html":{}}}],["httpadapter",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapter.reply(response",{"_index":83,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapterhost",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpargumentshost",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpcode",{"_index":419,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/AuthController.html":{},"controllers/PushNotificationController.html":{},"controllers/TagController.html":{}}}],["httpcode(200",{"_index":488,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/AuthController.html":{},"controllers/PushNotificationController.html":{},"controllers/TagController.html":{}}}],["httpexception",{"_index":1280,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":162,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://github.com/typeorm/typeorm/issues/2869",{"_index":682,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["httpstatus",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":72,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["i18n",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"injectables/PushNotificationService.html":{},"dependencies.html":{}}}],["i18nmodule",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nmodule.forroot",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nservice",{"_index":1399,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["icon",{"_index":1439,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["id",{"_index":298,"title":{},"body":{"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ExcelService.html":{},"injectables/JwtStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{}}}],["id.'})@apinotfoundresponse({description",{"_index":414,"title":{},"body":{"controllers/ArticleController.html":{}}}],["id.'})@get('detail/:id",{"_index":374,"title":{},"body":{"controllers/ArticleController.html":{}}}],["identifier",{"_index":1627,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":621,"title":{},"body":{"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{}}}],["idx_5a8ded7416c4f8d2ec4c0d6b1f",{"_index":1351,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["idx_74fd901c12ea1b6d4eea6885d2",{"_index":1350,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["idx_78a916df40e02a9deb1c4b75ed",{"_index":1372,"title":{},"body":{"classes/Migrations1691666064778.html":{}}}],["idx_fulltext",{"_index":1346,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["ignoretls",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["ilike",{"_index":674,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["ilike(`%${pattern",{"_index":686,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["image",{"_index":528,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{},"injectables/FileService.html":{}}}],["image/gif",{"_index":1251,"title":{},"body":{"injectables/FileService.html":{}}}],["image/jpeg",{"_index":1250,"title":{},"body":{"injectables/FileService.html":{}}}],["image/png",{"_index":1111,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FileService.html":{}}}],["images",{"_index":1109,"title":{},"body":{"injectables/EmailService.html":{}}}],["implements",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CheckArticleType.html":{},"classes/HttpExceptionFilter.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"classes/RequiredParameterPipe.html":{},"classes/StringToNumberPipe.html":{},"index.html":{}}}],["import",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{}}}],["imports",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["in(tagsfromdto.map(tag",{"_index":773,"title":{},"body":{"injectables/ArticleService.html":{}}}],["in.'})@httpcode(200)@post('refresh",{"_index":863,"title":{},"body":{"controllers/AuthController.html":{}}}],["inactive",{"_index":981,"title":{},"body":{"injectables/AuthService.html":{}}}],["included",{"_index":1441,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["incorrect",{"_index":1312,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"entities/UserEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index('article_id",{"_index":335,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["index('date_of_publication_idx",{"_index":338,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["index('idx_fulltext",{"_index":336,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["index('language",{"_index":339,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"entities/UserEntity.html":{}}}],["information",{"_index":377,"title":{},"body":{"controllers/ArticleController.html":{}}}],["inject",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{}}}],["inject(winston_module_provider",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ArticleService.html":{},"injectables/FileService.html":{},"injectables/SentryService.html":{}}}],["injectable",{"_index":283,"title":{"injectables/AppService.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"injectables/TagService.html":{}},"body":{"injectables/AppService.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["injectables",{"_index":284,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"injectables/TagService.html":{},"overview.html":{}}}],["injectrepository",{"_index":672,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PushNotificationService.html":{},"injectables/TagService.html":{}}}],["injectrepository(articlecontententity",{"_index":677,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["injectrepository(articleentity",{"_index":752,"title":{},"body":{"injectables/ArticleService.html":{}}}],["injectrepository(pushtokenentity",{"_index":1415,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["injectrepository(tagentity",{"_index":751,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["injectrepository(userentity",{"_index":973,"title":{},"body":{"injectables/AuthService.html":{}}}],["innerjoinandselect('content.article",{"_index":692,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["inside",{"_index":1262,"title":{},"body":{"injectables/FileService.html":{}}}],["install",{"_index":1785,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1779,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1594,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["int",{"_index":1335,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["intended",{"_index":1119,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["interacts",{"_index":1755,"title":{},"body":{"index.html":{}}}],["interface",{"_index":1289,"title":{"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"interfaces/UploadedFileDto.html":{}},"body":{"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"interfaces/UploadedFileDto.html":{},"coverage.html":{}}}],["interfaces",{"_index":1290,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"interfaces/UploadedFileDto.html":{},"overview.html":{}}}],["internal",{"_index":76,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["invalid",{"_index":861,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["inversejoincolumns",{"_index":593,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["isnan(numbervalue",{"_index":1509,"title":{},"body":{"classes/StringToNumberPipe.html":{}}}],["isnotempty",{"_index":611,"title":{},"body":{"classes/ArticleRequestDto.html":{},"classes/TagDto.html":{}}}],["item",{"_index":1558,"title":{},"body":{"entities/TagEntity.html":{}}}],["item.language",{"_index":805,"title":{},"body":{"injectables/ArticleService.html":{}}}],["item.tags",{"_index":1559,"title":{},"body":{"entities/TagEntity.html":{}}}],["job",{"_index":1069,"title":{},"body":{"injectables/CronJobService.html":{}}}],["job.service",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["job.service.ts",{"_index":1062,"title":{},"body":{"injectables/CronJobService.html":{},"coverage.html":{}}}],["job.service.ts:13",{"_index":1067,"title":{},"body":{"injectables/CronJobService.html":{}}}],["job.service.ts:6",{"_index":1065,"title":{},"body":{"injectables/CronJobService.html":{}}}],["jobs",{"_index":1767,"title":{},"body":{"index.html":{}}}],["join",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["joincolumn",{"_index":330,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{}}}],["joincolumns",{"_index":591,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["jointable",{"_index":599,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["jpeg",{"_index":1256,"title":{},"body":{"injectables/FileService.html":{}}}],["jpg",{"_index":1255,"title":{},"body":{"injectables/FileService.html":{}}}],["json",{"_index":1285,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LocalStrategy.html":{}}}],["json.parse(newarticledto.tags",{"_index":764,"title":{},"body":{"injectables/ArticleService.html":{}}}],["json.parse(updatedarticle.updatedtags",{"_index":828,"title":{},"body":{"injectables/ArticleService.html":{}}}],["json.stringify(message",{"_index":1453,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["jwt",{"_index":269,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwtfromrequest",{"_index":1302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtmodule.register",{"_index":273,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtpayload",{"_index":271,"title":{"interfaces/JwtPayload.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtpayload.userid",{"_index":879,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["jwtrequest",{"_index":876,"title":{"interfaces/JwtRequest.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/JwtRequest.html":{},"coverage.html":{}}}],["jwtservice",{"_index":930,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":129,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":1154,"title":{},"body":{"injectables/ExcelService.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"injectables/PushNotificationService.html":{}}}],["keyof",{"_index":777,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ExcelService.html":{}}}],["lang",{"_index":1423,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["language",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/ExcelService.html":{},"classes/Migrations1691261966905.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["language.'})@httpcode(200)@post(':articletype')@useinterceptors(undefined",{"_index":361,"title":{},"body":{"controllers/ArticleController.html":{}}}],["languageenum",{"_index":324,"title":{},"body":{"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/ExcelService.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["languageenum.cs",{"_index":1839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["languages",{"_index":756,"title":{},"body":{"injectables/ArticleService.html":{}}}],["languages.map((language",{"_index":776,"title":{},"body":{"injectables/ArticleService.html":{}}}],["last",{"_index":1478,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["latest",{"_index":1741,"title":{},"body":{"index.html":{}}}],["leftjoinandselect('article.tags",{"_index":693,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["legend",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["length",{"_index":315,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/UserEntity.html":{}}}],["level",{"_index":1855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":1811,"title":{},"body":{"properties.html":{}}}],["limit(count",{"_index":699,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["limits",{"_index":1232,"title":{},"body":{"injectables/FileService.html":{}}}],["list",{"_index":394,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{}}}],["literal",{"_index":610,"title":{},"body":{"classes/ArticleRequestDto.html":{},"injectables/ExcelService.html":{}}}],["loaderoptions",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1317,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localhost",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["localstrategy",{"_index":130,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AppModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["location",{"_index":1607,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["log",{"_index":1620,"title":{},"body":{"entities/UserEntity.html":{},"index.html":{}}}],["logged",{"_index":1619,"title":{},"body":{"entities/UserEntity.html":{}}}],["logger",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{}}}],["loggerconfig",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logging",{"_index":1768,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["logs",{"_index":1849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longtext",{"_index":1344,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["made",{"_index":1756,"title":{},"body":{"index.html":{}}}],["mailermodule",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule.forroot",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["mailerservice",{"_index":1087,"title":{},"body":{"injectables/EmailService.html":{}}}],["make",{"_index":1466,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["manager",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["managing",{"_index":1773,"title":{},"body":{"index.html":{}}}],["mandatory",{"_index":721,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{}}}],["manually",{"_index":1481,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["manytomany",{"_index":600,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/TagEntity.html":{}}}],["manytomany(undefined",{"_index":588,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/TagEntity.html":{}}}],["manytoone",{"_index":331,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{}}}],["manytoone(undefined",{"_index":300,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{}}}],["map",{"_index":807,"title":{},"body":{"injectables/ArticleService.html":{}}}],["matching",{"_index":88,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"entities/UserEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max_file_size",{"_index":1234,"title":{},"body":{"injectables/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["maxfiles",{"_index":1853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxsize",{"_index":1851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memorystorage",{"_index":1599,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["message",{"_index":75,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadValidationRequestException.html":{},"classes/ErrorResponse.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{}}}],["messageid",{"_index":1442,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["messaging",{"_index":1765,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":1056,"title":{},"body":{"classes/CheckArticleType.html":{},"classes/RequiredParameterPipe.html":{},"classes/StringToNumberPipe.html":{},"dependencies.html":{}}}],["metadata.data",{"_index":1492,"title":{},"body":{"classes/RequiredParameterPipe.html":{}}}],["method",{"_index":659,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["methods",{"_index":18,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["migration",{"_index":1770,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migrationinterface",{"_index":1324,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["migrations",{"_index":1836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations.ts",{"_index":1323,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"coverage.html":{}}}],["migrations.ts:10",{"_index":1368,"title":{},"body":{"classes/Migrations1691666064778.html":{}}}],["migrations.ts:18",{"_index":1329,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["migrations.ts:4",{"_index":1326,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["migrations.ts:6",{"_index":1331,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["migrations/*{.ts,.js",{"_index":1837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations1691261966905",{"_index":1321,"title":{"classes/Migrations1691261966905.html":{}},"body":{"classes/Migrations1691261966905.html":{},"coverage.html":{}}}],["migrations1691666064778",{"_index":1366,"title":{"classes/Migrations1691666064778.html":{}},"body":{"classes/Migrations1691666064778.html":{},"coverage.html":{}}}],["migrationsrun",{"_index":1838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mime",{"_index":1604,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["mimetype",{"_index":1597,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["miscellaneous",{"_index":1724,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":360,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/LocalStrategy.html":{},"classes/RequiredParameterPipe.html":{}}}],["mm",{"_index":470,"title":{},"body":{"controllers/ArticleController.html":{},"miscellaneous/variables.html":{}}}],["mmm",{"_index":1178,"title":{},"body":{"injectables/ExcelService.html":{}}}],["mobile",{"_index":1405,"title":{},"body":{"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{}}}],["models/enums/article",{"_index":429,"title":{},"body":{"controllers/ArticleController.html":{}}}],["models/enums/language.enum",{"_index":428,"title":{},"body":{"controllers/ArticleController.html":{}}}],["module",{"_index":110,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":112,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["modules/mailer",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["moment",{"_index":450,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"dependencies.html":{}}}],["moment().add(30",{"_index":1009,"title":{},"body":{"injectables/AuthService.html":{}}}],["moment().todate",{"_index":997,"title":{},"body":{"injectables/AuthService.html":{}}}],["moment(article.dateofpublication).format('dd.mm.yyyy",{"_index":1102,"title":{},"body":{"injectables/EmailService.html":{}}}],["moment(content[key]).format('dd.mm.yyyy",{"_index":1170,"title":{},"body":{"injectables/ExcelService.html":{}}}],["ms",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["msg.level",{"_index":1861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["msg.message",{"_index":1862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["msg.stack",{"_index":1863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["msg.timestamp",{"_index":1860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multer",{"_index":1236,"title":{},"body":{"injectables/FileService.html":{}}}],["multeroptions",{"_index":1192,"title":{},"body":{"injectables/FileService.html":{}}}],["mysql",{"_index":1754,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1702,"title":{},"body":{"dependencies.html":{}}}],["n${data",{"_index":1503,"title":{},"body":{"injectables/SentryService.html":{}}}],["n\\t${msg.stack",{"_index":1864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"entities/UserEntity.html":{}}}],["named",{"_index":1316,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["names",{"_index":1137,"title":{},"body":{"injectables/ExcelService.html":{}}}],["need",{"_index":1480,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["nest",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"dependencies.html":{}}}],["nestjs",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/PushNotificationService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/cache",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/cli",{"_index":1674,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/features/arguments",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["nestjs/config",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"controllers/AuthController.html":{},"injectables/BasicStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PushNotificationController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":444,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/FileService.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronJobService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":106,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/AuthController.html":{},"controllers/PushNotificationController.html":{},"controllers/TagController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PushNotificationService.html":{},"injectables/TagService.html":{},"dependencies.html":{}}}],["new",{"_index":264,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PushNotificationService.html":{},"classes/RequiredParameterPipe.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newarticle",{"_index":758,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticle.articletype",{"_index":759,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticle.parent",{"_index":760,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticle.tags",{"_index":771,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontent",{"_index":780,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontent.article",{"_index":788,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontent.body",{"_index":783,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontent.coverimage",{"_index":789,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontent.dateofpublication",{"_index":786,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontent.language",{"_index":785,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontent.title",{"_index":781,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontententities",{"_index":775,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontententities.foreach(item",{"_index":803,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontententity",{"_index":837,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto",{"_index":732,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto.body[language",{"_index":784,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto.coverimage",{"_index":790,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto.dateofpublication",{"_index":787,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto.parent",{"_index":761,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto.tags",{"_index":769,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto.title",{"_index":779,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto.title[language",{"_index":782,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newpassword",{"_index":937,"title":{},"body":{"injectables/AuthService.html":{}}}],["newrefreshtoken",{"_index":1000,"title":{},"body":{"injectables/AuthService.html":{}}}],["news",{"_index":1339,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/TagDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["news.png",{"_index":1106,"title":{},"body":{"injectables/EmailService.html":{}}}],["newssmall",{"_index":1113,"title":{},"body":{"injectables/EmailService.html":{}}}],["newtag",{"_index":1519,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["newtag.id",{"_index":1574,"title":{},"body":{"injectables/TagService.html":{}}}],["newtag.language",{"_index":1575,"title":{},"body":{"injectables/TagService.html":{}}}],["newtag.order",{"_index":1580,"title":{},"body":{"injectables/TagService.html":{}}}],["newtag.title",{"_index":1579,"title":{},"body":{"injectables/TagService.html":{}}}],["nodejs",{"_index":1733,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1706,"title":{},"body":{"dependencies.html":{}}}],["notfoundexception",{"_index":505,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["notfoundexception('cannot",{"_index":991,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('tag",{"_index":1587,"title":{},"body":{"injectables/TagService.html":{}}}],["notfoundexception(`article",{"_index":813,"title":{},"body":{"injectables/ArticleService.html":{}}}],["notfoundexception(`user",{"_index":1004,"title":{},"body":{"injectables/AuthService.html":{}}}],["notication",{"_index":1470,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["notification",{"_index":802,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{}}}],["notification.controller",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["notification.controller.ts",{"_index":1373,"title":{},"body":{"controllers/PushNotificationController.html":{},"coverage.html":{}}}],["notification.controller.ts:23",{"_index":1383,"title":{},"body":{"controllers/PushNotificationController.html":{}}}],["notification.controller.ts:33",{"_index":1379,"title":{},"body":{"controllers/PushNotificationController.html":{}}}],["notification.service",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/CronJobService.html":{},"controllers/PushNotificationController.html":{}}}],["notification.service.ts",{"_index":1395,"title":{},"body":{"injectables/PushNotificationService.html":{},"coverage.html":{}}}],["notification.service.ts:14",{"_index":1400,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["notification.service.ts:25",{"_index":1402,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["notification.service.ts:33",{"_index":1401,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["notification.service.ts:37",{"_index":1408,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["notification.service.ts:72",{"_index":1403,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["notification/push",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/CronJobService.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"coverage.html":{}}}],["notification_icon",{"_index":1440,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["notifications",{"_index":1074,"title":{},"body":{"injectables/CronJobService.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{},"index.html":{}}}],["notifications.'})@delete('token",{"_index":1378,"title":{},"body":{"controllers/PushNotificationController.html":{}}}],["notifications.'})@httpcode(200)@post('token",{"_index":1382,"title":{},"body":{"controllers/PushNotificationController.html":{}}}],["now",{"_index":996,"title":{},"body":{"injectables/AuthService.html":{}}}],["npm",{"_index":1786,"title":{},"body":{"index.html":{}}}],["null",{"_index":312,"title":{},"body":{"entities/ArticleContentEntity.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/FileService.html":{},"injectables/JwtStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"classes/RequiredParameterPipe.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{}}}],["null,acceptfile",{"_index":1202,"title":{},"body":{"injectables/FileService.html":{}}}],["nullable",{"_index":314,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"entities/UserEntity.html":{}}}],["number",{"_index":71,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"classes/StringToNumberPipe.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"interfaces/UploadedFileDto.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["number(value",{"_index":1508,"title":{},"body":{"classes/StringToNumberPipe.html":{}}}],["number.pipe",{"_index":437,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{}}}],["number.pipe.ts",{"_index":1504,"title":{},"body":{"classes/StringToNumberPipe.html":{},"coverage.html":{}}}],["number.pipe.ts:7",{"_index":1506,"title":{},"body":{"classes/StringToNumberPipe.html":{}}}],["numbervalue",{"_index":1507,"title":{},"body":{"classes/StringToNumberPipe.html":{}}}],["object",{"_index":376,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"interfaces/UploadedFileDto.html":{}}}],["object.keys(columnnames",{"_index":1181,"title":{},"body":{"injectables/ExcelService.html":{}}}],["object.keys(newarticledto.title",{"_index":757,"title":{},"body":{"injectables/ArticleService.html":{}}}],["object.keys(this.xls_column_order",{"_index":1166,"title":{},"body":{"injectables/ExcelService.html":{}}}],["object.values(articletypeenum",{"_index":1059,"title":{},"body":{"classes/CheckArticleType.html":{}}}],["object.values(languageenum",{"_index":1157,"title":{},"body":{"injectables/ExcelService.html":{}}}],["object.values(this.xls_column_order",{"_index":1164,"title":{},"body":{"injectables/ExcelService.html":{}}}],["occurred",{"_index":78,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["occurs",{"_index":498,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/PushNotificationService.html":{}}}],["officedocument.spreadsheetml.sheet",{"_index":474,"title":{},"body":{"controllers/ArticleController.html":{}}}],["offset(page",{"_index":700,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["old",{"_index":833,"title":{},"body":{"injectables/ArticleService.html":{},"controllers/AuthController.html":{}}}],["oldarticlecontententity",{"_index":815,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity.article.active",{"_index":825,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity.article.parent",{"_index":823,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity.article.tags",{"_index":829,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity.body",{"_index":819,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity.coverimage",{"_index":835,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity.dateofpublication",{"_index":821,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity.title",{"_index":817,"title":{},"body":{"injectables/ArticleService.html":{}}}],["olddatarelativeurl",{"_index":1268,"title":{},"body":{"injectables/FileService.html":{}}}],["olddatarelativeurl.replace",{"_index":1273,"title":{},"body":{"injectables/FileService.html":{}}}],["olddatarelativeurl.startswith",{"_index":1272,"title":{},"body":{"injectables/FileService.html":{}}}],["ondelete",{"_index":583,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["one",{"_index":834,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["onetomany",{"_index":601,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["onetomany(undefined",{"_index":572,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["onupdate",{"_index":585,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/PushTokenEntity.html":{}}}],["opened",{"_index":1483,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["operation",{"_index":842,"title":{},"body":{"injectables/ArticleService.html":{}}}],["operations",{"_index":1760,"title":{},"body":{"index.html":{}}}],["operator",{"_index":681,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{}}}],["options",{"_index":246,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileService.html":{}}}],["options.interface",{"_index":1238,"title":{},"body":{"injectables/FileService.html":{}}}],["order",{"_index":717,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ExcelService.html":{},"classes/Migrations1691261966905.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["orderkeys",{"_index":1180,"title":{},"body":{"injectables/ExcelService.html":{}}}],["orderkeys.map((key",{"_index":1183,"title":{},"body":{"injectables/ExcelService.html":{}}}],["original",{"_index":1213,"title":{},"body":{"injectables/FileService.html":{}}}],["originalname",{"_index":1212,"title":{},"body":{"injectables/FileService.html":{},"interfaces/UploadedFileDto.html":{}}}],["otherwise",{"_index":953,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{},"injectables/LocalStrategy.html":{}}}],["out",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"overview.html":{}}}],["overview",{"_index":1805,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1671,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["package.json",{"_index":1824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages",{"_index":1787,"title":{},"body":{"index.html":{}}}],["page",{"_index":381,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["page_count",{"_index":669,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pagination",{"_index":635,"title":{},"body":{"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["panel",{"_index":889,"title":{},"body":{"controllers/AuthController.html":{}}}],["panel.'})@apibadrequestresponse({description",{"_index":885,"title":{},"body":{"controllers/AuthController.html":{}}}],["param",{"_index":420,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"injectables/LocalStrategy.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"controllers/TagController.html":{}}}],["param,query",{"_index":641,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["parameter",{"_index":1489,"title":{},"body":{"classes/RequiredParameterPipe.html":{}}}],["parameter(s",{"_index":722,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{}}}],["parameter.pipe",{"_index":894,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameter.pipe.ts",{"_index":1487,"title":{},"body":{"classes/RequiredParameterPipe.html":{},"coverage.html":{}}}],["parameter.pipe.ts:7",{"_index":1490,"title":{},"body":{"classes/RequiredParameterPipe.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"injectables/TagService.html":{}}}],["parent",{"_index":517,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"classes/Migrations1691261966905.html":{}}}],["parentarticle",{"_index":568,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["parse",{"_index":358,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["passport",{"_index":1046,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["passportmodule.register",{"_index":267,"title":{},"body":{"modules/AppModule.html":{}}}],["passportstrategy",{"_index":1045,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1047,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":869,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691666064778.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["passwords",{"_index":951,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordsareequal",{"_index":926,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordsareequal(plainpassword",{"_index":944,"title":{},"body":{"injectables/AuthService.html":{}}}],["path",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"interfaces/UploadedFileDto.html":{}}}],["path.join(__dirname",{"_index":1107,"title":{},"body":{"injectables/EmailService.html":{}}}],["pattern",{"_index":630,"title":{},"body":{"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{}}}],["pattern.replace",{"_index":723,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["payload",{"_index":877,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{}}}],["payload.model",{"_index":969,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{}}}],["payload.model.ts",{"_index":1291,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["payload.userid",{"_index":1305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["per",{"_index":390,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["pick",{"_index":797,"title":{},"body":{"injectables/ArticleService.html":{}}}],["pipe",{"_index":1051,"title":{},"body":{"classes/CheckArticleType.html":{},"classes/RequiredParameterPipe.html":{},"classes/StringToNumberPipe.html":{}}}],["pipetransform",{"_index":1053,"title":{},"body":{"classes/CheckArticleType.html":{},"classes/RequiredParameterPipe.html":{},"classes/StringToNumberPipe.html":{}}}],["plain",{"_index":948,"title":{},"body":{"injectables/AuthService.html":{}}}],["plainpassword",{"_index":950,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":79,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["png",{"_index":1257,"title":{},"body":{"injectables/FileService.html":{}}}],["port",{"_index":252,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":421,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/AuthController.html":{},"controllers/PushNotificationController.html":{},"controllers/TagController.html":{}}}],["post(':articletype",{"_index":489,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post('refresh",{"_index":918,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":906,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token",{"_index":1389,"title":{},"body":{"controllers/PushNotificationController.html":{}}}],["prefix",{"_index":343,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/AuthController.html":{},"controllers/PushNotificationController.html":{},"controllers/TagController.html":{}}}],["prerequisites",{"_index":1774,"title":{},"body":{"index.html":{}}}],["present",{"_index":391,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleService.html":{},"classes/RequiredParameterPipe.html":{}}}],["present.'})@get(':articletype",{"_index":632,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["present.'})@get('autocomplete/:articletype",{"_index":638,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["preview",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["primary",{"_index":1336,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["primarycolumn",{"_index":1475,"title":{},"body":{"entities/PushTokenEntity.html":{},"entities/TagEntity.html":{}}}],["primarycolumn('enum",{"_index":1562,"title":{},"body":{"entities/TagEntity.html":{}}}],["primarygeneratedcolumn",{"_index":322,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"entities/UserEntity.html":{}}}],["priority",{"_index":1434,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["private",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"injectables/TagService.html":{}}}],["process.env.backend_api_key",{"_index":1048,"title":{},"body":{"injectables/BasicStrategy.html":{}}}],["process.env.backend_api_secret",{"_index":1049,"title":{},"body":{"injectables/BasicStrategy.html":{}}}],["process.env.jwt_secret",{"_index":275,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{}}}],["process.env.mysql_database",{"_index":1828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mysql_host",{"_index":1826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mysql_password",{"_index":1830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mysql_user",{"_index":1829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.server_url",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["prod",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["project",{"_index":1735,"title":{},"body":{"index.html":{}}}],["promise",{"_index":368,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":1267,"title":{},"body":{"injectables/FileService.html":{}}}],["properties",{"_index":292,"title":{"properties.html":{}},"body":{"entities/ArticleContentEntity.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"classes/BadValidationRequestException.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"interfaces/UploadedFileDto.html":{},"entities/UserEntity.html":{},"properties.html":{}}}],["properties.join",{"_index":1034,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["properties.length",{"_index":1031,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["properties.push(error.property",{"_index":1030,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["property",{"_index":270,"title":{},"body":{"modules/AppModule.html":{}}}],["provide",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["provided",{"_index":903,"title":{},"body":{"controllers/AuthController.html":{}}}],["provided.'})@apibearerauth()@useguards(undefined)@httpcode(200)@post('sign",{"_index":880,"title":{},"body":{"controllers/AuthController.html":{}}}],["provided.'})@apiconflictresponse({description",{"_index":886,"title":{},"body":{"controllers/AuthController.html":{}}}],["providers",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":1750,"title":{},"body":{"index.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{}}}],["publicated",{"_index":530,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{}}}],["publication",{"_index":1146,"title":{},"body":{"injectables/ExcelService.html":{}}}],["purpose",{"_index":1468,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["purposes",{"_index":796,"title":{},"body":{"injectables/ArticleService.html":{},"miscellaneous/variables.html":{}}}],["push",{"_index":801,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/CronJobService.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"index.html":{}}}],["push_notification_service",{"_index":1444,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["push_token",{"_index":1347,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["pushnotificationcontroller",{"_index":140,"title":{"controllers/PushNotificationController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PushNotificationController.html":{},"coverage.html":{}}}],["pushnotificationservice",{"_index":131,"title":{"injectables/PushNotificationService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/CronJobService.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["pushtokendto",{"_index":1377,"title":{"classes/PushTokenDto.html":{}},"body":{"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"coverage.html":{}}}],["pushtokenentity",{"_index":197,"title":{"entities/PushTokenEntity.html":{}},"body":{"modules/AppModule.html":{},"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{},"coverage.html":{}}}],["pushtokenrepository",{"_index":1398,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["pushtokens",{"_index":1445,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["pushtokens.length",{"_index":1447,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["pushtokens[math.floor(math.random",{"_index":1448,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["put",{"_index":422,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/TagController.html":{}}}],["put(':id",{"_index":508,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put(':id/activity",{"_index":511,"title":{},"body":{"controllers/ArticleController.html":{}}}],["query",{"_index":423,"title":{},"body":{"controllers/ArticleController.html":{}}}],["query('count",{"_index":483,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{}}}],["query('page",{"_index":482,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{}}}],["query('pattern",{"_index":644,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["query('tagid",{"_index":484,"title":{},"body":{"controllers/ArticleController.html":{}}}],["queryrunner",{"_index":1328,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["queryrunner.query(`alter",{"_index":1352,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["queryrunner.query(`create",{"_index":1332,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["queryrunner.query(`drop",{"_index":1365,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["quick",{"_index":407,"title":{},"body":{"controllers/ArticleController.html":{}}}],["rand",{"_index":972,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["random",{"_index":941,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{},"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{}}}],["randomname",{"_index":1246,"title":{},"body":{"injectables/FileService.html":{}}}],["randomname}${extname(originalname",{"_index":1247,"title":{},"body":{"injectables/FileService.html":{}}}],["randomtoken",{"_index":971,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PushNotificationService.html":{}}}],["randomtoken.generate(refresh_token_size",{"_index":1011,"title":{},"body":{"injectables/AuthService.html":{}}}],["randomtoken.language",{"_index":1451,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["randomtoken.token",{"_index":1449,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["raw",{"_index":675,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["readonly",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["real",{"_index":459,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/AuthService.html":{}}}],["reduced",{"_index":1223,"title":{},"body":{"injectables/FileService.html":{}}}],["refactored",{"_index":711,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["refer",{"_index":1794,"title":{},"body":{"index.html":{}}}],["referencedcolumnname",{"_index":341,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{}}}],["references",{"_index":1357,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["reflect",{"_index":1713,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":857,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{}}}],["refresh_token",{"_index":1369,"title":{},"body":{"classes/Migrations1691666064778.html":{},"entities/UserEntity.html":{}}}],["refresh_token_size",{"_index":970,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshaccesstoken",{"_index":851,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshaccesstoken(refreshtoken",{"_index":855,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshaccesstoken(userid",{"_index":954,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":865,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{}}}],["relations",{"_index":714,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["remove",{"_index":499,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/FileService.html":{},"injectables/PushNotificationService.html":{}}}],["removefilefromsystem",{"_index":1195,"title":{},"body":{"injectables/FileService.html":{}}}],["removefilefromsystem(fileurl",{"_index":1214,"title":{},"body":{"injectables/FileService.html":{}}}],["repo",{"_index":1781,"title":{},"body":{"index.html":{}}}],["repository",{"_index":654,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PushNotificationService.html":{},"injectables/TagService.html":{},"index.html":{}}}],["req",{"_index":890,"title":{},"body":{"controllers/AuthController.html":{}}}],["reqeust",{"_index":609,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["request",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtRequest.html":{},"injectables/LocalStrategy.html":{}}}],["request.dto",{"_index":442,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["request.dto.ts",{"_index":606,"title":{},"body":{"classes/ArticleRequestDto.html":{},"coverage.html":{}}}],["request.dto.ts:12",{"_index":612,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["request.dto.ts:17",{"_index":617,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["request.dto.ts:22",{"_index":613,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["request.dto.ts:28",{"_index":618,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["request.dto.ts:33",{"_index":615,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["request.dto.ts:9",{"_index":622,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["request.exception",{"_index":1081,"title":{},"body":{"classes/CustomValidationPipe.html":{}}}],["request.exception.ts",{"_index":1018,"title":{},"body":{"classes/BadValidationRequestException.html":{},"coverage.html":{}}}],["request.exception.ts:7",{"_index":1025,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["request.model",{"_index":896,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.model.ts",{"_index":1292,"title":{},"body":{"interfaces/JwtRequest.html":{},"coverage.html":{}}}],["request.url",{"_index":85,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["require('../package.json",{"_index":287,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":1488,"title":{},"body":{"classes/RequiredParameterPipe.html":{},"index.html":{}}}],["requiredparameterpipe",{"_index":892,"title":{"classes/RequiredParameterPipe.html":{}},"body":{"controllers/AuthController.html":{},"classes/RequiredParameterPipe.html":{},"coverage.html":{}}}],["res",{"_index":424,"title":{},"body":{"controllers/ArticleController.html":{}}}],["reset",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["resize",{"_index":1220,"title":{},"body":{"injectables/FileService.html":{}}}],["resized",{"_index":1224,"title":{},"body":{"injectables/FileService.html":{}}}],["resizeimage",{"_index":1196,"title":{},"body":{"injectables/FileService.html":{}}}],["resizeimage(path",{"_index":1218,"title":{},"body":{"injectables/FileService.html":{}}}],["resizing",{"_index":1266,"title":{},"body":{"injectables/FileService.html":{}}}],["resolve(false",{"_index":1276,"title":{},"body":{"injectables/FileService.html":{}}}],["resolve(true",{"_index":1277,"title":{},"body":{"injectables/FileService.html":{}}}],["resolvers",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["response",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"classes/BadValidationRequestException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalStrategy.html":{}}}],["response.dto",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["response.dto.ts",{"_index":1117,"title":{},"body":{"classes/ErrorResponse.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":1121,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["response.dto.ts:16",{"_index":1124,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["response.dto.ts:6",{"_index":1118,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["response.set('content",{"_index":472,"title":{},"body":{"controllers/ArticleController.html":{}}}],["response.setheader('content",{"_index":466,"title":{},"body":{"controllers/ArticleController.html":{}}}],["response.status(200).send(buffer",{"_index":475,"title":{},"body":{"controllers/ArticleController.html":{}}}],["responsebody",{"_index":73,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["rest",{"_index":1749,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":584,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/Migrations1691261966905.html":{}}}],["restrict'})@joincolumn(['undefined",{"_index":586,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["results",{"_index":87,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"entities/UserEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/RequiredParameterPipe.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1019,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["returns",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"miscellaneous/functions.html":{}}}],["ro",{"_index":958,"title":{},"body":{"injectables/AuthService.html":{}}}],["root",{"_index":1789,"title":{},"body":{"index.html":{}}}],["rootpath",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["rotate",{"_index":1721,"title":{},"body":{"dependencies.html":{}}}],["row",{"_index":1136,"title":{},"body":{"injectables/ExcelService.html":{}}}],["rows",{"_index":1135,"title":{},"body":{"injectables/ExcelService.html":{}}}],["rows.map",{"_index":1187,"title":{},"body":{"injectables/ExcelService.html":{}}}],["run",{"_index":1796,"title":{},"body":{"index.html":{}}}],["running",{"_index":1798,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1715,"title":{},"body":{"dependencies.html":{}}}],["sample",{"_index":1469,"title":{},"body":{"entities/PushTokenEntity.html":{},"index.html":{}}}],["save",{"_index":1381,"title":{},"body":{"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{}}}],["saved",{"_index":839,"title":{},"body":{"injectables/ArticleService.html":{},"entities/PushTokenEntity.html":{},"interfaces/UploadedFileDto.html":{}}}],["savedtag",{"_index":1577,"title":{},"body":{"injectables/TagService.html":{}}}],["savetoken",{"_index":1375,"title":{},"body":{"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{}}}],["savetoken(@body",{"_index":1390,"title":{},"body":{"controllers/PushNotificationController.html":{}}}],["savetoken(token",{"_index":1380,"title":{},"body":{"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{}}}],["scenario",{"_index":460,"title":{},"body":{"controllers/ArticleController.html":{}}}],["schedulemodule",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["scripts",{"_index":1771,"title":{},"body":{"index.html":{}}}],["search",{"_index":627,"title":{},"body":{"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{}}}],["search(@param('articletype",{"_index":643,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["search(articletype",{"_index":629,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["search.controller",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["search.controller.ts",{"_index":625,"title":{},"body":{"controllers/ArticleSearchController.html":{},"coverage.html":{}}}],["search.controller.ts:30",{"_index":633,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["search.controller.ts:49",{"_index":639,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["search.service",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticleSearchController.html":{}}}],["search.service.ts",{"_index":649,"title":{},"body":{"injectables/ArticleSearchService.html":{},"coverage.html":{}}}],["search.service.ts:11",{"_index":655,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["search.service.ts:25",{"_index":666,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["search.service.ts:73",{"_index":671,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["search.service.ts:99",{"_index":658,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["searcharticles",{"_index":651,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["searcharticles(articletype",{"_index":665,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["searchautocomplete",{"_index":628,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["searchautocomplete(@param('articletype",{"_index":647,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["searchautocomplete(articletype",{"_index":636,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["searchautocompletearticle",{"_index":652,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["searchautocompletearticle(articletype",{"_index":670,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["searching",{"_index":634,"title":{},"body":{"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{}}}],["secret",{"_index":274,"title":{},"body":{"modules/AppModule.html":{}}}],["secretorkey",{"_index":1304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["select",{"_index":1001,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/UserEntity.html":{}}}],["selectquerybuilder",{"_index":676,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["send",{"_index":793,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{}}}],["sendcookietorandomdevice",{"_index":1396,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["sendemail",{"_index":1085,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendemail(article",{"_index":1089,"title":{},"body":{"injectables/EmailService.html":{}}}],["sending",{"_index":1070,"title":{},"body":{"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{},"index.html":{}}}],["sendpushnotificationtotopic",{"_index":1397,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["sendpushnotificationtotopic(article",{"_index":1407,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["sense",{"_index":1467,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["sent",{"_index":1114,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PushNotificationService.html":{}}}],["sentry",{"_index":1498,"title":{},"body":{"injectables/SentryService.html":{},"index.html":{}}}],["sentry.captureexception(`${message",{"_index":1502,"title":{},"body":{"injectables/SentryService.html":{}}}],["sentry.service",{"_index":1091,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FileService.html":{}}}],["sentry/node",{"_index":1499,"title":{},"body":{"injectables/SentryService.html":{},"dependencies.html":{}}}],["sentryservice",{"_index":24,"title":{"injectables/SentryService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/SentryService.html":{},"coverage.html":{},"overview.html":{}}}],["server",{"_index":77,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ArticleRequestDto.html":{}}}],["server_url",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["serveroot",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["serves",{"_index":1736,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["services/cron",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["services/email.service",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["services/excel.service",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["services/file.service",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["services/sentry.service",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["serving",{"_index":1769,"title":{},"body":{"index.html":{},"properties.html":{}}}],["session",{"_index":272,"title":{},"body":{"modules/AppModule.html":{}}}],["set",{"_index":398,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["setandreturnnewrefreshtoken",{"_index":927,"title":{},"body":{"injectables/AuthService.html":{}}}],["setandreturnnewrefreshtoken(user",{"_index":956,"title":{},"body":{"injectables/AuthService.html":{}}}],["setarticleactivity",{"_index":350,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["setarticleactivity(@param('id",{"_index":512,"title":{},"body":{"controllers/ArticleController.html":{}}}],["setarticleactivity(articlecontentid",{"_index":395,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["sharp",{"_index":1243,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["sharp(buffer).tofile(path",{"_index":1264,"title":{},"body":{"injectables/FileService.html":{}}}],["sharp(path",{"_index":1259,"title":{},"body":{"injectables/FileService.html":{}}}],["sheet",{"_index":1144,"title":{},"body":{"injectables/ExcelService.html":{}}}],["sheet['!cols",{"_index":1189,"title":{},"body":{"injectables/ExcelService.html":{}}}],["sheet['!rows",{"_index":1190,"title":{},"body":{"injectables/ExcelService.html":{}}}],["sheetfromaoa",{"_index":1130,"title":{},"body":{"injectables/ExcelService.html":{}}}],["sheetfromaoa(rows",{"_index":1141,"title":{},"body":{"injectables/ExcelService.html":{}}}],["short",{"_index":520,"title":{},"body":{"classes/ArticleDto.html":{}}}],["shortcut",{"_index":1546,"title":{},"body":{"classes/TagDto.html":{}}}],["sign",{"_index":862,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinuser",{"_index":852,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinuser(username",{"_index":868,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":276,"title":{},"body":{"modules/AppModule.html":{}}}],["signoutuser",{"_index":853,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoutuser(@req",{"_index":916,"title":{},"body":{"controllers/AuthController.html":{}}}],["signoutuser(jwtpayload",{"_index":960,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoutuser(request",{"_index":875,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupuser",{"_index":854,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupuser(username",{"_index":882,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["size",{"_index":1222,"title":{},"body":{"injectables/FileService.html":{},"interfaces/UploadedFileDto.html":{}}}],["skip",{"_index":806,"title":{},"body":{"injectables/ArticleService.html":{}}}],["sound",{"_index":1436,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"entities/UserEntity.html":{}}}],["source.ts",{"_index":1633,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["spaces",{"_index":664,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["specific",{"_index":1406,"title":{},"body":{"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{},"controllers/TagController.html":{}}}],["specified",{"_index":1602,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["sqlquery",{"_index":689,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["src/.../app.module.ts",{"_index":1820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.service.ts",{"_index":1821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../article",{"_index":1726,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../constants.ts",{"_index":1818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../data",{"_index":1816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database",{"_index":1817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../language.enum.ts",{"_index":1728,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../logger",{"_index":1819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1731,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:16",{"_index":98,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module",{"_index":1244,"title":{},"body":{"injectables/FileService.html":{}}}],["src/app.module.ts",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":285,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts:7",{"_index":286,"title":{},"body":{"injectables/AppService.html":{}}}],["src/config/data",{"_index":1632,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/database",{"_index":1637,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/logger",{"_index":1639,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/constants",{"_index":673,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/FileService.html":{},"entities/PushTokenEntity.html":{},"injectables/TagService.html":{}}}],["src/constants.ts",{"_index":1640,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/endpoints/article/article.controller.ts",{"_index":342,"title":{},"body":{"controllers/ArticleController.html":{},"coverage.html":{}}}],["src/endpoints/article/article.controller.ts:121",{"_index":416,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/endpoints/article/article.controller.ts:150",{"_index":401,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/endpoints/article/article.controller.ts:35",{"_index":372,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/endpoints/article/article.controller.ts:52",{"_index":375,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/endpoints/article/article.controller.ts:70",{"_index":385,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/endpoints/article/article.controller.ts:90",{"_index":362,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/endpoints/article/article.service.ts",{"_index":726,"title":{},"body":{"injectables/ArticleService.html":{},"coverage.html":{}}}],["src/endpoints/article/article.service.ts:104",{"_index":740,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/endpoints/article/article.service.ts:160",{"_index":737,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/endpoints/article/article.service.ts:19",{"_index":730,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/endpoints/article/article.service.ts:192",{"_index":745,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/endpoints/article/article.service.ts:269",{"_index":743,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/endpoints/article/article.service.ts:287",{"_index":735,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/endpoints/article/article.service.ts:37",{"_index":733,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/endpoints/article/search/article",{"_index":624,"title":{},"body":{"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"coverage.html":{}}}],["src/endpoints/auth/auth.controller.ts",{"_index":849,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/endpoints/auth/auth.controller.ts:34",{"_index":888,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/endpoints/auth/auth.controller.ts:56",{"_index":874,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/endpoints/auth/auth.controller.ts:78",{"_index":881,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/endpoints/auth/auth.controller.ts:94",{"_index":864,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/endpoints/auth/auth.service.ts",{"_index":922,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/endpoints/auth/auth.service.ts:102",{"_index":955,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/endpoints/auth/auth.service.ts:13",{"_index":931,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/endpoints/auth/auth.service.ts:134",{"_index":966,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/endpoints/auth/auth.service.ts:157",{"_index":943,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/endpoints/auth/auth.service.ts:180",{"_index":957,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/endpoints/auth/auth.service.ts:191",{"_index":939,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/endpoints/auth/auth.service.ts:201",{"_index":934,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/endpoints/auth/auth.service.ts:212",{"_index":946,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/endpoints/auth/auth.service.ts:28",{"_index":963,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/endpoints/auth/auth.service.ts:58",{"_index":959,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/endpoints/auth/auth.service.ts:80",{"_index":961,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/endpoints/auth/strategies/basic.strategy.ts",{"_index":1036,"title":{},"body":{"injectables/BasicStrategy.html":{},"coverage.html":{}}}],["src/endpoints/auth/strategies/basic.strategy.ts:10",{"_index":1042,"title":{},"body":{"injectables/BasicStrategy.html":{}}}],["src/endpoints/auth/strategies/basic.strategy.ts:21",{"_index":1044,"title":{},"body":{"injectables/BasicStrategy.html":{}}}],["src/endpoints/auth/strategies/jwt.strategy.ts",{"_index":1296,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/endpoints/auth/strategies/jwt.strategy.ts:10",{"_index":1297,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/endpoints/auth/strategies/jwt.strategy.ts:23",{"_index":1299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/endpoints/auth/strategies/local.strategy.ts",{"_index":1308,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/endpoints/auth/strategies/local.strategy.ts:26",{"_index":1311,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/endpoints/auth/strategies/local.strategy.ts:7",{"_index":1310,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/endpoints/push",{"_index":749,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/CronJobService.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"coverage.html":{}}}],["src/endpoints/tag/tag.controller.ts",{"_index":1510,"title":{},"body":{"controllers/TagController.html":{},"coverage.html":{}}}],["src/endpoints/tag/tag.controller.ts:25",{"_index":1518,"title":{},"body":{"controllers/TagController.html":{}}}],["src/endpoints/tag/tag.controller.ts:35",{"_index":1526,"title":{},"body":{"controllers/TagController.html":{}}}],["src/endpoints/tag/tag.controller.ts:50",{"_index":1530,"title":{},"body":{"controllers/TagController.html":{}}}],["src/endpoints/tag/tag.controller.ts:61",{"_index":1523,"title":{},"body":{"controllers/TagController.html":{}}}],["src/endpoints/tag/tag.service.ts",{"_index":1567,"title":{},"body":{"injectables/TagService.html":{},"coverage.html":{}}}],["src/endpoints/tag/tag.service.ts:10",{"_index":1568,"title":{},"body":{"injectables/TagService.html":{}}}],["src/endpoints/tag/tag.service.ts:17",{"_index":1569,"title":{},"body":{"injectables/TagService.html":{}}}],["src/endpoints/tag/tag.service.ts:35",{"_index":1571,"title":{},"body":{"injectables/TagService.html":{}}}],["src/endpoints/tag/tag.service.ts:41",{"_index":1572,"title":{},"body":{"injectables/TagService.html":{}}}],["src/endpoints/tag/tag.service.ts:61",{"_index":1570,"title":{},"body":{"injectables/TagService.html":{}}}],["src/entities/article",{"_index":290,"title":{},"body":{"entities/ArticleContentEntity.html":{},"classes/ArticleDto.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{},"coverage.html":{}}}],["src/entities/article.entity",{"_index":746,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/entities/article.entity.ts",{"_index":565,"title":{},"body":{"entities/ArticleEntity.html":{},"coverage.html":{}}}],["src/entities/article.entity.ts:10",{"_index":579,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:13",{"_index":576,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:16",{"_index":571,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:19",{"_index":581,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:25",{"_index":596,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:28",{"_index":574,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:35",{"_index":587,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:38",{"_index":578,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:51",{"_index":594,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/push",{"_index":1414,"title":{},"body":{"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{},"coverage.html":{}}}],["src/entities/tag.entity",{"_index":747,"title":{},"body":{"injectables/ArticleService.html":{},"classes/TagDto.html":{},"injectables/TagService.html":{}}}],["src/entities/tag.entity.ts",{"_index":1557,"title":{},"body":{"entities/TagEntity.html":{},"coverage.html":{}}}],["src/entities/tag.entity.ts:12",{"_index":1563,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/entities/tag.entity.ts:15",{"_index":1565,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/entities/tag.entity.ts:18",{"_index":1564,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/entities/tag.entity.ts:21",{"_index":1560,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/entities/tag.entity.ts:9",{"_index":1561,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/entities/user.entity",{"_index":968,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/entities/user.entity.ts",{"_index":1609,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["src/entities/user.entity.ts:10",{"_index":1623,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/entities/user.entity.ts:13",{"_index":1616,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/entities/user.entity.ts:16",{"_index":1611,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/entities/user.entity.ts:23",{"_index":1618,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/entities/user.entity.ts:29",{"_index":1613,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/entities/user.entity.ts:7",{"_index":1614,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/filters/all",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/filters/http",{"_index":1278,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1659,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/migrations/1691261966905",{"_index":1322,"title":{},"body":{"classes/Migrations1691261966905.html":{},"coverage.html":{}}}],["src/migrations/1691666064778",{"_index":1367,"title":{},"body":{"classes/Migrations1691666064778.html":{},"coverage.html":{}}}],["src/models/dtos/article",{"_index":441,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["src/models/dtos/article.dto",{"_index":438,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{}}}],["src/models/dtos/article.dto.ts",{"_index":515,"title":{},"body":{"classes/ArticleDto.html":{},"coverage.html":{}}}],["src/models/dtos/article.dto.ts:10",{"_index":525,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:16",{"_index":531,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:18",{"_index":524,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:23",{"_index":532,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:28",{"_index":522,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:33",{"_index":526,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:38",{"_index":529,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:43",{"_index":534,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:48",{"_index":521,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:6",{"_index":523,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:8",{"_index":538,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/error",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ErrorResponse.html":{},"coverage.html":{}}}],["src/models/dtos/tag.dto",{"_index":1151,"title":{},"body":{"injectables/ExcelService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["src/models/dtos/tag.dto.ts",{"_index":1541,"title":{},"body":{"classes/TagDto.html":{},"coverage.html":{}}}],["src/models/dtos/tag.dto.ts:12",{"_index":1544,"title":{},"body":{"classes/TagDto.html":{}}}],["src/models/dtos/tag.dto.ts:19",{"_index":1547,"title":{},"body":{"classes/TagDto.html":{}}}],["src/models/dtos/tag.dto.ts:26",{"_index":1549,"title":{},"body":{"classes/TagDto.html":{}}}],["src/models/dtos/tag.dto.ts:31",{"_index":1543,"title":{},"body":{"classes/TagDto.html":{}}}],["src/models/dtos/token.dto",{"_index":1385,"title":{},"body":{"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{}}}],["src/models/dtos/token.dto.ts",{"_index":1456,"title":{},"body":{"classes/PushTokenDto.html":{},"coverage.html":{}}}],["src/models/dtos/token.dto.ts:13",{"_index":1457,"title":{},"body":{"classes/PushTokenDto.html":{}}}],["src/models/dtos/token.dto.ts:8",{"_index":1458,"title":{},"body":{"classes/PushTokenDto.html":{}}}],["src/models/dtos/uploaded",{"_index":446,"title":{},"body":{"controllers/ArticleController.html":{},"interfaces/UploadedFileDto.html":{},"coverage.html":{}}}],["src/models/enums/article",{"_index":598,"title":{},"body":{"entities/ArticleEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"miscellaneous/enumerations.html":{}}}],["src/models/enums/language.enum",{"_index":334,"title":{},"body":{"entities/ArticleContentEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/ExcelService.html":{},"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["src/models/enums/language.enum.ts",{"_index":1729,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/models/exceptions/bad",{"_index":1016,"title":{},"body":{"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{},"coverage.html":{}}}],["src/models/jwt",{"_index":895,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/services/cron",{"_index":1061,"title":{},"body":{"injectables/CronJobService.html":{},"coverage.html":{}}}],["src/services/email.service",{"_index":748,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/services/email.service.ts",{"_index":1084,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/services/email.service.ts:10",{"_index":1088,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/services/email.service.ts:21",{"_index":1090,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/services/excel.service",{"_index":750,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/services/excel.service.ts",{"_index":1126,"title":{},"body":{"injectables/ExcelService.html":{},"coverage.html":{}}}],["src/services/excel.service.ts:14",{"_index":1147,"title":{},"body":{"injectables/ExcelService.html":{}}}],["src/services/excel.service.ts:25",{"_index":1150,"title":{},"body":{"injectables/ExcelService.html":{}}}],["src/services/excel.service.ts:36",{"_index":1139,"title":{},"body":{"injectables/ExcelService.html":{}}}],["src/services/excel.service.ts:58",{"_index":1132,"title":{},"body":{"injectables/ExcelService.html":{}}}],["src/services/excel.service.ts:87",{"_index":1143,"title":{},"body":{"injectables/ExcelService.html":{}}}],["src/services/file.service",{"_index":445,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["src/services/file.service.ts",{"_index":1191,"title":{},"body":{"injectables/FileService.html":{},"coverage.html":{}}}],["src/services/file.service.ts:15",{"_index":1198,"title":{},"body":{"injectables/FileService.html":{}}}],["src/services/file.service.ts:24",{"_index":1235,"title":{},"body":{"injectables/FileService.html":{}}}],["src/services/file.service.ts:42",{"_index":1211,"title":{},"body":{"injectables/FileService.html":{}}}],["src/services/file.service.ts:51",{"_index":1203,"title":{},"body":{"injectables/FileService.html":{}}}],["src/services/file.service.ts:65",{"_index":1219,"title":{},"body":{"injectables/FileService.html":{}}}],["src/services/file.service.ts:87",{"_index":1215,"title":{},"body":{"injectables/FileService.html":{}}}],["src/services/sentry.service",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/services/sentry.service.ts",{"_index":1493,"title":{},"body":{"injectables/SentryService.html":{},"coverage.html":{}}}],["src/services/sentry.service.ts:12",{"_index":1497,"title":{},"body":{"injectables/SentryService.html":{}}}],["src/services/sentry.service.ts:6",{"_index":1495,"title":{},"body":{"injectables/SentryService.html":{}}}],["src/utils/pipes/check",{"_index":433,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"classes/CheckArticleType.html":{},"coverage.html":{}}}],["src/utils/pipes/required",{"_index":893,"title":{},"body":{"controllers/AuthController.html":{},"classes/RequiredParameterPipe.html":{},"coverage.html":{}}}],["src/utils/pipes/string",{"_index":436,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"classes/StringToNumberPipe.html":{},"coverage.html":{}}}],["src/utils/pipes/validation.pipe",{"_index":449,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/TagController.html":{}}}],["src/utils/pipes/validation.pipe.ts",{"_index":1077,"title":{},"body":{"classes/CustomValidationPipe.html":{},"coverage.html":{}}}],["src/utils/pipes/validation.pipe.ts:7",{"_index":1080,"title":{},"body":{"classes/CustomValidationPipe.html":{}}}],["start",{"_index":1797,"title":{},"body":{"index.html":{}}}],["started",{"_index":1732,"title":{"index.html":{}},"body":{"index.html":{}}}],["starts",{"_index":1269,"title":{},"body":{"injectables/FileService.html":{}}}],["statements",{"_index":1628,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileService.html":{},"dependencies.html":{},"index.html":{}}}],["status",{"_index":70,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ErrorResponse.html":{},"classes/HttpExceptionFilter.html":{}}}],["status(status",{"_index":1284,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":74,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ErrorResponse.html":{},"classes/HttpExceptionFilter.html":{}}}],["storage",{"_index":1225,"title":{},"body":{"injectables/FileService.html":{},"index.html":{}}}],["storing",{"_index":1463,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["story",{"_index":1340,"title":{},"body":{"classes/Migrations1691261966905.html":{},"miscellaneous/enumerations.html":{}}}],["storyboard_article_service",{"_index":754,"title":{},"body":{"injectables/ArticleService.html":{}}}],["strategy",{"_index":1038,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strict",{"_index":265,"title":{},"body":{"modules/AppModule.html":{}}}],["string",{"_index":102,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"interfaces/UploadedFileDto.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["stringified",{"_index":619,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["stringtonumberpipe",{"_index":435,"title":{"classes/StringToNumberPipe.html":{}},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"classes/StringToNumberPipe.html":{},"coverage.html":{}}}],["subject",{"_index":1097,"title":{},"body":{"injectables/EmailService.html":{}}}],["success",{"_index":1318,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["summary",{"_index":107,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/AuthController.html":{},"controllers/PushNotificationController.html":{},"controllers/TagController.html":{}}}],["super",{"_index":1035,"title":{},"body":{"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CustomValidationPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1744,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1803,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":1833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":1216,"title":{},"body":{"injectables/FileService.html":{}}}],["table",{"_index":1333,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1670,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":393,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{},"classes/Migrations1691261966905.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"injectables/TagService.html":{}}}],["tag.'})@apinotfoundresponse({description",{"_index":1528,"title":{},"body":{"controllers/TagController.html":{}}}],["tag.'})@delete",{"_index":1522,"title":{},"body":{"controllers/TagController.html":{}}}],["tag.dto",{"_index":542,"title":{},"body":{"classes/ArticleDto.html":{}}}],["tag.entity",{"_index":602,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["tag.id",{"_index":774,"title":{},"body":{"injectables/ArticleService.html":{}}}],["tag.language",{"_index":564,"title":{},"body":{"classes/ArticleDto.html":{}}}],["tag.order",{"_index":1589,"title":{},"body":{"injectables/TagService.html":{}}}],["tag.service",{"_index":1531,"title":{},"body":{"controllers/TagController.html":{}}}],["tag.title",{"_index":1588,"title":{},"body":{"injectables/TagService.html":{}}}],["tag.title).join",{"_index":1172,"title":{},"body":{"injectables/ExcelService.html":{}}}],["tag\\`(\\`id\\`,\\`language",{"_index":1363,"title":{},"body":{"classes/Migrations1691261966905.html":{}}}],["tag_id",{"_index":604,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/Migrations1691261966905.html":{}}}],["tag_language",{"_index":605,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/Migrations1691261966905.html":{}}}],["tagcontroller",{"_index":138,"title":{"controllers/TagController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TagController.html":{},"coverage.html":{}}}],["tagdto",{"_index":533,"title":{"classes/TagDto.html":{}},"body":{"classes/ArticleDto.html":{},"injectables/ExcelService.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["tagdto(savedtag",{"_index":1581,"title":{},"body":{"injectables/TagService.html":{}}}],["tagdto(tag",{"_index":1585,"title":{},"body":{"injectables/TagService.html":{}}}],["tagdto[]).map(tag",{"_index":1171,"title":{},"body":{"injectables/ExcelService.html":{}}}],["tagentity",{"_index":166,"title":{"entities/TagEntity.html":{}},"body":{"modules/AppModule.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["tagentity.id",{"_index":1552,"title":{},"body":{"classes/TagDto.html":{}}}],["tagentity.language",{"_index":1553,"title":{},"body":{"classes/TagDto.html":{}}}],["tagentity.order",{"_index":1556,"title":{},"body":{"classes/TagDto.html":{}}}],["tagentity.title",{"_index":1554,"title":{},"body":{"classes/TagDto.html":{}}}],["tagid",{"_index":383,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["tagrepository",{"_index":731,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["tags",{"_index":359,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/ExcelService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["tags.'})@get",{"_index":1525,"title":{},"body":{"controllers/TagController.html":{}}}],["tags.map(tag",{"_index":1584,"title":{},"body":{"injectables/TagService.html":{}}}],["tagservice",{"_index":132,"title":{"injectables/TagService.html":{}},"body":{"modules/AppModule.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"coverage.html":{},"overview.html":{}}}],["tagsfromdto",{"_index":762,"title":{},"body":{"injectables/ArticleService.html":{}}}],["take",{"_index":715,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["takes",{"_index":1313,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["template",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{}}}],["templates",{"_index":1108,"title":{},"body":{"injectables/EmailService.html":{}}}],["templates/emails",{"_index":262,"title":{},"body":{"modules/AppModule.html":{}}}],["test@test.com",{"_index":1096,"title":{},"body":{"injectables/EmailService.html":{}}}],["testing",{"_index":458,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/PushNotificationService.html":{}}}],["this.active",{"_index":556,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.appservice.getversion",{"_index":109,"title":{},"body":{"controllers/AppController.html":{}}}],["this.articlecontentid",{"_index":544,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.articlecontentrepository",{"_index":690,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["this.articlecontentrepository.find",{"_index":704,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["this.articlecontentrepository.findone",{"_index":812,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlecontentrepository.save(newarticlecontententities",{"_index":792,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlecontentrepository.save(oldarticlecontententity",{"_index":838,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.update(articlecontententity.article.id",{"_index":845,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlesearchservice.searcharticles(articletype",{"_index":645,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["this.articlesearchservice.searchautocompletearticle(articletype",{"_index":648,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["this.articleservice.createarticle(articletype",{"_index":501,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.exportarticles().then(buffer",{"_index":465,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getarticlebyid(id",{"_index":479,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getarticlesbytypeandfilter(articletype",{"_index":485,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.setarticleactivity(articlecontentid",{"_index":514,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.updatearticlebyid(articlecontentid",{"_index":510,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articlestoaoa(articles.filter((article",{"_index":1158,"title":{},"body":{"injectables/ExcelService.html":{}}}],["this.articletype",{"_index":550,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.authservice.refreshaccesstoken(userid",{"_index":921,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinuser(username",{"_index":914,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signoutuser(request.jwtpayload",{"_index":917,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signupuser(username",{"_index":909,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":1319,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.body",{"_index":554,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.checksearchpattern(pattern",{"_index":678,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["this.coverimage",{"_index":560,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.cryptnewpassword(password",{"_index":979,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.dateofpublication",{"_index":548,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.deletetoken",{"_index":1455,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["this.emailservice.sendemail(new",{"_index":799,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.excelservice.exportarticles(articles.map(article",{"_index":847,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.fileservice.removefilefromsystem(coverimagetodelete",{"_index":843,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.fileservice.removefilefromsystem(file.path",{"_index":503,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.fileservice.resizeimage(file.path",{"_index":495,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.generaterefreshtoken",{"_index":1008,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getactiveuser(username",{"_index":985,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.httpadapterhost.httpadapter",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.i18n.translate('data.push_notification_body",{"_index":1424,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["this.i18n.translate('data.push_notification_body_cookie",{"_index":1452,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["this.i18n.translate('data.push_notification_title",{"_index":1422,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["this.i18n.translate('data.push_notification_title_cookie",{"_index":1450,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["this.id",{"_index":1551,"title":{},"body":{"classes/TagDto.html":{}}}],["this.jwtservice.sign(payload",{"_index":990,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.language",{"_index":552,"title":{},"body":{"classes/ArticleDto.html":{},"classes/TagDto.html":{}}}],["this.logger.error(`[fileservice",{"_index":1275,"title":{},"body":{"injectables/FileService.html":{}}}],["this.logger.error(`[sentry_service",{"_index":1500,"title":{},"body":{"injectables/SentryService.html":{}}}],["this.logger.error(`[storyboard_article_service",{"_index":766,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.logger.error(`httpexception",{"_index":1287,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.logger.error(exception.stack",{"_index":1288,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.logger.log('error",{"_index":1454,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["this.logger.log('info",{"_index":753,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/PushNotificationService.html":{}}}],["this.mailerservice.sendmail",{"_index":1095,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.order",{"_index":1555,"title":{},"body":{"classes/TagDto.html":{}}}],["this.parent",{"_index":558,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.passwordsareequal(validatedpassword",{"_index":1003,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.pushnotificationservice.deletetoken(token",{"_index":1394,"title":{},"body":{"controllers/PushNotificationController.html":{}}}],["this.pushnotificationservice.savetoken(token",{"_index":1391,"title":{},"body":{"controllers/PushNotificationController.html":{}}}],["this.pushnotificationservice.sendcookietorandomdevice",{"_index":1076,"title":{},"body":{"injectables/CronJobService.html":{}}}],["this.pushnotificationservice.sendpushnotificationtotopic(item",{"_index":804,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.pushtokenrepository.delete",{"_index":1420,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["this.pushtokenrepository.find",{"_index":1446,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["this.pushtokenrepository.save",{"_index":1416,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["this.sentryservice.captureexception('[email_service_error",{"_index":1116,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.sentryservice.captureexception('error",{"_index":1265,"title":{},"body":{"injectables/FileService.html":{}}}],["this.sentryservice.captureexception(`internal",{"_index":84,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.setandreturnnewrefreshtoken(user",{"_index":986,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sheetfromaoa(rows",{"_index":1160,"title":{},"body":{"injectables/ExcelService.html":{}}}],["this.signinuser(username",{"_index":984,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tagrepository.delete",{"_index":1591,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.find",{"_index":1582,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.findby",{"_index":772,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.tagrepository.findone",{"_index":1586,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.findoneby",{"_index":1573,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.save",{"_index":1578,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.save(tag",{"_index":1590,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tags",{"_index":562,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.tagservice.createtag(newtag",{"_index":1534,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.deletetag(newtag",{"_index":1540,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.getalltags(language",{"_index":1536,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.updatetag(newtag",{"_index":1538,"title":{},"body":{"controllers/TagController.html":{}}}],["this.title",{"_index":546,"title":{},"body":{"classes/ArticleDto.html":{},"classes/TagDto.html":{}}}],["this.userentityrepository.findone",{"_index":975,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.userentityrepository.findoneby",{"_index":992,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userentityrepository.insert",{"_index":978,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userentityrepository.save(user",{"_index":987,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userentityrepository.save(userentity",{"_index":995,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.xls_column_order",{"_index":1161,"title":{},"body":{"injectables/ExcelService.html":{}}}],["this.xls_column_widths[key",{"_index":1184,"title":{},"body":{"injectables/ExcelService.html":{}}}],["throw",{"_index":504,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/CheckArticleType.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RequiredParameterPipe.html":{},"injectables/TagService.html":{}}}],["thrown",{"_index":1052,"title":{},"body":{"classes/CheckArticleType.html":{}}}],["throws",{"_index":486,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/TagController.html":{}}}],["time",{"_index":1479,"title":{},"body":{"entities/PushTokenEntity.html":{},"entities/UserEntity.html":{}}}],["timestamp",{"_index":569,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["tinyint",{"_index":1341,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["title",{"_index":299,"title":{},"body":{"entities/ArticleContentEntity.html":{},"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/ExcelService.html":{},"classes/Migrations1691261966905.html":{},"injectables/PushNotificationService.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["tobuffer",{"_index":1263,"title":{},"body":{"injectables/FileService.html":{}}}],["token",{"_index":859,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Migrations1691261966905.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"entities/UserEntity.html":{},"dependencies.html":{}}}],["token.'})@apiunauthorizedresponse({description",{"_index":860,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.entity",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"injectables/PushNotificationService.html":{}}}],["token.entity.ts",{"_index":1462,"title":{},"body":{"entities/PushTokenEntity.html":{},"coverage.html":{}}}],["token.entity.ts:14",{"_index":1476,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["token.entity.ts:17",{"_index":1474,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["token.entity.ts:20",{"_index":1473,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["token.entity.ts:28",{"_index":1477,"title":{},"body":{"entities/PushTokenEntity.html":{}}}],["token.language",{"_index":1418,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["token.token",{"_index":1417,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["tokenmessage",{"_index":1409,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["tokens",{"_index":1464,"title":{},"body":{"entities/PushTokenEntity.html":{},"entities/UserEntity.html":{}}}],["topic",{"_index":1421,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["topicmessage",{"_index":1410,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["transform",{"_index":1054,"title":{},"body":{"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"classes/RequiredParameterPipe.html":{},"classes/StringToNumberPipe.html":{}}}],["transform(value",{"_index":1055,"title":{},"body":{"classes/CheckArticleType.html":{},"classes/RequiredParameterPipe.html":{},"classes/StringToNumberPipe.html":{}}}],["transformer",{"_index":1695,"title":{},"body":{"dependencies.html":{}}}],["transforming",{"_index":1505,"title":{},"body":{"classes/StringToNumberPipe.html":{}}}],["transport",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["transports",{"_index":1844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transports.console",{"_index":1867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trim",{"_index":725,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["true",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"classes/CustomValidationPipe.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"injectables/LocalStrategy.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["true})@joincolumn(['undefined",{"_index":303,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["true})@jointable({name",{"_index":589,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["try",{"_index":763,"title":{},"body":{"injectables/ArticleService.html":{}}}],["ttl",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["two",{"_index":706,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["type",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadValidationRequestException.html":{},"injectables/BasicStrategy.html":{},"classes/CheckArticleType.html":{},"injectables/CronJobService.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtRequest.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"controllers/PushNotificationController.html":{},"injectables/PushNotificationService.html":{},"classes/PushTokenDto.html":{},"entities/PushTokenEntity.html":{},"classes/RequiredParameterPipe.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"entities/UserEntity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.'})@get(':articletype",{"_index":384,"title":{},"body":{"controllers/ArticleController.html":{}}}],["type.enum",{"_index":430,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{}}}],["type.enum.ts",{"_index":1727,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["type.pipe",{"_index":434,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{}}}],["type.pipe.ts",{"_index":1050,"title":{},"body":{"classes/CheckArticleType.html":{},"coverage.html":{}}}],["type.pipe.ts:8",{"_index":1058,"title":{},"body":{"classes/CheckArticleType.html":{}}}],["typeof",{"_index":778,"title":{},"body":{"injectables/ArticleService.html":{}}}],["typeorm",{"_index":332,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forfeature",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forroot(databaseconfig",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["types/bcrypt",{"_index":1682,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":1684,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1686,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":1690,"title":{},"body":{"dependencies.html":{}}}],["typical",{"_index":1758,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":910,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('email",{"_index":1320,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":999,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('this",{"_index":1306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":592,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/RequiredParameterPipe.html":{},"classes/StringToNumberPipe.html":{}}}],["unexpected",{"_index":1033,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["uniqe",{"_index":1545,"title":{},"body":{"classes/TagDto.html":{}}}],["unique",{"_index":905,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Migrations1691666064778.html":{},"entities/UserEntity.html":{}}}],["unique.'})@httpcode(200)@post('sign",{"_index":887,"title":{},"body":{"controllers/AuthController.html":{}}}],["unlicensed",{"_index":1812,"title":{},"body":{"properties.html":{}}}],["unset",{"_index":836,"title":{},"body":{"injectables/ArticleService.html":{}}}],["unwanted",{"_index":662,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["up",{"_index":883,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["up(queryrunner",{"_index":1330,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["update",{"_index":413,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/Migrations1691261966905.html":{},"entities/PushTokenEntity.html":{},"controllers/TagController.html":{}}}],["updatearticlebyid",{"_index":351,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updatearticlebyid(@param('id",{"_index":509,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatearticlebyid(articlecontentid",{"_index":411,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updated",{"_index":417,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"controllers/TagController.html":{}}}],["updated_at",{"_index":1349,"title":{},"body":{"classes/Migrations1691261966905.html":{},"entities/PushTokenEntity.html":{}}}],["updatedarticle",{"_index":744,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedarticle.active",{"_index":826,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedarticle.body",{"_index":820,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedarticle.coverimage",{"_index":831,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedarticle.dateofpublication",{"_index":822,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedarticle.parent",{"_index":824,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedarticle.title",{"_index":818,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedarticle.updatedtags",{"_index":827,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedat",{"_index":1419,"title":{},"body":{"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{}}}],["updatedtags",{"_index":518,"title":{},"body":{"classes/ArticleDto.html":{}}}],["updatetag",{"_index":1514,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["updatetag(@body(customvalidationpipe",{"_index":1537,"title":{},"body":{"controllers/TagController.html":{}}}],["updatetag(newtag",{"_index":1527,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["updating",{"_index":403,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["uploaded",{"_index":1593,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["uploadedfile",{"_index":425,"title":{},"body":{"controllers/ArticleController.html":{}}}],["uploadedfiledto",{"_index":354,"title":{"interfaces/UploadedFileDto.html":{}},"body":{"controllers/ArticleController.html":{},"interfaces/UploadedFileDto.html":{},"coverage.html":{}}}],["uploads",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["uploads/images",{"_index":1840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":614,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["usage",{"_index":1800,"title":{},"body":{"index.html":{}}}],["use",{"_index":245,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleSearchService.html":{}}}],["useclass",{"_index":280,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":402,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/AuthController.html":{},"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":536,"title":{},"body":{"classes/ArticleDto.html":{}}}],["useguards",{"_index":426,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/AuthController.html":{},"controllers/PushNotificationController.html":{}}}],["useguards(authguard('local",{"_index":913,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard(['basic",{"_index":1387,"title":{},"body":{"controllers/PushNotificationController.html":{}}}],["useguards(authguard(['jwt",{"_index":455,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":427,"title":{},"body":{"controllers/ArticleController.html":{}}}],["useinterceptors(fileinterceptor('coverimage",{"_index":490,"title":{},"body":{"controllers/ArticleController.html":{}}}],["user",{"_index":866,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ErrorResponse.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691666064778.html":{},"injectables/PushNotificationService.html":{},"entities/PushTokenEntity.html":{},"classes/TagDto.html":{},"entities/UserEntity.html":{}}}],["user's",{"_index":1605,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["user.'})@apiunauthorizedresponse({description",{"_index":870,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.active",{"_index":1005,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.expirationdate",{"_index":998,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":988,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":1002,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.refreshtoken",{"_index":1007,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentity",{"_index":214,"title":{"entities/UserEntity.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["userentity.expirationdate",{"_index":994,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentity.refreshtoken",{"_index":993,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentityrepository",{"_index":932,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userid",{"_index":856,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["username",{"_index":871,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Migrations1691666064778.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["username/id",{"_index":1295,"title":{},"body":{"interfaces/JwtRequest.html":{}}}],["users",{"_index":1123,"title":{},"body":{"classes/ErrorResponse.html":{},"index.html":{}}}],["uses",{"_index":1753,"title":{},"body":{"index.html":{}}}],["using",{"_index":1747,"title":{},"body":{"index.html":{}}}],["utf8_unicode_ci",{"_index":1835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuid",{"_index":1241,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":1240,"title":{},"body":{"injectables/FileService.html":{}}}],["v14.15.4",{"_index":1775,"title":{},"body":{"index.html":{}}}],["v20.10.5",{"_index":1778,"title":{},"body":{"index.html":{}}}],["v4",{"_index":1239,"title":{},"body":{"injectables/FileService.html":{}}}],["v8.0.23",{"_index":1776,"title":{},"body":{"index.html":{}}}],["valid",{"_index":915,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/LocalStrategy.html":{}}}],["valid.'})@apinotfoundresponse({description",{"_index":878,"title":{},"body":{"controllers/AuthController.html":{}}}],["validate",{"_index":967,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BasicStrategy.html":{},"classes/CustomValidationPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":1043,"title":{},"body":{"injectables/BasicStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validatedpassword",{"_index":965,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":928,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":964,"title":{},"body":{"injectables/AuthService.html":{}}}],["validating",{"_index":608,"title":{},"body":{"classes/ArticleRequestDto.html":{},"classes/BadValidationRequestException.html":{}}}],["validation",{"_index":1017,"title":{},"body":{"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{},"coverage.html":{}}}],["validationerror",{"_index":1024,"title":{},"body":{"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{}}}],["validationpipe",{"_index":1079,"title":{},"body":{"classes/CustomValidationPipe.html":{}}}],["validationpipeoptions",{"_index":1027,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["validator",{"_index":623,"title":{},"body":{"classes/ArticleRequestDto.html":{},"classes/BadValidationRequestException.html":{},"injectables/LocalStrategy.html":{},"classes/TagDto.html":{},"dependencies.html":{}}}],["value",{"_index":667,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"injectables/ExcelService.html":{},"injectables/FileService.html":{},"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{},"classes/RequiredParameterPipe.html":{},"classes/StringToNumberPipe.html":{},"injectables/TagService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar(255",{"_index":1334,"title":{},"body":{"classes/Migrations1691261966905.html":{},"classes/Migrations1691666064778.html":{}}}],["varchar(32",{"_index":1370,"title":{},"body":{"classes/Migrations1691666064778.html":{}}}],["variable",{"_index":709,"title":{},"body":{"injectables/ArticleSearchService.html":{},"coverage.html":{}}}],["variables",{"_index":1793,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["verification",{"_index":982,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"properties.html":{}}}],["version.'})@get",{"_index":97,"title":{},"body":{"controllers/AppController.html":{}}}],["via",{"_index":406,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/CronJobService.html":{},"index.html":{}}}],["void",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/SentryService.html":{}}}],["wait",{"_index":841,"title":{},"body":{"injectables/ArticleService.html":{}}}],["want",{"_index":840,"title":{},"body":{"injectables/ArticleService.html":{}}}],["watch",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["welcome",{"_index":1734,"title":{},"body":{"index.html":{}}}],["where('content.language",{"_index":694,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["white",{"_index":663,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["whole",{"_index":1425,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["whose",{"_index":867,"title":{},"body":{"controllers/AuthController.html":{}}}],["width",{"_index":1155,"title":{},"body":{"injectables/ExcelService.html":{},"injectables/FileService.html":{}}}],["winston",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"dependencies.html":{}}}],["winston_module_provider",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{}}}],["winstonmodule",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule.forroot(loggerconfig",{"_index":266,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmoduleoptions",{"_index":1842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["within",{"_index":1603,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["without",{"_index":661,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["workaround",{"_index":705,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["workbook",{"_index":1152,"title":{},"body":{"injectables/ExcelService.html":{}}}],["worksheet",{"_index":1145,"title":{},"body":{"injectables/ExcelService.html":{}}}],["world",{"_index":1550,"title":{},"body":{"classes/TagDto.html":{}}}],["wscols",{"_index":1182,"title":{},"body":{"injectables/ExcelService.html":{}}}],["wsrows",{"_index":1186,"title":{},"body":{"injectables/ExcelService.html":{}}}],["x",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["xls_column_order",{"_index":1127,"title":{},"body":{"injectables/ExcelService.html":{}}}],["xls_column_widths",{"_index":1128,"title":{},"body":{"injectables/ExcelService.html":{}}}],["xlsx",{"_index":1153,"title":{},"body":{"injectables/ExcelService.html":{},"dependencies.html":{}}}],["xlsx.utils.aoa_to_sheet(rows",{"_index":1173,"title":{},"body":{"injectables/ExcelService.html":{}}}],["xlsx.utils.book_append_sheet(workbook",{"_index":1162,"title":{},"body":{"injectables/ExcelService.html":{}}}],["xlsx.utils.book_new",{"_index":1156,"title":{},"body":{"injectables/ExcelService.html":{}}}],["xlsx.write(workbook",{"_index":1163,"title":{},"body":{"injectables/ExcelService.html":{}}}],["yes",{"_index":741,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/SentryService.html":{}}}],["yyyy",{"_index":1179,"title":{},"body":{"injectables/ExcelService.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/all-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Default error handler catching all but HTTP exceptions.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost, sentryService: SentryService, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/filters/all-exception.filter.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sentryService\n                                                  \n                                                        \n                                                                        SentryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        catch\n                        \n                    \n                \n            \n            \n                \n                    \n                    catch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/all-exception.filter.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpStatus, Logger, Inject } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { ErrorResponse } from 'src/models/dtos/error-response.dto';\nimport { SentryService } from 'src/services/sentry.service';\n\n/**\n * Default error handler catching all but HTTP exceptions.\n */\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n    constructor(private readonly httpAdapterHost: HttpAdapterHost,\n                private readonly sentryService: SentryService,\n                @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger) {\n    }\n\n    public catch(exception: any, host: ArgumentsHost): void {\n        const httpAdapter: any = this.httpAdapterHost.httpAdapter;\n\n        const ctx: HttpArgumentsHost = host.switchToHttp();\n        const response: any = ctx.getResponse();\n        const request: any = ctx.getRequest();\n        const status: number = HttpStatus.INTERNAL_SERVER_ERROR;\n\n        const responseBody: ErrorResponse = {\n            statusCode: status,\n            message: 'Internal server error occurred, please contact the administrator.',\n            error: exception['message'],\n        };\n\n        httpAdapter.reply(response, responseBody, status);\n        this.sentryService.captureException(`Internal server error ${status}: ${request.url}`, exception['stack']);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                getVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Public\n                        getVersion\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVersion()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get backend version.'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:16\n                \n            \n\n\n            \n                \n                    Get backend version.\n\n\n                    \n                        Example :\n                        \n                            0.0.1\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        backend version.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiOperation } from '@nestjs/swagger';\n\n@Controller()\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n  /**\n   * Get backend version.\n   * @example 0.0.1\n   * @returns backend version.\n   */\n  @ApiOperation({ summary: 'Get backend version.' })\n  @Get()\n    public getVersion(): string {\n        return this.appService.getVersion();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArticleSearchService\n\nArticleSearchService\n\nAppModule -->\n\nArticleSearchService->AppModule\n\n\n\n\n\nArticleService\n\nArticleService\n\nAppModule -->\n\nArticleService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAppModule -->\n\nAuthService->AppModule\n\n\n\n\n\nBasicStrategy\n\nBasicStrategy\n\nAppModule -->\n\nBasicStrategy->AppModule\n\n\n\n\n\nCronJobService\n\nCronJobService\n\nAppModule -->\n\nCronJobService->AppModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAppModule -->\n\nEmailService->AppModule\n\n\n\n\n\nExcelService\n\nExcelService\n\nAppModule -->\n\nExcelService->AppModule\n\n\n\n\n\nFileService\n\nFileService\n\nAppModule -->\n\nFileService->AppModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAppModule -->\n\nJwtStrategy->AppModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAppModule -->\n\nLocalStrategy->AppModule\n\n\n\n\n\nPushNotificationService\n\nPushNotificationService\n\nAppModule -->\n\nPushNotificationService->AppModule\n\n\n\n\n\nSentryService\n\nSentryService\n\nAppModule -->\n\nSentryService->AppModule\n\n\n\n\n\nTagService\n\nTagService\n\nAppModule -->\n\nTagService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            ArticleSearchService\n                        \n                        \n                            ArticleService\n                        \n                        \n                            AuthService\n                        \n                        \n                            BasicStrategy\n                        \n                        \n                            CronJobService\n                        \n                        \n                            EmailService\n                        \n                        \n                            ExcelService\n                        \n                        \n                            FileService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            PushNotificationService\n                        \n                        \n                            SentryService\n                        \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            ArticleController\n                        \n                        \n                            TagController\n                        \n                        \n                            ArticleSearchController\n                        \n                        \n                            PushNotificationController\n                        \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport databaseConfig from './config/database-config';\nimport { ArticleEntity } from './entities/article.entity';\nimport { ArticleContentEntity } from './entities/article-content.entity';\nimport { ArticleController } from './endpoints/article/article.controller';\nimport { ArticleService } from './endpoints/article/article.service';\nimport loggerConfig from './config/logger-config';\nimport { WinstonModule } from 'nest-winston';\nimport { APP_FILTER, APP_INTERCEPTOR } from '@nestjs/core';\nimport { HttpExceptionFilter } from './filters/http-exception.filter';\nimport { AllExceptionsFilter } from './filters/all-exception.filter';\nimport { TagEntity } from './entities/tag.entity';\nimport { CacheInterceptor, CacheModule } from '@nestjs/cache-manager';\nimport { SentryService } from './services/sentry.service';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { FileService } from './services/file.service';\nimport { EmailService } from './services/email.service';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { TagService } from './endpoints/tag/tag.service';\nimport { TagController } from './endpoints/tag/tag.controller';\nimport { HeaderResolver, I18nModule } from 'nestjs-i18n';\nimport { PushNotificationService } from './endpoints/push-notification/push-notification.service';\nimport { ArticleSearchService } from './endpoints/article/search/article-search.service';\nimport { ArticleSearchController } from './endpoints/article/search/article-search.controller';\nimport { PushNotificationController } from './endpoints/push-notification/push-notification.controller';\nimport { PushTokenEntity } from './entities/push-token.entity';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { CronJobService } from './services/cron-job.service';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { BasicStrategy } from './endpoints/auth/strategies/basic.strategy';\nimport { ExcelService } from './services/excel.service';\nimport { AuthService } from './endpoints/auth/auth.service';\nimport { JwtStrategy } from './endpoints/auth/strategies/jwt.strategy';\nimport { AuthController } from './endpoints/auth/auth.controller';\nimport { LocalStrategy } from './endpoints/auth/strategies/local.strategy';\nimport { UserEntity } from './entities/user.entity';\n\n@Module({\n    imports: [\n        ServeStaticModule.forRoot(\n            {\n                rootPath: join(__dirname, '..', 'uploads'),\n                serveRoot: '/uploads',\n                exclude: ['/api/(.*)'],\n            },\n        ),\n        ConfigModule.forRoot(),\n        ScheduleModule.forRoot(),\n        CacheModule.register({\n            ttl: 1000, // ms. 1s during developing. In prod, this could be higher.\n        }),\n        TypeOrmModule.forRoot(databaseConfig),\n        TypeOrmModule.forFeature([\n            ArticleEntity,\n            ArticleContentEntity,\n            TagEntity,\n            PushTokenEntity,\n            UserEntity\n        ]),\n        I18nModule.forRoot({\n            fallbackLanguage: 'en',\n            loaderOptions: {\n                path: join(__dirname, 'assets', 'i18n'),\n                watch: true,\n            },\n            resolvers: [\n                { use: HeaderResolver, options: ['x-language'] }\n            ]\n        }),\n        MailerModule.forRoot({\n            transport: {\n                host: 'localhost',\n                port: 1025,\n                ignoreTLS: true,\n                secure: false,\n            },\n            preview: false,\n            defaults: {\n                from: '\"Info\" ',\n            },\n            template: {\n                dir: __dirname + '/templates/emails',\n                adapter: new HandlebarsAdapter(),\n                options: {\n                    strict: true,\n                },\n            },\n        }),\n        WinstonModule.forRoot(loggerConfig),\n        PassportModule.register({\n            defaultStrategy: 'jwt',\n            property: 'jwtPayload',\n            session: false,\n\n        }),\n        JwtModule.register({\n            secret: process.env.JWT_SECRET,\n            signOptions: {\n                expiresIn: '1d'\n            }\n        }),\n    ],\n    controllers: [\n        AppController,\n        ArticleController,\n        TagController,\n        ArticleSearchController,\n        PushNotificationController,\n        AuthController\n    ],\n    providers: [\n        AppService,\n        ArticleService,\n        ArticleSearchService,\n        SentryService,\n        FileService,\n        EmailService,\n        ExcelService,\n        AuthService,\n        TagService,\n        CronJobService,\n        PushNotificationService,\n        BasicStrategy,\n        JwtStrategy,\n        LocalStrategy,\n        {\n            provide: APP_FILTER,\n            useClass: AllExceptionsFilter,\n        },\n        {\n            provide: APP_FILTER,\n            useClass: HttpExceptionFilter,\n        },\n        {\n            provide: APP_INTERCEPTOR,\n            useClass: CacheInterceptor,\n        },\n    ],\n})\nexport class AppModule {}\n\nexport const SERVER_URL: string = process.env.SERVER_URL ?? '';\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getVersion\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVersion()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nconst { version } = require('../package.json');\n\n@Injectable()\nexport class AppService {\n  \n    public getVersion(): string {\n        return version;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ArticleContentEntity.html":{"url":"entities/ArticleContentEntity.html","title":"entity - ArticleContentEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ArticleContentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/article-content.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                article\n                            \n                            \n                                    \n                                    Public\n                                articleId\n                            \n                            \n                                    \n                                    Public\n                                body\n                            \n                            \n                                    \n                                    Public\n                                coverImage\n                            \n                            \n                                    \n                                    Public\n                                dateOfPublication\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                language\n                            \n                            \n                                    \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        article\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, article => article.articleContents, {cascade: true})@JoinColumn(['undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        articleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'article_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:19\n                        \n                    \n\n            \n                \n                    Id of the article to which this content belongs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('longtext')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        coverImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true, length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        dateOfPublication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('datetime', {name: 'date_of_publication'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LanguageEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('enum', {enum: LanguageEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, Index, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { ArticleEntity } from './article.entity';\nimport { LanguageEnum } from 'src/models/enums/language.enum';\n\n@Index('article_id', ['articleId'], {})\n@Index('IDX_fulltext', ['title', 'body'], { fulltext: true })\n@Index('date_of_publication_idx', ['dateOfPublication'], {})\n@Index('language', ['language'], {})\n@Entity('article_content')\nexport class ArticleContentEntity {\n\n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    /**\n     * Id of the article to which this content belongs.\n     */\n    @Column({ name: 'article_id' })\n    public articleId: number;\n\n    @Column('enum', { enum: LanguageEnum })\n    public language: LanguageEnum;\n\n    @Column()\n    public title: string;\n\n    @Column('longtext')\n    public body: string;\n\n    @Column('varchar', { nullable: true, length: 255 })\n    public coverImage: string | null;\n\n    @Column('datetime', { name: 'date_of_publication' })\n    public dateOfPublication: Date;\n\n    @ManyToOne(() => ArticleEntity, (article) => article.articleContents, { cascade: true })\n    @JoinColumn([{ name: 'article_id', referencedColumnName: 'id' }])\n    public article: ArticleEntity;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArticleController.html":{"url":"controllers/ArticleController.html","title":"controller - ArticleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArticleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/article/article.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                articles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createArticle\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                exportArticles\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                getArticleById\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                getArticles\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                setArticleActivity\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateArticleById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Public\n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(articleType: ArticleTypeEnum, file: UploadedFileDto, body: ArticleRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create new article.'})@ApiNotFoundResponse({description: 'Cannot parse tags or body is missing for some language.'})@HttpCode(200)@Post(':articleType')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/article.controller.ts:90\n                \n            \n\n\n            \n                \n                    API accepts ArticleRequestDto from request. For each language creates new ArticleContent.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    file\n                                    \n                                                UploadedFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    body\n                                    \n                                                ArticleRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Article request body.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Public\n                        Async\n                        exportArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    exportArticles(response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Export all articles to excel file.'})@Get('export')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/article.controller.ts:35\n                \n            \n\n\n            \n                \n                    Export all articles to excel file.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Public\n                        Async\n                        getArticleById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticleById(id: number, language: LanguageEnum)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get article by id.'})@Get('detail/:id')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/article.controller.ts:52\n                \n            \n\n\n            \n                \n                    API returns object with information get from ArticleEntity and details about article from ArticleContentEntity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        article detail.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Public\n                        Async\n                        getArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticles(articleType: ArticleTypeEnum, page: number, count: number, language: LanguageEnum, tagId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all articles by article type.'})@Get(':articleType')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/article.controller.ts:70\n                \n            \n\n\n            \n                \n                    Get all articles by article type.\nAPI returns object with information get from ArticleEntity and details about article from ArticleContentEntity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type of article.\n\n                                    \n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Page (1, 2, 3, atd)\n\n                                    \n                                \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Number of articles per page.\n\n                                    \n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Content language.\n\n                                    \n                                \n                                \n                                    tagId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If tagId is present, return only articles containing this tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        list of articles.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Public\n                        Async\n                        setArticleActivity\n                        \n                    \n                \n            \n            \n                \n                    \n                    setArticleActivity(articleContentId: number, activity: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Set article activity.'})@ApiNotFoundResponse({description: 'Article not found.'})@Put(':id/activity')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/article.controller.ts:150\n                \n            \n\n\n            \n                \n                    This API is used for updating article activity. Articles cannot be deleted, only deactivated.\nArticles can be deactivated also via updateArticleById. But this API is for quick deactivation via administration.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleContentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of the article content.\n\n                                    \n                                \n                                \n                                    activity\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Activity of the article.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Public\n                        Async\n                        updateArticleById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticleById(articleContentId: number, file: UploadedFileDto, body: ArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update article content by id.'})@ApiNotFoundResponse({description: 'Article not found.'})@Put(':id')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/article.controller.ts:121\n                \n            \n\n\n            \n                \n                    This API is used for updating article content by id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleContentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of the article content.\n\n                                    \n                                \n                                \n                                    file\n                                    \n                                                UploadedFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    body\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Article details.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Updated article.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Headers, HttpCode, Param, Post, Put, Query, Res, UploadedFile, UseGuards, UseInterceptors } from '@nestjs/common';\nimport { LanguageEnum } from '../../models/enums/language.enum';\nimport { ArticleTypeEnum } from '../../models/enums/article-type.enum';\nimport { ArticleService } from './article.service';\nimport { CheckArticleType } from 'src/utils/pipes/check-article-type.pipe';\nimport { StringToNumberPipe } from 'src/utils/pipes/string-to-number.pipe';\nimport { ArticleDto } from 'src/models/dtos/article.dto';\nimport { ApiNotFoundResponse, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { ArticleRequestDto } from 'src/models/dtos/article-request.dto';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { FileService } from 'src/services/file.service';\nimport { UploadedFileDto } from 'src/models/dtos/uploaded-file.dto';\nimport { CustomValidationPipe } from 'src/utils/pipes/validation.pipe';\nimport { Response } from 'express';\nimport * as moment from 'moment';\nimport { AuthGuard } from '@nestjs/passport';\n\n@ApiTags('Administration', 'Application')\n@Controller('articles')\nexport class ArticleController {\n\n    constructor(private readonly articleService: ArticleService,\n                private readonly fileService: FileService) {\n    }\n\n    /**\n     * Export all articles to excel file.\n     * \n     * @param response \n     * @returns \n     */\n    @ApiOperation({ summary: 'Export all articles to excel file.' })\n    // @UseGuards(AuthGuard(['jwt']))   // Commented for easier testing. In real scenario endpoint should be guarded.\n    @Get('export')\n    public async exportArticles(@Res() response: Response): Promise {\n        return this.articleService.exportArticles().then(buffer => {\n            response.setHeader('Content-disposition', `attachment; filename=${moment().format('YYYY-MM-DD')}_articles.xlsx`);\n            response.set('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n            response.status(200).send(buffer);\n        });\n    }\n\n    /**\n     * API returns object with information get from ArticleEntity and details about article from ArticleContentEntity.\n     * \n     * @param id \n     * @param language \n     * @returns article detail.\n     */\n    @ApiOperation({ summary: 'Get article by id.' })\n    @Get('detail/:id')\n    public async getArticleById(@Param('id', StringToNumberPipe) id: number,\n                                @Headers('x-language') language: LanguageEnum): Promise {\n        return this.articleService.getArticleById(id, language);\n    }\n\n    /**\n     * Get all articles by article type.\n     * API returns object with information get from ArticleEntity and details about article from ArticleContentEntity.\n     *\n     * @param articleType   Type of article.\n     * @param language      Content language.\n     * @param page          Page (1, 2, 3, atd)\n     * @param count         Number of articles per page.\n     * @param tagId         If tagId is present, return only articles containing this tag.\n     * @returns             list of articles.\n     */\n    @ApiOperation({ summary: 'Get all articles by article type.' })\n    @Get(':articleType')\n    public async getArticles(@Param('articleType', CheckArticleType) articleType: ArticleTypeEnum,\n                             @Query('page', StringToNumberPipe) page: number,\n                             @Query('count', StringToNumberPipe) count: number,\n                             @Headers('x-language') language: LanguageEnum,\n                             @Query('tagId') tagId: string): Promise {\n        return this.articleService.getArticlesByTypeAndFilter(articleType, language, page, count, tagId);\n    }\n\n    /**\n     * API accepts ArticleRequestDto from request. For each language creates new ArticleContent.\n     * \n     * @throws BadRequestException    if cannot parse tags or body is missing for some language.\n     * @param body      Article request body.\n     */\n    @ApiOperation({ summary: 'Create new article.' })\n    @ApiNotFoundResponse({ description: 'Cannot parse tags or body is missing for some language.' })\n    // @UseGuards(AuthGuard(['jwt']))   // Commented for easier testing. In real scenario endpoint should be guarded.\n    @HttpCode(200)\n    @Post(':articleType')\n    @UseInterceptors(FileInterceptor('coverImage', FileService.multerOptions))\n    public async createArticle(@Param('articleType', CheckArticleType) articleType: ArticleTypeEnum,\n                               @UploadedFile() file: UploadedFileDto,\n                               @Body(CustomValidationPipe) body: ArticleRequestDto): Promise {\n\n        if (file) {\n            await this.fileService.resizeImage(file.path);\n            body.coverImage = `${file.destination}/${file.filename}`;\n        }\n\n        // Create article. If error occurs, remove file if exists.\n        return this.articleService.createArticle(articleType, body).catch((error) => {\n            if (file) {\n                this.fileService.removeFileFromSystem(file.path);\n            }\n            throw error;\n        });\n    }\n\n    /**\n     * This API is used for updating article content by id.\n     * \n     * @throws NotFoundException    if article does not exist.\n     * @param articleContentId      Id of the article content.  \n     * @param body                  Article details.\n     * @returns                     Updated article.\n     */\n    @ApiOperation({ summary: 'Update article content by id.' })\n    @ApiNotFoundResponse({ description: 'Article not found.' })\n    // @UseGuards(AuthGuard(['jwt']))   // Commented for easier testing. In real scenario endpoint should be guarded.\n    @Put(':id')\n    @UseInterceptors(FileInterceptor('coverImage', FileService.multerOptions))\n    public async updateArticleById(@Param('id', StringToNumberPipe) articleContentId: number,\n                                   @UploadedFile() file: UploadedFileDto,\n                                   @Body() body: ArticleDto): Promise {\n\n        if (file) {\n            await this.fileService.resizeImage(file.path);\n            body.coverImage = `${file.destination}/${file.filename}`;\n        }\n        \n        return this.articleService.updateArticleById(articleContentId, body).catch((error) => {\n            if (file) {\n                this.fileService.removeFileFromSystem(file.path);\n            }\n            throw error;\n        });\n    }\n\n    /**\n     * This API is used for updating article activity. Articles cannot be deleted, only deactivated.\n     * Articles can be deactivated also via updateArticleById. But this API is for quick deactivation via administration.\n     * \n     * @throws NotFoundException    if article does not exist.\n     * @param articleContentId      Id of the article content.\n     * @param activity              Activity of the article.\n     */\n    @ApiOperation({ summary: 'Set article activity.' })\n    @ApiNotFoundResponse({ description: 'Article not found.' })\n    // @UseGuards(AuthGuard(['jwt']))   // Commented for easier testing. In real scenario endpoint should be guarded.\n    @Put(':id/activity')\n    public async setArticleActivity(@Param('id', StringToNumberPipe) articleContentId: number,\n                                    @Body('active') activity: boolean): Promise {\n        return this.articleService.setArticleActivity(articleContentId, activity);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleDto.html":{"url":"classes/ArticleDto.html","title":"class - ArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dtos/article.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                articleContentId\n                            \n                            \n                                    Public\n                                articleType\n                            \n                            \n                                    Public\n                                body\n                            \n                            \n                                    Public\n                                coverImage\n                            \n                            \n                                    Public\n                                dateOfPublication\n                            \n                            \n                                    Public\n                                language\n                            \n                            \n                                    Public\n                                parent\n                            \n                            \n                                    Public\n                                tags\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                updatedTags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(articleContent: ArticleContentEntity, short: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/models/dtos/article.dto.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        articleContent\n                                                  \n                                                        \n                                                                        ArticleContentEntity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        short\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:28\n                        \n                    \n\n            \n                \n                    Is article active?\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        articleContentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        articleType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        coverImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:33\n                        \n                    \n\n            \n                \n                    Cover image of the article.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dateOfPublication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:38\n                        \n                    \n\n            \n                \n                    Date when the article was publicated or updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:16\n                        \n                    \n\n            \n                \n                    Content (title, body) language.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:23\n                        \n                    \n\n            \n                \n                    Id of the parent article.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TagDto[]\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:43\n                        \n                    \n\n            \n                \n                    What tags are associated with this article. Useful for filtering.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updatedTags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:48\n                        \n                    \n\n            \n                \n                    Tags in string format. When coming from form.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArticleContentEntity } from 'src/entities/article-content.entity';\nimport { TagDto } from './tag.dto';\n\nexport class ArticleDto {\n\n    public articleContentId: number;\n\n    public title: string;\n    \n    public body: string;\n\n    /**\n     * Content (title, body) language.\n     * @example 'cs'\n     */\n    public language: string;\n    \n    public articleType: string;\n    \n    /**\n     * Id of the parent article.\n     */\n    public parent: number | null;\n\n    /**\n     * Is article active?\n     */\n    public active: boolean;\n\n    /**\n     * Cover image of the article.\n     */\n    public coverImage: string | null;\n\n    /**\n     * Date when the article was publicated or updated.\n     */\n    public dateOfPublication: Date;\n\n    /**\n     * What tags are associated with this article. Useful for filtering.\n     */\n    public tags: TagDto[];\n\n    /**\n     * Tags in string format. When coming from form.\n     */\n    public updatedTags: string;\n\n    constructor(articleContent: ArticleContentEntity, short: boolean = false) {\n        this.articleContentId = articleContent.id;\n        this.title = articleContent.title;\n        this.dateOfPublication = articleContent.dateOfPublication;\n\n        if (!short) {\n            this.articleType = articleContent.article.articleType;\n            this.language = articleContent.language;\n            this.body = articleContent.body;\n            this.active = articleContent.article.active;\n            this.parent = articleContent.article.parent;\n            this.coverImage = articleContent.coverImage;\n            this.tags = articleContent.article.tags?.filter(tag => tag.language == articleContent.language) ?? [];\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ArticleEntity.html":{"url":"entities/ArticleEntity.html","title":"entity - ArticleEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ArticleEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/article.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                active\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                articleContents\n                            \n                            \n                                    \n                                    Public\n                                articleType\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                childrenArticles\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                parent\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                parentArticle\n                            \n                            \n                                    \n                                    \n                                    Public\n                                tags\n                            \n                            \n                                    \n                                    Public\n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        articleContents\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleContentEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, articleContent => articleContent.article)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        articleType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('enum', {name: 'article_type', enum: ArticleTypeEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        childrenArticles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, article => article.parentArticle)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        parentArticle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, article => article.childrenArticles, {onDelete: 'RESTRICT', onUpdate: 'RESTRICT'})@JoinColumn(['undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TagEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, {cascade: true})@JoinTable({name: 'article__tag', joinColumns: undefined, inverseJoinColumns: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('datetime', {default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:25\n                        \n                    \n\n            \n                \n                    Article creation timestamp.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ArticleTypeEnum } from 'src/models/enums/article-type.enum';\nimport { Column, Entity, JoinColumn, JoinTable, ManyToMany, ManyToOne, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { ArticleContentEntity } from './article-content.entity';\nimport { TagEntity } from './tag.entity';\n\n@Entity('article')\nexport class ArticleEntity {\n    \n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    @Column('enum', { name: 'article_type', enum: ArticleTypeEnum })\n    public articleType: ArticleTypeEnum;\n\n    @Column({ default: true })\n    public active: boolean;\n\n    @Column({ nullable: true })\n    public parent: number | null;\n\n    /**\n     * Article creation timestamp.\n     */\n    @Column('datetime', { default: () => 'CURRENT_TIMESTAMP' })\n    public timestamp: Date;\n\n    @OneToMany(() => ArticleContentEntity, (articleContent) => articleContent.article)\n    public articleContents?: ArticleContentEntity[];\n\n    @ManyToOne(() => ArticleEntity, (article) => article.childrenArticles, {\n        onDelete: 'RESTRICT',\n        onUpdate: 'RESTRICT',\n    })\n    @JoinColumn([{ name: 'parent', referencedColumnName: 'id' }])\n    public parentArticle?: ArticleEntity;\n\n    @OneToMany(() => ArticleEntity, (article) => article.parentArticle)\n    public childrenArticles?: ArticleEntity[];\n    \n    @ManyToMany(() => TagEntity, { cascade: true })\n    @JoinTable({\n        name: 'article__tag',\n        joinColumns: [\n            { name: 'article_id', referencedColumnName: 'id' },\n        ],\n        inverseJoinColumns: [\n            { name: 'tag_id', referencedColumnName: 'id' },\n            { name: 'tag_language', referencedColumnName: 'language' },\n        ]\n    })\n    public tags: TagEntity[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleRequestDto.html":{"url":"classes/ArticleRequestDto.html","title":"class - ArticleRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dtos/article-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for validating article from the reqeust during article creation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                body\n                            \n                            \n                                    Public\n                                coverImage\n                            \n                            \n                                    Public\n                                dateOfPublication\n                            \n                            \n                                    Public\n                                parent\n                            \n                            \n                                    \n                                    Public\n                                tags\n                            \n                            \n                                    \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        coverImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article-request.dto.ts:22\n                        \n                    \n\n            \n                \n                    URL of the cover image on the server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dateOfPublication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Date when the article is publicated. If not present, current date is used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article-request.dto.ts:17\n                        \n                    \n\n            \n                \n                    Id of the parent article.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article-request.dto.ts:28\n                        \n                    \n\n            \n                \n                    Stringified array of tag ids.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\n/**\n * DTO for validating article from the reqeust during article creation.\n */\nexport class ArticleRequestDto {\n\n    @IsNotEmpty()\n    public title: { cs: string, en: string };\n    \n    @IsNotEmpty()\n    public body: { cs: string, en: string };\n\n    /**\n     * Id of the parent article.\n     */\n    public parent: number;\n\n    /**\n     * URL of the cover image on the server.\n     */\n    public coverImage: string;\n\n    /**\n     * Stringified array of tag ids.\n     */\n    @IsNotEmpty()\n    public tags: string;\n\n    /**\n     * Date when the article is publicated. If not present, current date is used.\n     */\n    public dateOfPublication: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArticleSearchController.html":{"url":"controllers/ArticleSearchController.html","title":"controller - ArticleSearchController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArticleSearchController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/article/search/article-search.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                articles/search\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                search\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                searchAutocomplete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Public\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(articleType: ArticleTypeEnum, page: number, count: number, language: LanguageEnum, pattern: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Search articles by pattern in title or body.'})@ApiNotFoundResponse({description: 'Pattern is not present.'})@Get(':articleType')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/search/article-search.controller.ts:30\n                \n            \n\n\n            \n                \n                    This API is used for searching articles by pattern in title or body.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pagination page.\n\n                                    \n                                \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Number of articles per page.\n\n                                    \n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Language of the article.\n\n                                    \n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pattern to search.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        List of articles.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Public\n                        searchAutocomplete\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAutocomplete(articleType: ArticleTypeEnum, language: LanguageEnum, pattern: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Search articles for autocomplete.'})@ApiNotFoundResponse({description: 'Pattern is not present.'})@Get('autocomplete/:articleType')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/search/article-search.controller.ts:49\n                \n            \n\n\n            \n                \n                    API for searching articles for autocomplete. Search only in title. Return only id, title and dateOfPublication.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Language of the article.\n\n                                    \n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pattern to search.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Only id, title and dateOfPublication.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Headers, Param,Query } from '@nestjs/common';\nimport { CheckArticleType } from 'src/utils/pipes/check-article-type.pipe';\nimport { StringToNumberPipe } from 'src/utils/pipes/string-to-number.pipe';\nimport { ArticleDto } from 'src/models/dtos/article.dto';\nimport { ApiNotFoundResponse, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { ArticleTypeEnum } from 'src/models/enums/article-type.enum';\nimport { LanguageEnum } from 'src/models/enums/language.enum';\nimport { ArticleSearchService } from './article-search.service';\n\n@ApiTags('Administration', 'Application')\n@Controller('articles/search')\nexport class ArticleSearchController {\n\n    constructor(private readonly articleSearchService: ArticleSearchService) {\n    }\n\n    /**\n     * This API is used for searching articles by pattern in title or body.\n     * \n     * @throws NotFoundException    if pattern is not present.\n     * @param pattern   Pattern to search.\n     * @param language  Language of the article.\n     * @param page      Pagination page.\n     * @param count     Number of articles per page.\n     * @returns         List of articles.\n     */\n    @ApiOperation({ summary: 'Search articles by pattern in title or body.' })\n    @ApiNotFoundResponse({ description: 'Pattern is not present.' })\n    @Get(':articleType')\n    public search(@Param('articleType', CheckArticleType) articleType: ArticleTypeEnum,\n                  @Query('page', StringToNumberPipe) page: number,\n                  @Query('count', StringToNumberPipe) count: number,\n                  @Headers('x-language') language: LanguageEnum,\n                  @Query('pattern') pattern: string): Promise {\n        return this.articleSearchService.searchArticles(articleType, pattern, language, page, count);\n    }\n\n    /**\n     * API for searching articles for autocomplete. Search only in title. Return only id, title and dateOfPublication.\n     * \n     * @throws NotFoundException    if pattern is not present.\n     * @param pattern   Pattern to search.\n     * @param language  Language of the article.\n     * @returns         Only id, title and dateOfPublication.\n     */\n    @ApiOperation({ summary: 'Search articles for autocomplete.' })\n    @ApiNotFoundResponse({ description: 'Pattern is not present.' })\n    @Get('autocomplete/:articleType')\n    public searchAutocomplete(@Param('articleType', CheckArticleType) articleType: ArticleTypeEnum,\n                              @Headers('x-language') language: LanguageEnum,\n                              @Query('pattern') pattern: string): Promise {\n        return this.articleSearchService.searchAutocompleteArticle(articleType, pattern, language);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticleSearchService.html":{"url":"injectables/ArticleSearchService.html","title":"injectable - ArticleSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArticleSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/article/search/article-search.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkSearchPattern\n                            \n                            \n                                    Public\n                                    Async\n                                searchArticles\n                            \n                            \n                                    Public\n                                    Async\n                                searchAutocompleteArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(articleContentRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/endpoints/article/search/article-search.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        articleContentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        checkSearchPattern\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkSearchPattern(pattern: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/search/article-search.service.ts:99\n                \n            \n\n\n            \n                \n                    This method is used for checking search pattern.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pattern to search.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Pattern without unwanted white spaces.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        searchArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchArticles(articleType: ArticleTypeEnum, pattern: string, language: LanguageEnum, page: number, count: number)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/search/article-search.service.ts:25\n                \n            \n\n\n            \n                \n                    This method is used for searching articles by pattern in title or body.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pattern to search.\n\n                                    \n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_LANGUAGE\n                                    \n\n                                    \n                                        Language of the article.\n\n                                    \n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        Pagination page.\n\n                                    \n                                \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        PAGE_COUNT\n                                    \n\n                                    \n                                        Number of articles per page.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        List of articles.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        searchAutocompleteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAutocompleteArticle(articleType: ArticleTypeEnum, pattern: string, language: LanguageEnum)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/search/article-search.service.ts:73\n                \n            \n\n\n            \n                \n                    Method for searching articles for autocomplete. Search only in title. Return only id, title and dateOfPublication.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pattern to search.\n\n                                    \n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_LANGUAGE\n                                    \n\n                                    \n                                        Language of the article.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Only id, title and dateOfPublication.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DEFAULT_LANGUAGE, PAGE_COUNT } from 'src/constants';\nimport { ArticleContentEntity } from 'src/entities/article-content.entity';\nimport { ArticleDto } from 'src/models/dtos/article.dto';\nimport { ArticleTypeEnum } from 'src/models/enums/article-type.enum';\nimport { LanguageEnum } from 'src/models/enums/language.enum';\nimport { ILike, Raw, Repository, SelectQueryBuilder } from 'typeorm';\n\n@Injectable()\nexport class ArticleSearchService {\n\n    constructor(\n        @InjectRepository(ArticleContentEntity) private readonly articleContentRepository: Repository,\n    ) { }\n\n    /**\n     * This method is used for searching articles by pattern in title or body.\n     * @param pattern   Pattern to search.\n     * @param language  Language of the article.\n     * @param page      Pagination page.\n     * @param count     Number of articles per page.\n     * @returns         List of articles.\n     */\n    public async searchArticles(\n        articleType: ArticleTypeEnum,\n        pattern: string,\n        language: LanguageEnum = DEFAULT_LANGUAGE,\n        page: number = 1,\n        count: number = PAGE_COUNT\n    ): Promise {\n        pattern = this.checkSearchPattern(pattern);\n\n        // Cannot use find() because of the WHERE condition with OR operator. https://github.com/typeorm/typeorm/issues/2869\n        // We can use OR operator in find(), but we have to copy all where conditions. Eg.:\n        /*\n            where: [{\n                    language,\n                    article: { articleType },\n                    title: ILike(`%${pattern}%`),  `(ArticleContentEntity.title LIKE :pattern OR ArticleContentEntity.body LIKE :pattern)`, { pattern: `%${pattern}%` }),\n        const sqlQuery: SelectQueryBuilder = this.articleContentRepository\n            .createQueryBuilder('content')\n            .innerJoinAndSelect('content.article', 'article')\n            .leftJoinAndSelect('article.tags', 'tags')\n            .where('content.language = :language', { language })\n            .andWhere('article.active = 1')\n            .andWhere('article.articleType = :articleType', { articleType })\n            .andWhere('(content.title LIKE :pattern OR content.body LIKE :pattern)', { pattern: `%${pattern}%` })\n            .limit(count)\n            .offset(page  new ArticleDto(articleContent));\n    }\n\n    /**\n     * Method for searching articles for autocomplete. Search only in title. Return only id, title and dateOfPublication.\n     * @param pattern   Pattern to search.\n     * @param language  Language of the article.\n     * @returns         Only id, title and dateOfPublication.\n     */\n    public async searchAutocompleteArticle(articleType: ArticleTypeEnum, pattern: string, language: LanguageEnum = DEFAULT_LANGUAGE ): Promise {\n        pattern = this.checkSearchPattern(pattern);\n\n        // Search only in title.\n        // Return only id, title and dateOfPublication. It is enough for autocomplete.\n        const articleContentEntities: ArticleContentEntity[] = await this.articleContentRepository.find({\n            where: {\n                language,\n                article: { articleType, active: true },\n                // Workaround for searching in two columns with find(). Use Entity.name variable in case it is refactored.\n                title: Raw(() => `(${ArticleContentEntity.name}.title LIKE :pattern OR ${ArticleContentEntity.name}.body LIKE :pattern)`, { pattern: `%${pattern}%` }),\n            },\n            relations: ['article'],\n            take: 10,\n            order: { dateOfPublication: 'DESC' },\n        });\n\n        return articleContentEntities.map(articleContent => new ArticleDto(articleContent, true));\n    }\n\n    /**\n     * This method is used for checking search pattern.\n     * @throws BadRequestException  if pattern is missing.\n     * @param pattern               Pattern to search.\n     * @returns                     Pattern without unwanted white spaces.\n     */\n    private checkSearchPattern(pattern: string): string {\n        if (!pattern) {\n            throw new BadRequestException('Missing mandatory parameter(s): pattern.');\n        }\n        \n        // Remove unwanted white spaces.\n        return pattern.replace(/ +/g, ' ').trim();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticleService.html":{"url":"injectables/ArticleService.html","title":"injectable - ArticleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArticleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/article/article.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createArticle\n                            \n                            \n                                    Public\n                                    Async\n                                exportArticles\n                            \n                            \n                                    Public\n                                    Async\n                                getArticleById\n                            \n                            \n                                    Public\n                                    Async\n                                getArticlesByTypeAndFilter\n                            \n                            \n                                    Public\n                                    Async\n                                setArticleActivity\n                            \n                            \n                                    Public\n                                    Async\n                                updateArticleById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository, articleRepository: Repository, articleContentRepository: Repository, logger: Logger, emailService: EmailService, excelService: ExcelService, pushNotificationService: PushNotificationService, fileService: FileService)\n                    \n                \n                        \n                            \n                                Defined in src/endpoints/article/article.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        articleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        articleContentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        excelService\n                                                  \n                                                        \n                                                                        ExcelService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pushNotificationService\n                                                  \n                                                        \n                                                                        PushNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fileService\n                                                  \n                                                        \n                                                                        FileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(articleType: ArticleTypeEnum, newArticleDto: ArticleRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/article.service.ts:37\n                \n            \n\n\n            \n                \n                    This method is used for creating new article.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type of article.\n\n                                    \n                                \n                                \n                                    newArticleDto\n                                    \n                                                ArticleRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Article details.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        exportArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    exportArticles()\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/article.service.ts:287\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getArticleById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticleById(articleContentId: number, language: LanguageEnum)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/article.service.ts:160\n                \n            \n\n\n            \n                \n                    This method is used for getting article by id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleContentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Id of the article content.\n\n                                    \n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_LANGUAGE\n                                    \n\n                                    \n                                        Language of the article.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Article with details.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getArticlesByTypeAndFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticlesByTypeAndFilter(articleType: ArticleTypeEnum, language: LanguageEnum, page: number, count: number, tagId?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/article.service.ts:104\n                \n            \n\n\n            \n                \n                    This method is used for getting articles by type and tag.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Type of article.\n\n                                    \n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_LANGUAGE\n                                    \n\n                                    \n                                        Content language.\n\n                                    \n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        Pagination page.\n\n                                    \n                                \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        PAGE_COUNT\n                                    \n\n                                    \n                                        Number of articles per page.\n\n                                    \n                                \n                                \n                                    tagId\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        If tagId is present, return only articles containing this tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        List of articles filtered by type and tag.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        setArticleActivity\n                        \n                    \n                \n            \n            \n                \n                    \n                    setArticleActivity(articleContentId: number, activity: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/article.service.ts:269\n                \n            \n\n\n            \n                \n                    This method is used for updating article activity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleContentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of the article content.\n\n                                    \n                                \n                                \n                                    activity\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Activity of the article.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateArticleById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticleById(articleContentId: number, updatedArticle: ArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/article.service.ts:192\n                \n            \n\n\n            \n                \n                    This method is used for updating article by id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleContentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of the article content.\n\n                                    \n                                \n                                \n                                    updatedArticle\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Article details.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Updated article.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { DEFAULT_LANGUAGE, PAGE_COUNT } from 'src/constants';\nimport { ArticleContentEntity } from 'src/entities/article-content.entity';\nimport { ArticleEntity } from 'src/entities/article.entity';\nimport { TagEntity } from 'src/entities/tag.entity';\nimport { ArticleRequestDto } from 'src/models/dtos/article-request.dto';\nimport { ArticleDto } from 'src/models/dtos/article.dto';\nimport { ArticleTypeEnum } from 'src/models/enums/article-type.enum';\nimport { LanguageEnum } from 'src/models/enums/language.enum';\nimport { EmailService } from 'src/services/email.service';\nimport { FileService } from 'src/services/file.service';\nimport { In, Repository } from 'typeorm';\nimport { PushNotificationService } from 'src/endpoints/push-notification/push-notification.service';\nimport { ExcelService } from 'src/services/excel.service';\n\n@Injectable()\nexport class ArticleService {\n\n    constructor(\n        @InjectRepository(TagEntity) private readonly tagRepository: Repository,\n        @InjectRepository(ArticleEntity) private readonly articleRepository: Repository,\n        @InjectRepository(ArticleContentEntity) private readonly articleContentRepository: Repository,\n        @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n        private readonly emailService: EmailService,\n        private readonly excelService: ExcelService,\n        private readonly pushNotificationService: PushNotificationService,\n        private readonly fileService: FileService\n    ) { }\n\n    /**\n     * This method is used for creating new article.\n     * @param articleType   Type of article.\n     * @param newArticleDto Article details.\n     */\n    public async createArticle(articleType: ArticleTypeEnum, newArticleDto: ArticleRequestDto): Promise {\n        this.logger.log('info', `[STORYBOARD_ARTICLE_SERVICE] Article=${JSON.stringify(newArticleDto)}`);\n\n        // Title is mandatory, we will take from it what languages are in the request.\n        const languages: string [] = Object.keys(newArticleDto.title) as Array;\n\n        // Create new article.\n        const newArticle: ArticleEntity = new ArticleEntity();\n        newArticle.articleType = articleType;\n        newArticle.parent = newArticleDto.parent;\n\n        // Parse tags from request.\n        let tagsFromDto: TagEntity[] = [];\n        try {\n            tagsFromDto = JSON.parse(newArticleDto.tags);\n        } catch(e) {\n            this.logger.error(`[STORYBOARD_ARTICLE_SERVICE] Cannot parse tags from request. ${e}`);\n            throw new BadRequestException(`Cannot parse tags from request. ${newArticleDto.tags}`);\n        }\n\n        // Find tags from database by ids from request.\n        newArticle.tags = await this.tagRepository.findBy({\n            id: In(tagsFromDto.map(tag => tag.id))\n        });\n\n        // Create new article content for each language.\n        const newArticleContentEntities: ArticleContentEntity[] = languages.map((language: keyof typeof newArticleDto.title) => {\n            const newArticleContent: ArticleContentEntity = new ArticleContentEntity();\n            newArticleContent.title = newArticleDto.title[language];\n            newArticleContent.body = newArticleDto.body[language];\n            newArticleContent.language =  language;\n            newArticleContent.dateOfPublication = newArticleDto.dateOfPublication ?? new Date();\n            newArticleContent.article = newArticle;\n            newArticleContent.coverImage = newArticleDto.coverImage;\n\n            if (!newArticleContent.title) {\n                throw new BadRequestException(`Missing mandatory parameter(s): title for language ${language}.`);\n            }\n            \n            if (!newArticleContent.body) {\n                throw new BadRequestException(`Missing mandatory parameter(s): body for language ${language}.`);\n            }\n            return newArticleContent;\n        });\n\n        await this.articleContentRepository.save(newArticleContentEntities);\n\n        // Send email about new article.\n        // This feature is just for testing purposes, so pick first language.\n        this.emailService.sendEmail(new ArticleDto(newArticleContentEntities[0]));\n\n        // Send push notification about new article for every language.\n        newArticleContentEntities.forEach(item => {\n            this.pushNotificationService.sendPushNotificationToTopic(item, item.language);\n        });\n        \n    }\n\n    /**\n     * This method is used for getting articles by type and tag.\n     * @param articleType   Type of article.\n     * @param language      Content language.\n     * @param page          Pagination page.\n     * @param count         Number of articles per page.\n     * @param tagId         If tagId is present, return only articles containing this tag.\n     * @returns             List of articles filtered by type and tag.\n     */\n    public async getArticlesByTypeAndFilter(\n        articleType: ArticleTypeEnum,\n        language: LanguageEnum = DEFAULT_LANGUAGE,\n        page: number = 1,\n        count: number = PAGE_COUNT,\n        tagId?: string\n    ): Promise {\n\n        const articleContentEntities: ArticleContentEntity[] = await this.articleContentRepository.find({\n            where: {\n                language: language,\n                article: {\n                    active: true,\n                    articleType: articleType,\n                    tags: tagId ? {\n                        language: language,\n                        id: tagId\n                    } : undefined\n                }\n            },\n            relations: {\n                article: {\n                    tags: true\n                }\n            },\n            skip: (page  articleContent.id)) },\n                relations: { article: { tags: true } }\n            });\n\n            // Map tags to articleContentEntities tags.\n            articleContentEntities.forEach(articleContent => {\n                articleContent.article.tags = articlesWithTags.find(tag => tag.id === articleContent.id)?.article.tags ?? [];\n            });\n        }\n\n        return articleContentEntities.map(articleContent => new ArticleDto(articleContent));\n    }\n\n    /**\n     * This method is used for getting article by id.\n     * @param articleContentId  Id of the article content.\n     * @param language          Language of the article.\n     * @returns                 Article with details.\n     */\n    public async getArticleById(articleContentId: number, language: LanguageEnum = DEFAULT_LANGUAGE): Promise {\n\n        const articleContentEntity: ArticleContentEntity | null = await this.articleContentRepository.findOne({\n            where: {\n                id: articleContentId,\n                article: {\n                    tags: {\n                        language: language\n                    }\n                }\n            },\n            relations: {\n                article: {\n                    tags: true\n                }\n            }\n        });\n\n        if (!articleContentEntity) {\n            throw new NotFoundException(`Article with id ${articleContentId} not found.`);\n        }\n\n        return new ArticleDto(articleContentEntity);\n    }\n    \n    /**\n     * This method is used for updating article by id.\n     * @throws NotFoundException    if article does not exist.\n     * @param articleContentId      Id of the article content.  \n     * @param updatedArticle        Article details.\n     * @returns                     Updated article.\n     */\n    public async updateArticleById(articleContentId: number, updatedArticle: ArticleDto): Promise {\n        \n        const oldArticleContentEntity: ArticleContentEntity | null = await this.articleContentRepository.findOne({\n            where: {\n                id: articleContentId\n            },\n            relations: {\n                article: {\n                    tags: true\n                }\n            }\n        });\n\n        if (!oldArticleContentEntity) {\n            throw new NotFoundException(`Article with id ${articleContentId} not found.`);\n        }\n\n        // Update oldArticleContentEntity with data from body.\n        oldArticleContentEntity.title = updatedArticle.title;\n        oldArticleContentEntity.body = updatedArticle.body;\n        oldArticleContentEntity.dateOfPublication = updatedArticle.dateOfPublication ?? new Date();\n        oldArticleContentEntity.article.parent = updatedArticle.parent;\n        oldArticleContentEntity.article.active = updatedArticle.active;\n\n        if (updatedArticle.updatedTags) {\n            // Parse tags from request form.\n            let tagsFromDto: TagEntity[] = [];\n            try {\n                tagsFromDto = JSON.parse(updatedArticle.updatedTags);\n            } catch(e) {\n                this.logger.error(`[STORYBOARD_ARTICLE_SERVICE] Cannot parse tags from request. ${e}`);\n                throw new BadRequestException(`Cannot parse tags from request. ${updatedArticle.updatedTags}`);\n            }\n\n            // Find tags from database by ids from request.\n            oldArticleContentEntity.article.tags = await this.tagRepository.findBy({ \n                id: In(tagsFromDto.map(tag => tag.id)) \n            });\n        } else {\n            // If tags are not present, remove all tags from article.\n            oldArticleContentEntity.article.tags = [];\n        }\n\n        let coverImageToDelete: string | null = null;\n\n        // If cover image is present, update it.\n        if (updatedArticle.coverImage) {\n            // If cover image is updated, delete old one.\n            coverImageToDelete = oldArticleContentEntity.coverImage;\n\n            // New cover image.\n            oldArticleContentEntity.coverImage = updatedArticle.coverImage;\n        } else if (updatedArticle.coverImage === '') {\n\n            // If cover image is unset, delete it.\n            coverImageToDelete = oldArticleContentEntity.coverImage;\n            oldArticleContentEntity.coverImage = null;\n        }\n\n        const newArticleContentEntity: ArticleContentEntity = await this.articleContentRepository.save(oldArticleContentEntity);\n\n        // New entity is saved, we can remove old cover image.\n        // Do not await, we do not want to wait for this operation.\n        if (coverImageToDelete) {\n            this.fileService.removeFileFromSystem(coverImageToDelete);\n        }\n\n        return new ArticleDto(newArticleContentEntity);\n    }\n    \n    /**\n     * This method is used for updating article activity.\n     * \n     * @throws NotFoundException    if article does not exist.\n     * @param articleContentId  Id of the article content.\n     * @param activity          Activity of the article.\n     */\n    public async setArticleActivity(articleContentId: number, activity: boolean): Promise {\n        \n        const articleContentEntity: ArticleContentEntity | null = await this.articleContentRepository.findOne({\n            where: {\n                id: articleContentId\n            },\n            relations: {\n                article: true\n            }\n        });\n\n        if (!articleContentEntity) {\n            throw new NotFoundException(`Article with id ${articleContentId} not found.`);\n        }\n\n        await this.articleRepository.update(articleContentEntity.article.id, { active: activity });\n    }\n\n    public async exportArticles(): Promise {\n        const articles: ArticleContentEntity[] = await this.articleContentRepository.find({\n            relations: ['article', 'article.tags']\n        });\n\n        return this.excelService.exportArticles(articles.map(article => new ArticleDto(article)));\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                refreshAccessToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                signInUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                signOutUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                signUpUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Public\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshAccessToken(refreshToken: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Refresh access token with refresh token.'})@ApiUnauthorizedResponse({description: 'Invalid refresh token, please sign in.'})@HttpCode(200)@Post('refresh-token')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/auth/auth.controller.ts:94\n                \n            \n\n\n            \n                \n                    Refresh access token with refresh token.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Refresh token used for refresh access token.\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User ID, whose refresh token must be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        New access token and new refresh token.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Public\n                        signInUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    signInUser(username: string, password: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Sign in user.'})@ApiUnauthorizedResponse({description: 'Username or password is not correct.'})@ApiForbiddenResponse({description: 'User is not active.'})@UseGuards(undefined)@HttpCode(200)@Post('sign-in')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/auth/auth.controller.ts:56\n                \n            \n\n\n            \n                \n                    Sign in user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Username.\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Access token and refresh token.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Public\n                        signOutUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    signOutUser(request: JwtRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Sign out user. Delete refresh token from user.'})@ApiUnauthorizedResponse({description: 'JWT payload is not valid.'})@ApiNotFoundResponse({description: 'jwtPayload.userId is not provided.'})@ApiBearerAuth()@UseGuards(undefined)@HttpCode(200)@Post('sign-out')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/auth/auth.controller.ts:78\n                \n            \n\n\n            \n                \n                    Sign out user. Delete refresh token from user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                JwtRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request with JWT payload.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Public\n                        signUpUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUpUser(username: string, password: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Sign up new user. Used for admin panel.'})@ApiBadRequestResponse({description: 'Username or password is not provided.'})@ApiConflictResponse({description: 'Username is not unique.'})@HttpCode(200)@Post('sign-up')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n                    Sign up new user. Used for admin panel.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Username.\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Access token and refresh token.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    HttpCode,\n    Post,\n    Req,\n    UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { RequiredParameterPipe } from 'src/utils/pipes/required-parameter.pipe';\nimport { JwtRequest } from 'src/models/jwt-request.model';\nimport { ApiBadRequestResponse, ApiBearerAuth, ApiConflictResponse, ApiForbiddenResponse, ApiNotFoundResponse, ApiOperation, ApiTags, ApiUnauthorizedResponse } from '@nestjs/swagger';\n\n@ApiTags('Administration')\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService) {}\n\n    /**\n     * Sign up new user. Used for admin panel.\n     * \n     * @throws BadRequestException If username or password is not provided.\n     * @throws ConflictException If username is not unique.\n     * @param username  Username.\n     * @param password  Password.\n     * @returns         Access token and refresh token.\n     */\n    @ApiOperation({ summary: 'Sign up new user. Used for admin panel.' })\n    @ApiBadRequestResponse({ description: 'Username or password is not provided.' })\n    @ApiConflictResponse({ description: 'Username is not unique.' })\n    @HttpCode(200)\n    @Post('sign-up')\n    public signUpUser(\n        @Body('username', RequiredParameterPipe) username: string,\n        @Body('password', RequiredParameterPipe) password: string,\n    ): Promise {\n        return this.authService.signUpUser(username, password);\n    }\n\n    /**\n     * Sign in user.\n     * \n     * @throws UnauthorizedException If username or password is not correct.\n     * @throws ForbiddenException If user is not active.\n     * @param username  Username.\n     * @param password  Password.\n     * @returns         Access token and refresh token.\n     */\n    @ApiOperation({ summary: 'Sign in user.' })\n    @ApiUnauthorizedResponse({ description: 'Username or password is not correct.' })\n    @ApiForbiddenResponse({ description: 'User is not active.' })\n    @UseGuards(AuthGuard('local'))\n    @HttpCode(200)\n    @Post('sign-in')\n    public signInUser(\n        @Body('username', RequiredParameterPipe) username: string,\n        @Body('password', RequiredParameterPipe) password: string,\n    ): Promise {\n        return this.authService.signInUser(username);\n    }\n\n    /**\n     * Sign out user. Delete refresh token from user.\n     * \n     * @throws UnauthorizedException If JWT payload is not valid.\n     * @throws NotFoundException If jwtPayload.userId is not provided.\n     * @param request   Request with JWT payload.\n     * @returns\n     */\n    @ApiOperation({ summary: 'Sign out user. Delete refresh token from user.' })\n    @ApiUnauthorizedResponse({ description: 'JWT payload is not valid.' })\n    @ApiNotFoundResponse({ description: 'jwtPayload.userId is not provided.' })\n    @ApiBearerAuth()\n    @UseGuards(AuthGuard(['jwt']))\n    @HttpCode(200)\n    @Post('sign-out')\n    public signOutUser(@Req() request: JwtRequest): Promise {\n        return this.authService.signOutUser(request.jwtPayload);\n    }\n\n    /**\n     * Refresh access token with refresh token.\n     * \n     * @throws UnauthorizedException If refresh token is invalid, old.\n     * @param refreshToken  Refresh token used for refresh access token.\n     * @param userId        User ID, whose refresh token must be updated.\n     * @returns             New access token and new refresh token.\n     */\n    @ApiOperation({ summary: 'Refresh access token with refresh token.' })\n    @ApiUnauthorizedResponse({ description: 'Invalid refresh token, please sign in.' })\n    @HttpCode(200)\n    @Post('refresh-token')\n    public refreshAccessToken(\n        @Body('refreshToken', RequiredParameterPipe) refreshToken: string,\n        @Body('userId', RequiredParameterPipe) userId: number,\n    ): Promise {\n        return this.authService.refreshAccessToken(userId, refreshToken);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                cryptNewPassword\n                            \n                            \n                                    Private\n                                generateRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                getActiveUser\n                            \n                            \n                                    Private\n                                    Async\n                                passwordsAreEqual\n                            \n                            \n                                    Public\n                                    Async\n                                refreshAccessToken\n                            \n                            \n                                    Private\n                                setAndReturnNewRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                signInUser\n                            \n                            \n                                    Public\n                                    Async\n                                signOutUser\n                            \n                            \n                                    Public\n                                    Async\n                                signUpUser\n                            \n                            \n                                    Public\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userEntityRepository: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/endpoints/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        cryptNewPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    cryptNewPassword(newPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/auth/auth.service.ts:201\n                \n            \n\n\n            \n                \n                    Crypt new password with bcrypt.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        New user password.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Crypted password.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateRefreshToken()\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/auth/auth.service.ts:191\n                \n            \n\n\n            \n                \n                    Generate random refresh token.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Refresh token.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getActiveUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getActiveUser(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/auth/auth.service.ts:157\n                \n            \n\n\n            \n                \n                    Get user by username or id. If user is not active, throw ForbiddenException.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User username.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        User entity.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        passwordsAreEqual\n                        \n                    \n                \n            \n            \n                \n                    \n                    passwordsAreEqual(plainPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/auth/auth.service.ts:212\n                \n            \n\n\n            \n                \n                    Compare plain password with hashed password.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    plainPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password.\n\n                                    \n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hashed password.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        True if passwords are equal, otherwise false.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshAccessToken(userId: number, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/auth/auth.service.ts:102\n                \n            \n\n\n            \n                \n                    Refresh access token with refresh token. If refresh token is invalid, throw UnauthorizedException.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User ID.\n\n                                    \n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Refresh token.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        New access token and new refresh token.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        setAndReturnNewRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setAndReturnNewRefreshToken(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/auth/auth.service.ts:180\n                \n            \n\n\n            \n                \n                    Set new refresh token ro user object and return it.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User entity to update.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        New refresh token.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        signInUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    signInUser(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/auth/auth.service.ts:58\n                \n            \n\n\n            \n                \n                    Sign in user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User username.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Access token and refresh token.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        signOutUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    signOutUser(jwtPayload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/auth/auth.service.ts:80\n                \n            \n\n\n            \n                \n                    Sign out user. Delete refresh token and expiration date.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jwtPayload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JWT payload with user ID.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        signUpUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUpUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/auth/auth.service.ts:28\n                \n            \n\n\n            \n                \n                    Sign up user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User username. Must be unique.\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User password.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Access token and refresh token.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, validatedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/auth/auth.service.ts:134\n                \n            \n\n\n            \n                \n                    Validate user with username and password.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User username.\n\n                                    \n                                \n                                \n                                    validatedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User password.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        True if user is valid, otherwise false.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, ConflictException, ForbiddenException, Injectable, NotFoundException, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserEntity } from 'src/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { JwtPayload } from 'src/models/jwt-payload.model';\nimport { REFRESH_TOKEN_SIZE } from 'src/constants';\nimport * as bcrypt from 'bcrypt';\nimport * as moment from 'moment';\nimport * as randomToken from 'rand-token';\n\n@Injectable()\nexport class AuthService {\n\n    constructor(\n        @InjectRepository(UserEntity) private readonly userEntityRepository: Repository,\n        private readonly jwtService: JwtService,\n    ) {\n    }\n\n    /**\n     * Sign up user.\n     * \n     * @param username  User username. Must be unique.\n     * @param password  User password.\n     * @returns         Access token and refresh token.\n     */\n    public async signUpUser(username: string, password: string): Promise {\n\n        if (!username || !password) {\n            throw new BadRequestException('Email or password is missing.');\n        }\n\n        const user: UserEntity | null = await this.userEntityRepository.findOne({\n            where: { username: username }\n        });\n\n        if (user) {\n            throw new ConflictException(`User '${username}' already exists.`);\n        } else {\n            await this.userEntityRepository.insert({\n                username: username,\n                password: await this.cryptNewPassword(password),\n                // Just for testing. In real app, user should be inactive and after username verification, user should be activated.\n                active: true,\n            });\n        }\n\n        return this.signInUser(username);\n    }\n\n    /**\n     * Sign in user.\n     * \n     * @param username  User username.\n     * @returns         Access token and refresh token.\n     */\n    public async signInUser(username: string): Promise {\n        const user: UserEntity = await this.getActiveUser(username);\n\n        const refreshToken: string = this.setAndReturnNewRefreshToken(user);\n\n        await this.userEntityRepository.save(user);\n\n        const payload: JwtPayload = {\n            userId: user.id,\n        };\n\n        return {\n            accessToken: this.jwtService.sign(payload),\n            refreshToken: refreshToken,\n        };\n    }\n\n    /**\n     * Sign out user. Delete refresh token and expiration date.\n     * \n     * @param jwtPayload    JWT payload with user ID.\n     */\n    public async signOutUser(jwtPayload: JwtPayload): Promise {\n        const userId: number = jwtPayload.userId;\n        if (userId === undefined) {\n            throw new NotFoundException('Cannot find user.');\n        }\n\n        const userEntity: UserEntity | null = await this.userEntityRepository.findOneBy({ id: userId });\n\n        if (userEntity) {\n            userEntity.refreshToken = null;\n            userEntity.expirationDate = null;\n            await this.userEntityRepository.save(userEntity);\n        }\n    }\n\n    /**\n     * Refresh access token with refresh token. If refresh token is invalid, throw UnauthorizedException.\n     * \n     * @param userId        User ID.\n     * @param refreshToken  Refresh token.\n     * @returns             New access token and new refresh token.\n     */\n    public async refreshAccessToken(userId: number, refreshToken: string): Promise {\n        const user: UserEntity | null = await this.userEntityRepository.findOne({\n            where: { id: userId, refreshToken: refreshToken }\n        });\n\n        const now: Date = moment().toDate();\n\n        if (!user || !user.expirationDate || now > user.expirationDate) {\n            throw new UnauthorizedException('Invalid refresh token, please sign in.');\n        }\n\n        const newRefreshToken: string = this.setAndReturnNewRefreshToken(user);\n        \n        await this.userEntityRepository.save(user);\n\n        const payload: JwtPayload = {\n            userId: user.id,\n        };\n\n        return {\n            accessToken: this.jwtService.sign(payload, { expiresIn: '1d' }),\n            refreshToken: newRefreshToken\n        };\n    }\n\n    /**\n     * Validate user with username and password.\n     * \n     * @param username          User username.\n     * @param validatedPassword User password. \n     * @returns                 True if user is valid, otherwise false.\n     */\n    public async validateUser(username: string, validatedPassword: string): Promise {\n        const user: UserEntity | null = await this.userEntityRepository.findOne({\n            where: { username: username },\n            select: ['password', 'id']\n        });\n\n        if (!user || !user.password) {\n            return false;\n        }\n\n        if (await this.passwordsAreEqual(validatedPassword, user.password)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Get user by username or id. If user is not active, throw ForbiddenException.\n     * \n     * @param username  User username.\n     * @param userId    User ID.\n     * @returns         User entity.\n     */\n    private async getActiveUser(username: string): Promise {\n\n        const user: UserEntity | null = await this.userEntityRepository.findOne({\n            where: { username: username }\n        });\n\n        if (!user) {\n            throw new NotFoundException(`User cannot be found.`);\n        }\n\n        if (!user.active) {\n            throw new ForbiddenException(`User is not active.`);\n        }\n\n        return user;\n    }\n\n    /**\n     * Set new refresh token ro user object and return it.\n     * \n     * @param user  User entity to update.\n     * @returns     New refresh token.\n     */\n    private setAndReturnNewRefreshToken(user: UserEntity): string {\n        user.refreshToken = this.generateRefreshToken();\n        user.expirationDate = moment().add(30, 'd').toDate();\n        return user.refreshToken;\n    }\n\n    /**\n     * Generate random refresh token.\n     * \n     * @returns     Refresh token.\n     */\n    private generateRefreshToken(): string {\n        return randomToken.generate(REFRESH_TOKEN_SIZE);\n    }\n\n    /**\n     * Crypt new password with bcrypt.\n     * \n     * @param newPassword   New user password.\n     * @returns             Crypted password.\n     */\n    private async cryptNewPassword(newPassword: string): Promise {\n        return await bcrypt.hash(newPassword, await bcrypt.genSalt());\n    }\n\n    /**\n     * Compare plain password with hashed password.\n     * \n     * @param plainPassword     Plain password.\n     * @param hashedPassword    Hashed password.\n     * @returns                 True if passwords are equal, otherwise false.\n     */\n    private async passwordsAreEqual(plainPassword: string, hashedPassword: string): Promise {\n        return await bcrypt.compare(plainPassword, hashedPassword);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BadValidationRequestException.html":{"url":"classes/BadValidationRequestException.html","title":"class - BadValidationRequestException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BadValidationRequestException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/exceptions/bad-validation-request.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                An error that will be returned if some mandatory attribute is missing from the Article.\nThe error is returned by the validator that checks the request.\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errors: ValidationError[])\n                    \n                \n                        \n                            \n                                Defined in src/models/exceptions/bad-validation-request.exception.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    ValidationError[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException, ValidationError, ValidationPipeOptions } from '@nestjs/common';\n\n/**\n  * An error that will be returned if some mandatory attribute is missing from the Article.\n  * The error is returned by the validator that checks the request.\n  */\nexport class BadValidationRequestException extends BadRequestException {\n    constructor(errors: ValidationError[]) {\n        const properties: string[] = [];\n\n        // List of mandatory attributes that are missing.\n        errors.forEach((error: ValidationError) => {\n            properties.push(error.property);\n        });\n\n        const message: string = properties.length == 0\n            ? 'Unexpected error while validating request parameters.'\n            : 'Missing mandatory parameter(s): ' + properties.join(', ');\n\n        super({\n            response: 0,\n            message: message,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BasicStrategy.html":{"url":"injectables/BasicStrategy.html","title":"injectable - BasicStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BasicStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/auth/strategies/basic.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Basic strategy for authorization. Authorization header must contain username and password.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/endpoints/auth/strategies/basic.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/auth/strategies/basic.strategy.ts:21\n                \n            \n\n\n            \n                \n                    Validate username and password from Authorization header.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { BasicStrategy as Strategy } from 'passport-http';\n\n/**\n * Basic strategy for authorization. Authorization header must contain username and password.\n * \n */\n@Injectable()\nexport class BasicStrategy extends PassportStrategy(Strategy, 'basic') {\n    constructor() {\n        super();\n    }\n\n    /**\n     * Validate username and password from Authorization header.\n     * @param username\n     * @param password\n     * @returns \n     */\n    public async validate(username: string, password: string): Promise {\n        if (\n            process.env.BACKEND_API_KEY &&\n            process.env.BACKEND_API_SECRET &&\n            username === process.env.BACKEND_API_KEY &&\n            password === process.env.BACKEND_API_SECRET\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckArticleType.html":{"url":"classes/CheckArticleType.html","title":"class - CheckArticleType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckArticleType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pipes/check-article-type.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Pipe for checking article type. If type is not valid, BadRequestException is thrown.\n\n            \n\n\n            \n                Implements\n            \n            \n                        PipeTransform\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: ArticleTypeEnum, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/pipes/check-article-type.pipe.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ArticleTypeEnum\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentMetadata, BadRequestException, PipeTransform } from '@nestjs/common';\nimport { ArticleTypeEnum } from 'src/models/enums/article-type.enum';\n\n/**\n * Pipe for checking article type. If type is not valid, BadRequestException is thrown.\n */\nexport class CheckArticleType implements PipeTransform {\n    public transform(value: ArticleTypeEnum, metadata: ArgumentMetadata): ArticleTypeEnum {\n\n        for (const articleType of Object.values(ArticleTypeEnum)) {\n            if (value === articleType) {\n                return articleType;\n            }\n        }\n        \n        throw new BadRequestException(`Unsupported article type: ${value}`);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CronJobService.html":{"url":"injectables/CronJobService.html","title":"injectable - CronJobService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CronJobService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/cron-job.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                checkAndSendPushNotificationsCronJob\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pushNotificationService: PushNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/services/cron-job.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pushNotificationService\n                                                  \n                                                        \n                                                                        PushNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Public\n                        Async\n                        checkAndSendPushNotificationsCronJob\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAndSendPushNotificationsCronJob()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_NOON)\n                \n            \n\n            \n                \n                    Defined in src/services/cron-job.service.ts:13\n                \n            \n\n\n            \n                \n                    Cron job for sending free daily cookie via push notifications.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { PushNotificationService } from 'src/endpoints/push-notification/push-notification.service';\n\n@Injectable()\nexport class CronJobService {\n    constructor(private readonly pushNotificationService: PushNotificationService) {}\n\n    /**\n     * Cron job for sending free daily cookie via push notifications.\n     */\n    @Cron(CronExpression.EVERY_DAY_AT_NOON)\n    public async checkAndSendPushNotificationsCronJob(): Promise {\n        this.pushNotificationService.sendCookieToRandomDevice();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomValidationPipe.html":{"url":"classes/CustomValidationPipe.html","title":"class - CustomValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pipes/validation.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Validate if request body is valid according to DTO.\n\n            \n\n            \n                Extends\n            \n            \n                    ValidationPipe\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/utils/pipes/validation.pipe.ts:7\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ValidationError, ValidationPipe } from '@nestjs/common';\nimport { BadValidationRequestException } from 'src/models/exceptions/bad-validation-request.exception';\n\n/**\n * Validate if request body is valid according to DTO.\n */\nexport class CustomValidationPipe extends ValidationPipe {\n    constructor() {\n        super({\n            transform: true,\n            exceptionFactory: (errors: ValidationError[]) => new BadValidationRequestException(errors),\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger, sentryService: SentryService, mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/email.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sentryService\n                                                  \n                                                        \n                                                                        SentryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(article: ArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/services/email.service.ts:21\n                \n            \n\n\n            \n                \n                    Send email about new article.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    article\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Article to send.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { ArticleDto } from 'src/models/dtos/article.dto';\nimport { SentryService } from './sentry.service';\nimport * as path from 'path';\nimport * as moment from 'moment';\n\n@Injectable()\nexport class EmailService {\n\n    constructor(@Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n                private readonly sentryService: SentryService,\n                private readonly mailerService: MailerService) {\n    }\n\n    /**\n     * Send email about new article.\n     * @param article   Article to send.\n     */\n    public async sendEmail(article: ArticleDto): Promise {\n        this.logger.log('info', `[EMAIL_SERVICE] Sending email about new article ${article.articleContentId}`);\n\n        this.mailerService.sendMail({\n            to: 'test@test.com',\n            subject: 'New article: ' + article.title,\n            template: 'new-article',\n            context: {\n                title: article.title,\n                body: article.body,\n                coverImage: article.coverImage,\n                dateOfPublication: moment(article.dateOfPublication).format('DD.MM.YYYY'),\n            },\n            attachments: [{\n                filename: 'best-news.png',\n                path: path.join(__dirname, '..', 'templates', 'assets', 'images', 'best-news.png'),\n                contentType: 'image/png',\n                cid: 'newsSmall',\n            }]\n        }).then(() => {\n            this.logger.log('info', `Email about new article ${article.articleContentId} was sent.`);\n        }).catch((error) => {\n            this.sentryService.captureException('[EMAIL_SERVICE_ERROR] Cannot send email.', `Email about new article (${article.articleContentId}-${article.title}) was not sent. Error: ${error}`);\n        });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorResponse.html":{"url":"classes/ErrorResponse.html","title":"class - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dtos/error-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                error\n                            \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Public\n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/error-response.dto.ts:6\n                        \n                    \n\n            \n                \n                    Error detail. Intended for developers.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/error-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    User-friendly error. Intended for users\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/error-response.dto.ts:16\n                        \n                    \n\n            \n                \n                    HTTP status code.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ErrorResponse {\n\n    /**\n     * Error detail. Intended for developers.\n     */\n    public error: string;\n\n    /**\n     * User-friendly error. Intended for users\n     */\n    public message: string;\n\n    /**\n     * HTTP status code.\n     */\n    public statusCode: number;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcelService.html":{"url":"injectables/ExcelService.html","title":"injectable - ExcelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExcelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/excel.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                XLS_COLUMN_ORDER\n                            \n                            \n                                    Private\n                                XLS_COLUMN_WIDTHS\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                articlesToAoA\n                            \n                            \n                                    Public\n                                exportArticles\n                            \n                            \n                                    Private\n                                sheetFromAoA\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        articlesToAoA\n                        \n                    \n                \n            \n            \n                \n                    \n                    articlesToAoA(articles: ArticleDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/services/excel.service.ts:58\n                \n            \n\n\n            \n                \n                    Convert articles to array of arrays. Rows and columns of excel.\nFirst row is column names - header.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articles\n                                    \n                                                ArticleDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Articles to convert.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [][]\n\n                    \n                    \n                        Array of arrays. Rows and columns of excel.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        exportArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    exportArticles(articles: ArticleDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/services/excel.service.ts:36\n                \n            \n\n\n            \n                \n                    Export articles to excel.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articles\n                                    \n                                                ArticleDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Articles to export.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Buffer\n\n                    \n                    \n                        Buffer with excel file.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        sheetFromAoA\n                        \n                    \n                \n            \n            \n                \n                    \n                    sheetFromAoA(rows: string[][], columnNames: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/services/excel.service.ts:87\n                \n            \n\n\n            \n                \n                    Create sheet from array of arrays. Rows and columns of excel.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rows\n                                    \n                                            string[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Array of arrays. Rows and columns of excel.\n\n                                    \n                                \n                                \n                                    columnNames\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Column names.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     WorkSheet\n\n                    \n                    \n                        Sheet.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        XLS_COLUMN_ORDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n        articleContentId: 'Id',\n        title: 'Title',\n        body: 'Body',\n        dateOfPublication: 'Date of publication',\n        articleType: 'Article type',\n        active: 'Active',\n        tags: 'Tags',\n    }\n                    \n                \n                    \n                        \n                                Defined in src/services/excel.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        XLS_COLUMN_WIDTHS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n        title: 20,\n        body: 50,\n    }\n                    \n                \n                    \n                        \n                                Defined in src/services/excel.service.ts:25\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { TagDto } from 'src/models/dtos/tag.dto';\nimport { WorkBook, WorkSheet } from 'xlsx';\nimport { LanguageEnum } from 'src/models/enums/language.enum';\nimport { ArticleDto } from 'src/models/dtos/article.dto';\n\nimport * as XLSX from 'xlsx';\nimport * as moment from 'moment';\n\n@Injectable()\nexport class ExcelService {\n\n    // Order of columns in excel and their names.\n    private XLS_COLUMN_ORDER: { [key: string]: string } = {\n        articleContentId: 'Id',\n        title: 'Title',\n        body: 'Body',\n        dateOfPublication: 'Date of publication',\n        articleType: 'Article type',\n        active: 'Active',\n        tags: 'Tags',\n    };\n\n    // Width of columns in excel.\n    private XLS_COLUMN_WIDTHS: { [key: string]: number } = {\n        title: 20,\n        body: 50,\n    };\n\n    /**\n     * Export articles to excel.\n     * \n     * @param articles  Articles to export. \n     * @returns         Buffer with excel file.\n     */\n    public exportArticles(articles: ArticleDto[]): Buffer {\n        const workbook: WorkBook = XLSX.utils.book_new();\n        let rows: string[][];\n        let sheet: WorkSheet;\n\n        // Create sheet for each language.\n        for (const language of Object.values(LanguageEnum)) {\n            rows = this.articlesToAoA(articles.filter((article: ArticleDto) => article.language === language));\n            sheet = this.sheetFromAoA(rows, this.XLS_COLUMN_ORDER);\n            XLSX.utils.book_append_sheet(workbook, sheet, 'Articles ' + language);\n        }\n\n        return XLSX.write(workbook, { type: 'buffer' });\n    }\n\n    /**\n     * Convert articles to array of arrays. Rows and columns of excel.\n     * First row is column names - header.\n     * \n     * @param articles  Articles to convert.\n     * @returns         Array of arrays. Rows and columns of excel.\n     */\n    private articlesToAoA(articles: ArticleDto[]): any[][] {\n        const columnNames: string[] = Object.values(this.XLS_COLUMN_ORDER);\n        const articleAttributes: string[] = Object.keys(this.XLS_COLUMN_ORDER);\n        const rows: any[][] = [\n            columnNames,\n            ...articles.map((content: ArticleDto) =>\n                articleAttributes.map((key: keyof ArticleDto) => {\n                    if (key === 'dateOfPublication') {\n                        if (content[key]) {\n                            return moment(content[key]).format('DD.MM.YYYY');\n                        }\n                    } else if (key === 'tags' && content[key]) {\n                        return (content[key] as TagDto[]).map(tag => tag.title).join(', ');\n                    } else {\n                        return content[key];\n                    }\n                }),\n            ),\n        ];\n        return rows;\n    }\n\n    /**\n     * Create sheet from array of arrays. Rows and columns of excel.\n     * \n     * @param rows          Array of arrays. Rows and columns of excel.\n     * @param columnNames   Column names.\n     * @returns             Sheet.\n     */\n    private sheetFromAoA(rows: string[][], columnNames: { [key: string]: string }): WorkSheet {\n        const sheet: WorkSheet = XLSX.utils.aoa_to_sheet(rows, {\n            cellStyles: true,\n            cellDates: true,\n            dateNF: 'dd mmm yyyy;@'\n        });\n        const orderKeys: Array = Object.keys(columnNames);\n        const wscols: Array = orderKeys.map((key: keyof ArticleDto) => ({ width: this.XLS_COLUMN_WIDTHS[key] || 12 }));\n        const wsrows: Array = rows.map(() => ({ hpx: 20 }));\n        sheet['!cols'] = wscols;\n        sheet['!rows'] = wsrows;\n        return sheet;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileService.html":{"url":"injectables/FileService.html","title":"injectable - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/file.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                multerOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                fileFilter\n                            \n                            \n                                    Static\n                                getRandomName\n                            \n                            \n                                    Public\n                                    Async\n                                removeFileFromSystem\n                            \n                            \n                                    Public\n                                    Async\n                                resizeImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sentryService: SentryService, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/services/file.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sentryService\n                                                  \n                                                        \n                                                                        SentryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        fileFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    fileFilter(_req: any, file: Express.Multer.File, cb: (error: Error | null,acceptFile: boolean) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/services/file.service.ts:51\n                \n            \n\n\n            \n                \n                    Filter files that have not allowed extension.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cb\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getRandomName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRandomName(originalname: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/file.service.ts:42\n                \n            \n\n\n            \n                \n                    Generate random name for file.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    originalname\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Original name of file to get extension.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Random name with extension.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        removeFileFromSystem\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFileFromSystem(fileUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/file.service.ts:87\n                \n            \n\n\n            \n                \n                    Remove file from system.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resizeImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    resizeImage(path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/file.service.ts:65\n                \n            \n\n\n            \n                \n                    Resize image to 360px width. Image size is reduced.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path to image.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        True if image was resized, false otherwise.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        multerOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MulterOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n        storage: diskStorage({\n            destination: DIRECTORY_IMAGES,\n            filename: (_req, file, cb) => {\n                return cb(null, FileService.getRandomName(file.originalname));\n            },\n        }),\n        fileFilter: FileService.fileFilter,\n        limits: {\n            fileSize: MAX_FILE_SIZE\n        }\n    }\n                    \n                \n                    \n                        \n                                Defined in src/services/file.service.ts:24\n                        \n                    \n\n            \n                \n                    Options for multer.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable, Logger } from '@nestjs/common';\nimport { MulterOptions } from '@nestjs/platform-express/multer/interfaces/multer-options.interface';\nimport { diskStorage } from 'multer';\n\nimport { DIRECTORY_IMAGES, MAX_FILE_SIZE } from 'src/constants';\nimport { v4 as uuidv4 } from 'uuid';\nimport { extname } from 'path';\nimport * as sharp from 'sharp';\nimport { SentryService } from './sentry.service';\nimport { SERVER_URL } from 'src/app.module';\nimport * as fs from 'fs';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\n\n@Injectable()\nexport class FileService {\n\n    constructor(private readonly sentryService: SentryService,\n                @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger) {\n    }\n\n    /**\n     * Options for multer.\n     */\n    public static multerOptions: MulterOptions = {\n        storage: diskStorage({\n            destination: DIRECTORY_IMAGES,\n            filename: (_req, file, cb) => {\n                return cb(null, FileService.getRandomName(file.originalname));\n            },\n        }),\n        fileFilter: FileService.fileFilter,\n        limits: {\n            fileSize: MAX_FILE_SIZE\n        }\n    };\n    \n    /**\n     * Generate random name for file.\n     * @param originalname  Original name of file to get extension.\n     * @returns             Random name with extension.\n     */\n    public static getRandomName(originalname: string): string {\n        const randomName: string = uuidv4();\n        return `${randomName}${extname(originalname)}`;\n    }\n\n    /**\n     * Filter files that have not allowed extension.\n     * \n     */\n    private static fileFilter(_req: any, file: Express.Multer.File, cb: (error: Error | null, acceptFile: boolean) => void): void {\n        const allowedFileTypes: string[] = ['image/png', 'image/jpeg', 'image/gif'];\n\n        if (!allowedFileTypes.includes(file.mimetype)) {\n            return cb(new BadRequestException('Only JPG, JPEG, PNG and GIF files are allowed.'), false);\n        }\n        return cb(null, true);\n    }\n\n    /**\n     * Resize image to 360px width. Image size is reduced.\n     * @param path  Path to image.\n     * @returns     True if image was resized, false otherwise.\n     */\n    public async resizeImage(path: string): Promise {\n        const buffer: Buffer = await sharp(path)\n            .resize({\n                width: 360,\n                fit: 'inside',\n            })\n            .toBuffer();\n\n        return sharp(buffer).toFile(path)\n            .then(() => {\n                return true;\n            }).catch((error: Error) => {\n                this.sentryService.captureException('Error while resizing image.', error);\n                return false;\n            });\n    }\n\n    /**\n     * Remove file from system.\n     * @param fileUrl \n     * @returns \n     */\n    public async removeFileFromSystem(fileUrl: string): Promise {\n        if (!fileUrl) {\n            return true;\n        }\n        return new Promise((resolve) => {\n            let oldDataRelativeUrl: string = '';\n\n            // If fileUrl starts with SERVER_URL, then remove it.\n            if (fileUrl.startsWith(SERVER_URL)) {\n                oldDataRelativeUrl = fileUrl.replace(SERVER_URL, '');\n            }\n\n            // If fileUrl starts with '/', then remove it.\n            if (oldDataRelativeUrl.startsWith('/')) {\n                oldDataRelativeUrl = oldDataRelativeUrl.replace('/', '');\n            }\n\n            fs.unlink(oldDataRelativeUrl, (error) => {\n                if (error) {\n                    this.logger.error(`[FileService] Cannot delete file: ${fileUrl}`, error);\n                    resolve(false);\n                } else {\n                    this.logger.log('info', `[FileService] File deleted: ${fileUrl}`);\n                    resolve(true);\n                }\n            });\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/http-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Error handler catching only HTTP exceptions.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/filters/http-exception.filter.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        catch\n                        \n                    \n                \n            \n            \n                \n                    \n                    catch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/http-exception.filter.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException, Inject, Logger } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\n\n/**\n * Error handler catching only HTTP exceptions.\n */\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n\n    constructor(@Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger) { }\n\n    public catch(exception: HttpException, host: ArgumentsHost): void {\n        const ctx: HttpArgumentsHost = host.switchToHttp();\n        const response: any = ctx.getResponse();\n        const request: any = ctx.getRequest();\n        const status: number = exception.getStatus();\n\n        response\n            .status(status)\n            .json({\n                statusCode: status,\n                message: exception.message,\n                error: exception.message,\n            });\n\n        this.logger.error(`HttpException ${status}: ${request.url}`);\n        this.logger.error(exception.stack);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/jwt-payload.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n    userId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtRequest.html":{"url":"interfaces/JwtRequest.html","title":"interface - JwtRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/jwt-request.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            jwtPayload\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        jwtPayload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwtPayload:         JwtPayload\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         JwtPayload\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { JwtPayload } from './jwt-payload.model';\n\nexport interface JwtRequest extends Request {\n    jwtPayload: JwtPayload; // Payload added during jwt authentication (username/id)\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/endpoints/auth/strategies/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/auth/strategies/jwt.strategy.ts:23\n                \n            \n\n\n            \n                \n                    Validate user from JWT token.\nIf user is not found, throw UnauthorizedException.\nIf user is not active, throw ForbiddenException.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserEntity } from 'src/entities/user.entity';\nimport { JwtPayload } from 'src/models/jwt-payload.model';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n    constructor(@InjectRepository(UserEntity) private readonly userEntityRepository: Repository) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: process.env.JWT_SECRET\n        });\n    }\n\n    /**\n     * Validate user from JWT token.\n     * If user is not found, throw UnauthorizedException.\n     * If user is not active, throw ForbiddenException.\n     */\n    public async validate(payload: any): Promise {\n        const user: UserEntity | null = await this.userEntityRepository.findOne(\n            {\n                where: { id: payload.userId },\n                select: ['active', 'id']\n            });\n\n        if (!user) {\n            throw new UnauthorizedException('This endpoint can access only administrators.');\n        }\n\n        if (!user.active) {\n            throw new ForbiddenException(`User is not active.`);\n        }\n\n        return { userId: payload.userId };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/auth/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/endpoints/auth/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/auth/strategies/local.strategy.ts:26\n                \n            \n\n\n            \n                \n                    Validate user from request.\nIf password is incorrect, throw UnauthorizedException.\nValidator takes from request JSON default parameters username and password.\nSo you can't send in JSON parameters email and password. Otherwise you will get response 401.\nOr you can set validator how parameters will be named.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Username.\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        True if user is valid, otherwise false.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n\n    constructor(private readonly authService: AuthService) {\n        super();\n    }\n\n    /**\n     * Validate user from request.\n     * If password is incorrect, throw UnauthorizedException.\n     * Validator takes from request JSON default parameters `username` and `password`.\n     * So you can't send in JSON parameters `email` and `password`. Otherwise you will get response 401.\n     * Or you can set validator how parameters will be named.\n     * \n     * @throws {BadRequestException} If username or password is missing.\n     * @throws {UnauthorizedException} If username or password is incorrect.\n     * @param username  Username.\n     * @param password  Password.\n     * @returns         True if user is valid, otherwise false.\n     */\n    public async validate(username: string, password: string): Promise {\n\n        if (!username || !password) {\n            throw new BadRequestException('Email or password is missing.');\n        }\n\n        const success: boolean = await this.authService.validateUser(username, password);\n        if (!success) {\n            throw new UnauthorizedException('Email or password is incorrect.');\n        }\n        \n        return true;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Migrations1691261966905.html":{"url":"classes/Migrations1691261966905.html","title":"class - Migrations1691261966905","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Migrations1691261966905\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1691261966905-migrations.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Migrations1691261966905'\n                    \n                \n                    \n                        \n                                Defined in src/migrations/1691261966905-migrations.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1691261966905-migrations.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1691261966905-migrations.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Migrations1691261966905 implements MigrationInterface {\n    public name: string = 'Migrations1691261966905'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`tag\\` (\\`id\\` varchar(255) NOT NULL, \\`language\\` enum ('cs', 'en') NOT NULL, \\`title\\` varchar(255) NOT NULL, \\`order\\` int NOT NULL DEFAULT '10', PRIMARY KEY (\\`id\\`, \\`language\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`article\\` (\\`id\\` int NOT NULL AUTO_INCREMENT, \\`article_type\\` enum ('news', 'story') NOT NULL, \\`active\\` tinyint NOT NULL DEFAULT 1, \\`parent\\` int NULL, \\`timestamp\\` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`article_content\\` (\\`id\\` int NOT NULL AUTO_INCREMENT, \\`article_id\\` int NOT NULL, \\`language\\` enum ('cs', 'en') NOT NULL, \\`title\\` varchar(255) NOT NULL, \\`body\\` longtext NOT NULL, \\`coverImage\\` varchar(255) NULL, \\`date_of_publication\\` datetime NOT NULL, INDEX \\`language\\` (\\`language\\`), INDEX \\`date_of_publication_idx\\` (\\`date_of_publication\\`), FULLTEXT INDEX \\`IDX_fulltext\\` (\\`title\\`, \\`body\\`), INDEX \\`article_id\\` (\\`article_id\\`), PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`push_token\\` (\\`token\\` varchar(255) NOT NULL, \\`language\\` enum ('cs', 'en') NOT NULL DEFAULT 'cs', \\`created_at\\` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP, \\`updated_at\\` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (\\`token\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`article__tag\\` (\\`article_id\\` int NOT NULL, \\`tag_id\\` varchar(255) NOT NULL, \\`tag_language\\` enum ('cs', 'en') NOT NULL, INDEX \\`IDX_74fd901c12ea1b6d4eea6885d2\\` (\\`article_id\\`), INDEX \\`IDX_5a8ded7416c4f8d2ec4c0d6b1f\\` (\\`tag_id\\`, \\`tag_language\\`), PRIMARY KEY (\\`article_id\\`, \\`tag_id\\`, \\`tag_language\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`article\\` ADD CONSTRAINT \\`FK_c27e451a84c599d6164080b0f7a\\` FOREIGN KEY (\\`parent\\`) REFERENCES \\`article\\`(\\`id\\`) ON DELETE RESTRICT ON UPDATE RESTRICT`);\n        await queryRunner.query(`ALTER TABLE \\`article_content\\` ADD CONSTRAINT \\`FK_695e2a3fb3e8f1995d703d5b91c\\` FOREIGN KEY (\\`article_id\\`) REFERENCES \\`article\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`article__tag\\` ADD CONSTRAINT \\`FK_74fd901c12ea1b6d4eea6885d2c\\` FOREIGN KEY (\\`article_id\\`) REFERENCES \\`article\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE CASCADE`);\n        await queryRunner.query(`ALTER TABLE \\`article__tag\\` ADD CONSTRAINT \\`FK_5a8ded7416c4f8d2ec4c0d6b1f4\\` FOREIGN KEY (\\`tag_id\\`, \\`tag_language\\`) REFERENCES \\`tag\\`(\\`id\\`,\\`language\\`) ON DELETE CASCADE ON UPDATE CASCADE`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`article__tag\\` DROP FOREIGN KEY \\`FK_5a8ded7416c4f8d2ec4c0d6b1f4\\``);\n        await queryRunner.query(`ALTER TABLE \\`article__tag\\` DROP FOREIGN KEY \\`FK_74fd901c12ea1b6d4eea6885d2c\\``);\n        await queryRunner.query(`ALTER TABLE \\`article_content\\` DROP FOREIGN KEY \\`FK_695e2a3fb3e8f1995d703d5b91c\\``);\n        await queryRunner.query(`ALTER TABLE \\`article\\` DROP FOREIGN KEY \\`FK_c27e451a84c599d6164080b0f7a\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_5a8ded7416c4f8d2ec4c0d6b1f\\` ON \\`article__tag\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_74fd901c12ea1b6d4eea6885d2\\` ON \\`article__tag\\``);\n        await queryRunner.query(`DROP TABLE \\`article__tag\\``);\n        await queryRunner.query(`DROP TABLE \\`push_token\\``);\n        await queryRunner.query(`DROP INDEX \\`article_id\\` ON \\`article_content\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_fulltext\\` ON \\`article_content\\``);\n        await queryRunner.query(`DROP INDEX \\`date_of_publication_idx\\` ON \\`article_content\\``);\n        await queryRunner.query(`DROP INDEX \\`language\\` ON \\`article_content\\``);\n        await queryRunner.query(`DROP TABLE \\`article_content\\``);\n        await queryRunner.query(`DROP TABLE \\`article\\``);\n        await queryRunner.query(`DROP TABLE \\`tag\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Migrations1691666064778.html":{"url":"classes/Migrations1691666064778.html","title":"class - Migrations1691666064778","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Migrations1691666064778\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1691666064778-migrations.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Migrations1691666064778'\n                    \n                \n                    \n                        \n                                Defined in src/migrations/1691666064778-migrations.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1691666064778-migrations.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations/1691666064778-migrations.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Migrations1691666064778 implements MigrationInterface {\n    public name: string = 'Migrations1691666064778'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE IF NOT EXISTS \\`user\\` (\\`id\\` int NOT NULL AUTO_INCREMENT, \\`username\\` varchar(255) NOT NULL, \\`password\\` varchar(255) NOT NULL, \\`active\\` tinyint NOT NULL DEFAULT 0, \\`refresh_token\\` varchar(32) NULL, \\`expiration_date\\` timestamp NULL, UNIQUE INDEX \\`IDX_78a916df40e02a9deb1c4b75ed\\` (\\`username\\`), PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`DROP INDEX \\`IDX_78a916df40e02a9deb1c4b75ed\\` ON \\`user\\``);\n        await queryRunner.query(`DROP TABLE \\`user\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PushNotificationController.html":{"url":"controllers/PushNotificationController.html","title":"controller - PushNotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PushNotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/push-notification/push-notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                push-notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                deleteToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                saveToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Public\n                        Async\n                        deleteToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteToken(token: PushTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete token for push notifications.'})@Delete('token')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/push-notification/push-notification.controller.ts:33\n                \n            \n\n\n            \n                \n                    Delete token for push notifications.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                PushTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Token to delete.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Public\n                        Async\n                        saveToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveToken(token: PushTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Save token for push notifications.'})@HttpCode(200)@Post('token')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/push-notification/push-notification.controller.ts:23\n                \n            \n\n\n            \n                \n                    Save token for push notifications.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                PushTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Token to save.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, HttpCode, Post, UseGuards } from '@nestjs/common';\nimport { PushNotificationService } from './push-notification.service';\nimport { ApiBasicAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { PushTokenDto } from 'src/models/dtos/token.dto';\nimport { AuthGuard } from '@nestjs/passport';\n\n@ApiBasicAuth()\n@ApiTags('Application')\n@UseGuards(AuthGuard(['basic']))\n@Controller('push-notifications')\nexport class PushNotificationController {\n\n    constructor(private readonly pushNotificationService: PushNotificationService) {\n    }\n\n    /**\n     * Save token for push notifications.\n     * @param token     Token to save.\n     */\n    @ApiOperation({ summary: 'Save token for push notifications.' })\n    @HttpCode(200)\n    @Post('token')\n    public async saveToken(@Body() token: PushTokenDto): Promise {\n        return this.pushNotificationService.saveToken(token);\n    }\n\n    /**\n     * Delete token for push notifications.\n     * @param token     Token to delete.\n     */\n    @ApiOperation({ summary: 'Delete token for push notifications.' })\n    @Delete('token')\n    public async deleteToken(@Body() token: PushTokenDto): Promise {\n        return this.pushNotificationService.deleteToken(token);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PushNotificationService.html":{"url":"injectables/PushNotificationService.html","title":"injectable - PushNotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PushNotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/push-notification/push-notification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteToken\n                            \n                            \n                                    Public\n                                    Async\n                                saveToken\n                            \n                            \n                                    Public\n                                    Async\n                                sendCookieToRandomDevice\n                            \n                            \n                                    Public\n                                    Async\n                                sendPushNotificationToTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger, pushTokenRepository: Repository, i18n: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/endpoints/push-notification/push-notification.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pushTokenRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                    I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteToken(token: PushTokenDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/push-notification/push-notification.service.ts:33\n                \n            \n\n\n            \n                \n                    Delete token for push notifications.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                PushTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        saveToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveToken(token: PushTokenDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/push-notification/push-notification.service.ts:25\n                \n            \n\n\n            \n                \n                    Save token for push notifications.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                PushTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Token to save.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendCookieToRandomDevice\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendCookieToRandomDevice()\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/push-notification/push-notification.service.ts:72\n                \n            \n\n\n            \n                \n                    Send push notification to random device. Used as example.\nMobile app does not have user authentication, so we cannot send push notification to specific user.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendPushNotificationToTopic\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPushNotificationToTopic(article: ArticleContentEntity, language: LanguageEnum)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/push-notification/push-notification.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n                                    \n                                                ArticleContentEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger } from '@nestjs/common';\nimport { TokenMessage, TopicMessage } from 'firebase-admin/lib/messaging/messaging-api';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { I18nService } from 'nestjs-i18n';\nimport { LanguageEnum } from 'src/models/enums/language.enum';\nimport { ArticleContentEntity } from 'src/entities/article-content.entity';\nimport * as firebaseAdmin from 'firebase-admin';\nimport { PushTokenDto } from 'src/models/dtos/token.dto';\nimport { PushTokenEntity } from 'src/entities/push-token.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class PushNotificationService {\n\n    constructor(@Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n                @InjectRepository(PushTokenEntity) private readonly pushTokenRepository: Repository,\n                private readonly i18n: I18nService) {\n    }\n    \n    /**\n     * Save token for push notifications.\n     * @param token     Token to save.\n     */\n    public async saveToken(token: PushTokenDto): Promise {\n        await this.pushTokenRepository.save({ token: token.token, language: token.language, updatedAt: new Date() });\n    }\n\n    /**\n     * Delete token for push notifications.\n     * @param token \n     */\n    public async deleteToken(token: PushTokenDto): Promise {\n        await this.pushTokenRepository.delete({ token: token.token });\n    }\n\n    public async sendPushNotificationToTopic(article: ArticleContentEntity, language: LanguageEnum): Promise {\n        const message: TopicMessage = {\n            topic: 'new-article-' + language,\n            notification: {\n                title: this.i18n.translate('data.PUSH_NOTIFICATION_TITLE', { lang: language }),\n                body: this.i18n.translate('data.PUSH_NOTIFICATION_BODY', {\n                    lang: language,\n                    // Do not send whole article body, just first 255 characters.\n                    args: { body: article.body.length > 252 ? article.body.substring(0, 252) + '...' : article.body }\n                })\n            },\n            data: {\n                articleId: article.id + '',\n                articleType: article.article.articleType\n            },\n            android: {\n                priority: 'high',\n                notification: {\n                    sound: 'default',\n                    clickAction: 'FLUTTER_NOTIFICATION_CLICK',\n                    icon: 'notification_icon',\n                },\n            },\n        };\n\n        // Just for testing, private key is not included in repository.\n        const messageId: string = await firebaseAdmin.messaging().send(message);\n        this.logger.log('info', `[PUSH_NOTIFICATION_SERVICE] Push notification sent: ${messageId}`);\n    }\n\n    /**\n     * Send push notification to random device. Used as example.\n     * Mobile app does not have user authentication, so we cannot send push notification to specific user.\n     * @returns \n     */\n    public async sendCookieToRandomDevice(): Promise {\n        const pushTokens: PushTokenEntity[] = await this.pushTokenRepository.find();\n        \n        if (pushTokens.length === 0) {\n            return;\n        }\n\n        const randomToken: PushTokenEntity = pushTokens[Math.floor(Math.random() * pushTokens.length)];\n\n        const message: TokenMessage = {\n            token: randomToken.token,\n            notification: {\n                title: this.i18n.translate('data.PUSH_NOTIFICATION_TITLE_COOKIE', { lang: randomToken.language }),\n                body: this.i18n.translate('data.PUSH_NOTIFICATION_BODY_COOKIE', { lang: randomToken.language })\n            },\n            android: {\n                notification: {\n                    clickAction: 'FLUTTER_NOTIFICATION_CLICK',\n                    icon: 'notification_icon',\n                },\n            },\n        };\n\n        this.logger.log('info', `[PUSH_NOTIFICATION_SERVICE] Send push notification: ${JSON.stringify(message)}`);\n        firebaseAdmin.messaging().send(message)\n            .catch((error) => {\n                this.logger.log('error', `[PUSH_NOTIFICATION_SERVICE] Error while sending push notification: ${error}`);\n\n                // If error occurs, remove token from database.\n                this.deleteToken({ token: randomToken.token, language: randomToken.language });\n            });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PushTokenDto.html":{"url":"classes/PushTokenDto.html","title":"class - PushTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PushTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dtos/token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                language\n                            \n                            \n                                    Public\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LanguageEnum\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/token.dto.ts:13\n                        \n                    \n\n            \n                \n                    Language of the device.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/token.dto.ts:8\n                        \n                    \n\n            \n                \n                    Device push token generated by FCM.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { LanguageEnum } from '../enums/language.enum';\n\nexport class PushTokenDto {\n\n    /**\n     * Device push token generated by FCM.\n     */\n    public token: string;\n\n    /**\n     * Language of the device.\n     */\n    public language: LanguageEnum;\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PushTokenEntity.html":{"url":"entities/PushTokenEntity.html","title":"entity - PushTokenEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PushTokenEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/push-token.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity for storing push tokens.\nMobile application does not have user accounts, so sending push notifications to a specific user does not make sense.\nIt is only for purpose of sample application. We will send push notication (daily cookie :D) to a random device (token).\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createdAt\n                            \n                            \n                                    \n                                    Public\n                                language\n                            \n                            \n                                    \n                                    Public\n                                token\n                            \n                            \n                                    \n                                    Public\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('datetime', {name: 'created_at', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/push-token.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LanguageEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('enum', {enum: LanguageEnum, default: DEFAULT_LANGUAGE})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/push-token.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/push-token.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('datetime', {name: 'updated_at', default: () => CURRENT_TIMESTAMP, onUpdate: 'CURRENT_TIMESTAMP'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/push-token.entity.ts:28\n                        \n                    \n\n            \n                \n                    Last time when token saved to database.\nonUpdate will not update time, because there are no columns to update. So we need to update it manually.\nThis column is used for finding when application was last time opened. It is not guaranteed because token can be changed on device.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { DEFAULT_LANGUAGE } from 'src/constants';\nimport { LanguageEnum } from 'src/models/enums/language.enum';\nimport { Column, Entity, PrimaryColumn } from 'typeorm';\n\n/**\n * Entity for storing push tokens.\n * Mobile application does not have user accounts, so sending push notifications to a specific user does not make sense.\n * It is only for purpose of sample application. We will send push notication (daily cookie :D) to a random device (token).\n */\n@Entity('push_token')\nexport class PushTokenEntity {\n\n    @PrimaryColumn()\n    public token: string;\n\n    @Column('enum', { enum: LanguageEnum, default: DEFAULT_LANGUAGE })\n    public language: LanguageEnum;\n    \n    @Column('datetime', { name: 'created_at', default: () => 'CURRENT_TIMESTAMP' })\n    public createdAt: Date;\n\n    /**\n     * Last time when token saved to database.\n     * onUpdate will not update time, because there are no columns to update. So we need to update it manually.\n     * This column is used for finding when application was last time opened. It is not guaranteed because token can be changed on device.\n     */\n    @Column('datetime', { name: 'updated_at', default: () => 'CURRENT_TIMESTAMP', onUpdate: 'CURRENT_TIMESTAMP' })\n    public updatedAt: Date;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RequiredParameterPipe.html":{"url":"classes/RequiredParameterPipe.html","title":"class - RequiredParameterPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RequiredParameterPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pipes/required-parameter.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Pipe for checking if required parameter is present.\n\n            \n\n\n            \n                Implements\n            \n            \n                        PipeTransform\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/pipes/required-parameter.pipe.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentMetadata, BadRequestException, PipeTransform } from '@nestjs/common';\n\n/**\n * Pipe for checking if required parameter is present.\n */\nexport class RequiredParameterPipe implements PipeTransform {\n    public transform(value: string, metadata: ArgumentMetadata): any {\n        if (value === undefined || value === null) {\n            throw new BadRequestException(`Required parameter '${metadata.data}' is missing.`)\n        } else {\n            return value;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SentryService.html":{"url":"injectables/SentryService.html","title":"injectable - SentryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SentryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/sentry.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                captureException\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/services/sentry.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        captureException\n                        \n                    \n                \n            \n            \n                \n                    \n                    captureException(message: string, data?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/services/sentry.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger } from '@nestjs/common';\nimport * as Sentry from '@sentry/node';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\n\n@Injectable()\nexport class SentryService {\n\n    constructor(\n        @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n    ) { }\n\n    public captureException(message: string, data?: any): void {\n        this.logger.error(`[SENTRY_SERVICE] Capture exception: ${message}`);\n        this.logger.error(`[SENTRY_SERVICE] Data: ${data}`);\n        Sentry.captureException(`${message} ---\\n${data}`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringToNumberPipe.html":{"url":"classes/StringToNumberPipe.html","title":"class - StringToNumberPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringToNumberPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pipes/string-to-number.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Pipe for transforming string to number.\n\n            \n\n\n            \n                Implements\n            \n            \n                        PipeTransform\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/pipes/string-to-number.pipe.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentMetadata, PipeTransform } from '@nestjs/common';\n\n/**\n * Pipe for transforming string to number.\n */\nexport class StringToNumberPipe implements PipeTransform {\n    public transform(value: string, metadata: ArgumentMetadata): number | undefined {\n        const numberValue: number = Number(value);\n        if (isNaN(numberValue)) {\n            return undefined\n        }\n        return numberValue;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagController.html":{"url":"controllers/TagController.html","title":"controller - TagController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/tag/tag.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                deleteTag\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                getAllTags\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Public\n                        Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTag(newTag: TagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create new tag if not exists.'})@ApiConflictResponse({description: 'Tag already exists.'})@HttpCode(200)@Post()\n                \n            \n\n            \n                \n                    Defined in src/endpoints/tag/tag.controller.ts:25\n                \n            \n\n\n            \n                \n                    Create new tag if not exists.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    newTag\n                                    \n                                                TagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        New tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Created tag.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Public\n                        Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTag(newTag: TagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete tag.'})@Delete()\n                \n            \n\n            \n                \n                    Defined in src/endpoints/tag/tag.controller.ts:61\n                \n            \n\n\n            \n                \n                    Delete tag.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    newTag\n                                    \n                                                TagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Tag to delete.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Public\n                        Async\n                        getAllTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTags(language: LanguageEnum)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all tags.'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/endpoints/tag/tag.controller.ts:35\n                \n            \n\n\n            \n                \n                    Get tag by id for specific language.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Tag.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Public\n                        Async\n                        updateTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTag(newTag: TagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get tag.'})@ApiNotFoundResponse({description: 'Tag not found.'})@Put()\n                \n            \n\n            \n                \n                    Defined in src/endpoints/tag/tag.controller.ts:50\n                \n            \n\n\n            \n                \n                    Update tag.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    newTag\n                                    \n                                                TagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        New tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Updated tag.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Headers, HttpCode, Post, Put } from '@nestjs/common';\nimport { TagService } from './tag.service';\nimport { TagDto } from 'src/models/dtos/tag.dto';\nimport { ApiConflictResponse, ApiNotFoundResponse, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { LanguageEnum } from 'src/models/enums/language.enum';\nimport { CustomValidationPipe } from 'src/utils/pipes/validation.pipe';\n\n@ApiTags('Administration', 'Application')\n@Controller('tags')\nexport class TagController {\n\n    constructor(private readonly tagService: TagService) { }\n\n    /**\n     * Create new tag if not exists.\n     * \n     * @throws          ConflictException if tag already exists.\n     * @param newTag    New tag.\n     * @returns         Created tag.\n     */\n    @ApiOperation({ summary: 'Create new tag if not exists.' })\n    @ApiConflictResponse({ description: 'Tag already exists.' })\n    @HttpCode(200)\n    @Post()\n    public async createTag(@Body(CustomValidationPipe) newTag: TagDto): Promise {\n        return this.tagService.createTag(newTag);\n    }\n\n    /**\n     * Get tag by id for specific language.\n     * @returns         Tag.\n     */\n    @ApiOperation({ summary: 'Get all tags.' })\n    @Get()\n    public async getAllTags(@Headers('x-language') language: LanguageEnum): Promise {\n        return this.tagService.getAllTags(language);\n    }\n\n    /**\n     * Update tag.\n     * \n     * @throws          NotFoundException if tag not found.\n     * @param id        Tag id.\n     * @param newTag    New tag.\n     * @returns         Updated tag.\n     */\n    @ApiOperation({ summary: 'Get tag.' })\n    @ApiNotFoundResponse({ description: 'Tag not found.' })\n    @Put()\n    public async updateTag(@Body(CustomValidationPipe) newTag: TagDto): Promise {\n        return this.tagService.updateTag(newTag);\n    }\n\n    /**\n     * Delete tag.\n     * \n     * @param newTag    Tag to delete. \n     */\n    @ApiOperation({ summary: 'Delete tag.' })\n    @Delete()\n    public async deleteTag(@Body() newTag: TagDto): Promise {\n        return this.tagService.deleteTag(newTag);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TagDto.html":{"url":"classes/TagDto.html","title":"class - TagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dtos/tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                language\n                            \n                            \n                                    Public\n                                order\n                            \n                            \n                                    \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagEntity: TagEntity)\n                    \n                \n                        \n                            \n                                Defined in src/models/dtos/tag.dto.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagEntity\n                                                  \n                                                        \n                                                                        TagEntity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/tag.dto.ts:12\n                        \n                    \n\n            \n                \n                    Uniqe string shortcut for tag.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LanguageEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/tag.dto.ts:19\n                        \n                    \n\n            \n                \n                    What language is the tag available in?\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/tag.dto.ts:31\n                        \n                    \n\n            \n                \n                    Order of the tag.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/tag.dto.ts:26\n                        \n                    \n\n            \n                \n                    User-friendly name of the tag.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport { TagEntity } from 'src/entities/tag.entity';\nimport { LanguageEnum } from 'src/models/enums/language.enum';\n\nexport class TagDto {\n\n    /**\n     * Uniqe string shortcut for tag.\n     * @example world for World news.\n     */\n    @IsNotEmpty()\n    public id: string;\n\n    /**\n     * What language is the tag available in?\n     * @example en\n     */\n    @IsNotEmpty()\n    public language: LanguageEnum;\n\n    /**\n     * User-friendly name of the tag.\n     * @example World\n     */\n    @IsNotEmpty()\n    public title: string;\n\n    /**\n     * Order of the tag.\n     */\n    public order: number;\n\n    constructor(tagEntity: TagEntity) {\n        if (tagEntity) {\n            this.id = tagEntity.id;\n            this.language = tagEntity.language;\n            this.title = tagEntity.title;\n            this.order = tagEntity.order;\n        }\n    }\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TagEntity.html":{"url":"entities/TagEntity.html","title":"entity - TagEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TagEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Optional\n                                articles\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                language\n                            \n                            \n                                    \n                                    Public\n                                order\n                            \n                            \n                                    \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        articles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, item => item.tags)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/tag.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/tag.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LanguageEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('enum', {enum: LanguageEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/tag.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/tag.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToMany, PrimaryColumn } from 'typeorm';\nimport { LanguageEnum } from 'src/models/enums/language.enum';\nimport { ArticleEntity } from './article.entity';\n\n@Entity('tag')\nexport class TagEntity {\n\n    @PrimaryColumn()\n    public id: string;\n\n    @PrimaryColumn('enum', { enum: LanguageEnum })\n    public language: LanguageEnum;\n\n    @Column()\n    public title: string;\n\n    @Column({ default: 10 })\n    public order: number;\n\n    @ManyToMany(() => ArticleEntity, item => item.tags)\n    public articles?: ArticleEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagService.html":{"url":"injectables/TagService.html","title":"injectable - TagService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/tag/tag.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    Public\n                                    Async\n                                deleteTag\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTags\n                            \n                            \n                                    Public\n                                    Async\n                                updateTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/endpoints/tag/tag.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTag(newTag: TagDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/tag/tag.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newTag\n                                    \n                                                TagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTag(newTag: TagDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/tag/tag.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newTag\n                                    \n                                                TagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAllTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTags(language: LanguageEnum)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/tag/tag.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_LANGUAGE\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTag(newTag: TagDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/tag/tag.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newTag\n                                    \n                                                TagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DEFAULT_LANGUAGE } from 'src/constants';\nimport { TagEntity } from 'src/entities/tag.entity';\nimport { TagDto } from 'src/models/dtos/tag.dto';\nimport { LanguageEnum } from 'src/models/enums/language.enum';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class TagService {\n\n    constructor(\n        @InjectRepository(TagEntity) private readonly tagRepository: Repository\n    ) {\n    }\n    \n    public async createTag(newTag: TagDto): Promise {\n\n        const tag: TagEntity | null = await this.tagRepository.findOneBy({ id: newTag.id, language: newTag.language });\n\n        if (tag) {\n            throw new ConflictException('Tag already exists.');\n        }\n\n        const savedTag: TagEntity = await this.tagRepository.save({\n            id: newTag.id,\n            title: newTag.title,\n            language: newTag.language,\n            order: newTag.order\n        });\n\n        return new TagDto(savedTag);\n    }\n\n    public async getAllTags(language: LanguageEnum = DEFAULT_LANGUAGE): Promise {\n        const tags: TagEntity[] = await this.tagRepository.find({ where: { language }, order: { order: 'ASC' } });\n\n        return tags.map(tag => new TagDto(tag));\n    }\n\n    public async updateTag(newTag: TagDto): Promise {\n        let tag: TagEntity | null = await this.tagRepository.findOne({\n            where: {\n                id: newTag.id,\n                language: newTag.language\n            }\n        });\n\n        if (!tag) {\n            throw new NotFoundException('Tag not found');\n        }\n\n        tag.title = newTag.title;\n        tag.order = newTag.order;\n\n        tag = await this.tagRepository.save(tag);\n\n        return new TagDto(tag);\n    }\n\n    public async deleteTag(newTag: TagDto): Promise {\n        await this.tagRepository.delete({ id: newTag.id, language: newTag.language });\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadedFileDto.html":{"url":"interfaces/UploadedFileDto.html","title":"interface - UploadedFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadedFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dtos/uploaded-file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for uploaded file.\nCould be interface, we will not create instance of this object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            buffer\n                                        \n                                \n                                \n                                        \n                                            destination\n                                        \n                                \n                                \n                                        \n                                            encoding\n                                        \n                                \n                                \n                                        \n                                            fieldname\n                                        \n                                \n                                \n                                        \n                                            filename\n                                        \n                                \n                                \n                                        \n                                            mimetype\n                                        \n                                \n                                \n                                        \n                                            originalname\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buffer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buffer:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A Buffer of the entire file (MemoryStorage)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        destination:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The folder to which the file has been saved (DiskStorage)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Encoding type of the file\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Field name specified in the form\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the file within the destination (DiskStorage)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mime type of the file\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        originalname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        originalname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the file on the user's computer\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Location of the uploaded file (DiskStorage)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Size of the file in bytes\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface UploadedFileDto {\n    \n    /** Field name specified in the form */\n    fieldname: string;\n\n    /** Name of the file on the user's computer */\n    originalname: string;\n\n    /** Encoding type of the file */\n    encoding: string;\n\n    /** Mime type of the file */\n    mimetype: string;\n\n    /** Size of the file in bytes */\n    size: number;\n\n    /** The folder to which the file has been saved (DiskStorage) */\n    destination: string;\n\n    /** The name of the file within the destination (DiskStorage) */\n    filename: string;\n\n    /** Location of the uploaded file (DiskStorage) */\n    path: string;\n\n    /** A Buffer of the entire file (MemoryStorage) */\n    buffer: Buffer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                active\n                            \n                            \n                                    \n                                    Public\n                                expirationDate\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Public\n                                refreshToken\n                            \n                            \n                                    \n                                    Public\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        expirationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('timestamp', {nullable: true, name: 'expiration_date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:29\n                        \n                    \n\n            \n                \n                    Refresh token expiration date.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 32, nullable: true, name: 'refresh_token'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:23\n                        \n                    \n\n            \n                \n                    Refresh token. User can be logged in from one device in one time.\nFor be able to log in from another device, table with refresh tokens must be created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity('user')\nexport class UserEntity {\n\n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    @Column({ unique: true })\n    public username: string;\n\n    @Column({ select: false })\n    public password?: string;\n\n    @Column({ default: false })\n    public active: boolean;\n    \n    /**\n     * Refresh token. User can be logged in from one device in one time.\n     * For be able to log in from another device, table with refresh tokens must be created.\n     */\n    @Column('varchar', { length: 32, nullable: true, name: 'refresh_token' })\n    public refreshToken: string | null;\n\n    /**\n     * Refresh token expiration date.\n     */\n    @Column('timestamp', { nullable: true, name: 'expiration_date' })\n    public expirationDate: Date | null;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            SERVER_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/data-source.ts\n            \n            variable\n            AppDataSource\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/database-config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/logger-config.ts\n            \n            variable\n            loggerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            DEFAULT_LANGUAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            DIRECTORY_IMAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            MAX_FILE_SIZE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            PAGE_COUNT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            REFRESH_TOKEN_SIZE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/endpoints/article/article.controller.ts\n            \n            controller\n            ArticleController\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/endpoints/article/article.service.ts\n            \n            injectable\n            ArticleService\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/endpoints/article/search/article-search.controller.ts\n            \n            controller\n            ArticleSearchController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/endpoints/article/search/article-search.service.ts\n            \n            injectable\n            ArticleSearchService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/endpoints/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/endpoints/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                src/endpoints/auth/strategies/basic.strategy.ts\n            \n            injectable\n            BasicStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/endpoints/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/endpoints/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/endpoints/push-notification/push-notification.controller.ts\n            \n            controller\n            PushNotificationController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/endpoints/push-notification/push-notification.service.ts\n            \n            injectable\n            PushNotificationService\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/endpoints/tag/tag.controller.ts\n            \n            controller\n            TagController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/endpoints/tag/tag.service.ts\n            \n            injectable\n            TagService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/entities/article-content.entity.ts\n            \n            entity\n            ArticleContentEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/article-content.entity.ts\n            \n            class\n            ArticleContentEntity\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/entities/article.entity.ts\n            \n            entity\n            ArticleEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/push-token.entity.ts\n            \n            entity\n            PushTokenEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/entities/tag.entity.ts\n            \n            entity\n            TagEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/filters/all-exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/migrations/1691261966905-migrations.ts\n            \n            class\n            Migrations1691261966905\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/migrations/1691666064778-migrations.ts\n            \n            class\n            Migrations1691666064778\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/models/dtos/article-request.dto.ts\n            \n            class\n            ArticleRequestDto\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/models/dtos/article.dto.ts\n            \n            class\n            ArticleDto\n            \n                53 %\n                (7/13)\n            \n        \n        \n            \n                \n                src/models/dtos/error-response.dto.ts\n            \n            class\n            ErrorResponse\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/models/dtos/tag.dto.ts\n            \n            class\n            TagDto\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/models/dtos/token.dto.ts\n            \n            class\n            PushTokenDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/models/dtos/uploaded-file.dto.ts\n            \n            interface\n            UploadedFileDto\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/exceptions/bad-validation-request.exception.ts\n            \n            class\n            BadValidationRequestException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/models/jwt-payload.model.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/models/jwt-request.model.ts\n            \n            interface\n            JwtRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/services/cron-job.service.ts\n            \n            injectable\n            CronJobService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/services/email.service.ts\n            \n            injectable\n            EmailService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/services/excel.service.ts\n            \n            injectable\n            ExcelService\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/services/file.service.ts\n            \n            injectable\n            FileService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/services/sentry.service.ts\n            \n            injectable\n            SentryService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/pipes/check-article-type.pipe.ts\n            \n            class\n            CheckArticleType\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/utils/pipes/required-parameter.pipe.ts\n            \n            class\n            RequiredParameterPipe\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/utils/pipes/string-to-number.pipe.ts\n            \n            class\n            StringToNumberPipe\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/utils/pipes/validation.pipe.ts\n            \n            class\n            CustomValidationPipe\n            \n                50 %\n                (1/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.9.1\n        \n            @nestjs/cache-manager : ^2.1.0\n        \n            @nestjs/cli : ^10.0.0\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.1.0\n        \n            @nestjs/passport : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/schedule : ^3.0.2\n        \n            @nestjs/serve-static : ^4.0.0\n        \n            @nestjs/swagger : ^7.1.4\n        \n            @nestjs/typeorm : ^10.0.0\n        \n            @sentry/node : ^7.61.0\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/multer : ^1.4.7\n        \n            @types/passport-http : ^0.3.9\n        \n            @types/passport-jwt : ^3.0.9\n        \n            @types/passport-local : ^1.0.35\n        \n            @types/uuid : ^9.0.2\n        \n            bcrypt : ^5.1.0\n        \n            cache-manager : ^5.2.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            firebase-admin : ^11.10.1\n        \n            handlebars : ^4.7.8\n        \n            moment : ^2.29.4\n        \n            mysql2 : ^3.5.2\n        \n            nest-winston : ^1.9.3\n        \n            nestjs-i18n : ^10.2.6\n        \n            nodemailer : ^6.9.4\n        \n            passport : ^0.6.0\n        \n            passport-http : ^0.3.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            rand-token : ^1.0.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            sharp : ^0.32.4\n        \n            typeorm : ^0.3.17\n        \n            uuid : ^9.0.0\n        \n            winston : ^3.10.0\n        \n            winston-daily-rotate-file : ^4.7.1\n        \n            xlsx : ^0.18.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArticleTypeEnum   (src/.../article-type.enum.ts)\n                        \n                        \n                            LanguageEnum   (src/.../language.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/models/enums/article-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ArticleTypeEnum\n                    \n                \n                        \n                            \n                                 NEWS\n                            \n                        \n                        \n                            \n                                Value : news\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n            \n        \n\n    src/models/enums/language.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        LanguageEnum\n                    \n                \n                        \n                            \n                                 CS\n                            \n                        \n                        \n                            \n                                Value : cs\n                            \n                        \n                        \n                            \n                                 EN\n                            \n                        \n                        \n                            \n                                Value : en\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNodeJs backend for the News app\nAbout\nWelcome to the News App Backend project! This repository serves as the backend component for the News App, a Flutter application designed to deliver the latest news to users. The backend is built to provide data and functionality to support the app's features.\nBackend is built using NestJS, a NodeJS framework. It is a REST API that provides endpoints for the app to consume. For data storage, the backend uses MySQL and interacts with it using TypeORM.\nThis project is made as a sample project and implements some of the common features found in a typical backend application. Eg.\n\nCRUD operations\nAuthentication and Authorization (using JWT, basic auth)\nSending emails\nFile uploads and downloads\nExporting data to Excel file\nFirebase Cloud Messaging (FCM) push notifications (via firebase-admin)\nDockerization\nCron jobs\nSentry error logging\nServing static files\nMigration scripts\nException filters\nLogging to file and managing log files\n\nGetting Started\nPrerequisites\n\nNodeJS (v14.15.4)\nMySQL (v8.0.23)\nDocker (v20.10.5)\n\nInstallation\n\nClone the repo\ngit clone git@github.com:Belligerator/news-backend.git\nInstall NPM packages\nnpm install\nCreate a .env file in the root directory and fill in the required environment variables. You can refer to the .env.example file for the required variables.\n\nRun the app\nnpm run start The app should be running on http://localhost:3000/\n\n\nUsage\nEndpoints\nDocumentation for the endpoints can be found at http://localhost:3000/api/swagger.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArticleSearchService\n\nArticleSearchService\n\nAppModule -->\n\nArticleSearchService->AppModule\n\n\n\n\n\nArticleService\n\nArticleService\n\nAppModule -->\n\nArticleService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAppModule -->\n\nAuthService->AppModule\n\n\n\n\n\nBasicStrategy\n\nBasicStrategy\n\nAppModule -->\n\nBasicStrategy->AppModule\n\n\n\n\n\nCronJobService\n\nCronJobService\n\nAppModule -->\n\nCronJobService->AppModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAppModule -->\n\nEmailService->AppModule\n\n\n\n\n\nExcelService\n\nExcelService\n\nAppModule -->\n\nExcelService->AppModule\n\n\n\n\n\nFileService\n\nFileService\n\nAppModule -->\n\nFileService->AppModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAppModule -->\n\nJwtStrategy->AppModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAppModule -->\n\nLocalStrategy->AppModule\n\n\n\n\n\nPushNotificationService\n\nPushNotificationService\n\nAppModule -->\n\nPushNotificationService->AppModule\n\n\n\n\n\nSentryService\n\nSentryService\n\nAppModule -->\n\nSentryService->AppModule\n\n\n\n\n\nTagService\n\nTagService\n\nAppModule -->\n\nTagService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.1\n        \n            Description : The backend for serving news.\n        \n            License : UNLICENSED\n        \n            Author : Dmitrij Buckovsky\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppDataSource   (src/.../data-source.ts)\n                        \n                        \n                            databaseConfig   (src/.../database-config.ts)\n                        \n                        \n                            DEFAULT_LANGUAGE   (src/.../constants.ts)\n                        \n                        \n                            DIRECTORY_IMAGES   (src/.../constants.ts)\n                        \n                        \n                            loggerConfig   (src/.../logger-config.ts)\n                        \n                        \n                            MAX_FILE_SIZE   (src/.../constants.ts)\n                        \n                        \n                            PAGE_COUNT   (src/.../constants.ts)\n                        \n                        \n                            REFRESH_TOKEN_SIZE   (src/.../constants.ts)\n                        \n                        \n                            SERVER_URL   (src/.../app.module.ts)\n                        \n                        \n                               (src/.../app.service.ts)\n                        \n                        \n                               (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/data-source.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppDataSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataSource\n\n                    \n                \n                \n                    \n                        Default value : new DataSource(databaseConfig)\n                    \n                \n\n            \n                \n                    For migration purposes. Used in package.json.\n\n                \n            \n\n        \n    \n\n    src/config/database-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataSourceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n    type: 'mysql',\n    host: process.env.MYSQL_HOST,\n    port: 3306,\n    database: process.env.MYSQL_DATABASE,\n    username: process.env.MYSQL_USER,\n    password: process.env.MYSQL_PASSWORD,\n    entities: [\n        __dirname + '/../endpoints/**/*.entity{.ts,.js}',\n        __dirname + '/../entities/**/*.entity{.ts,.js}',\n    ],\n    synchronize: false,\n    logging: false,\n    charset: 'utf8_unicode_ci',\n    migrations: [__dirname + '/../migrations/*{.ts,.js}'],\n    migrationsRun: true\n}\n                    \n                \n\n\n        \n    \n\n    src/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_LANGUAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LanguageEnum\n\n                    \n                \n                \n                    \n                        Default value : LanguageEnum.CS\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DIRECTORY_IMAGES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'uploads/images'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAX_FILE_SIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1024 * 1024 * 15\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PAGE_COUNT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REFRESH_TOKEN_SIZE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 32\n                    \n                \n\n\n        \n    \n\n    src/config/logger-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loggerConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WinstonModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n    exitOnError: false,\n    transports: [\n        new DailyRotateFile({\n            filename: 'debug-%DATE%.log',\n            dirname: './logs',\n            datePattern: 'YYYY-MM-DD',\n            maxSize: '25m',\n            maxFiles: '14d',\n            level: 'debug',\n            format: format.combine(\n                format.uncolorize(),\n                format.timestamp(),\n                format.printf(msg => {\n                    return `${msg.timestamp} [${msg.level}] - ${msg.message}` + (msg.stack ? `\\n\\t${msg.stack}` : '');\n                }),\n            ),\n            handleExceptions: true,\n            handleRejections: true,\n        }),\n        new DailyRotateFile({\n            filename: 'error-%DATE%.log',\n            dirname: './logs',\n            datePattern: 'YYYY-MM-DD',\n            maxSize: '25m',\n            maxFiles: '14d',\n            level: 'error',\n            format: format.combine(\n                format.uncolorize(),\n                format.timestamp(),\n                format.printf(msg => {\n                    return `${msg.timestamp} [${msg.level}] - ${msg.message}` + (msg.stack ? `\\n\\t${msg.stack}` : '');\n                }),\n            ),\n            handleExceptions: true,\n            handleRejections: true,\n        }),\n        new transports.Console({\n            handleExceptions: true,\n            handleRejections: true,\n            format: format.combine(\n                format.colorize(),\n                format.timestamp(),\n                format.printf(msg => {\n                    return `${msg.timestamp} [${msg.level}] - ${msg.message}` + (msg.stack ? `\\n\\t${msg.stack}` : '');\n                }),\n            ),\n        }),\n    ],\n}\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SERVER_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : process.env.SERVER_URL ?? ''\n                    \n                \n\n\n        \n    \n\n    src/app.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('../package.json')\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('../package.json')\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
