var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.039,1,2.175]],["body/classes/AllExceptionsFilter.html",[0,0.04,1,2.999,2,1.229,3,0.312,4,0.275,5,0.238,6,4.347,7,2.48,8,0.788,9,1.935,10,2.656,11,3.835,12,3.835,13,3.356,14,3.835,15,2.999,16,4.347,17,0.275,18,1.149,19,0.732,20,4.657,21,1.061,22,3.372,23,5.967,24,2.799,25,3.038,26,0.53,27,3.372,28,1.066,29,0.029,30,0.84,31,0.53,32,0.912,33,3.835,34,3.399,35,4.657,36,3.372,37,2.48,38,0.849,39,2.999,40,0.708,41,3.372,42,1.679,43,0.621,44,2.475,45,3.356,46,2.216,47,2.48,48,3.835,49,2.834,50,2.834,51,1.679,52,1.325,53,1.43,54,2.999,55,2.48,56,3.372,57,3.372,58,0.312,59,1.829,60,1.885,61,1.793,62,2.216,63,2.02,64,3.372,65,3.372,66,2.834,67,2.834,68,2.834,69,2.834,70,4.076,71,0.849,72,3.372,73,4.562,74,2.48,75,1.829,76,3.372,77,3.356,78,3.372,79,2.834,80,3.372,81,3.372,82,3.372,83,3.372,84,3.372,85,2.834,86,3.372,87,0.019,88,0.019]],["title/controllers/AppController.html",[89,1.404,90,2.175]],["body/controllers/AppController.html",[0,0.051,3,0.397,4,0.349,5,0.303,17,0.349,18,1.343,19,0.822,26,0.498,29,0.029,38,1.343,40,0.674,43,0.789,58,0.397,59,2.324,60,1.562,87,0.023,88,0.023,89,2.261,90,3.503,91,2.324,92,3.601,93,5.104,94,1.817,95,2.816,96,5.352,97,4.284,98,4.284,99,4.594,100,3.921,101,4.284,102,0.982,103,3.148,104,3.601,105,3.503,106,2.548,107,3.601,108,2.816,109,1.45,110,4.284]],["title/modules/AppModule.html",[111,2.435,112,2.175]],["body/modules/AppModule.html",[0,0.029,1,2.395,3,0.337,4,0.2,5,0.174,24,2.467,29,0.029,34,1.614,40,0.771,43,0.452,47,1.807,52,0.965,53,1.042,58,0.337,63,0.832,87,0.015,88,0.015,90,2.855,91,1.977,102,0.452,103,2.917,104,2.065,111,3.195,112,4.239,113,1.807,114,1.614,115,2.065,116,2.065,117,1.614,118,3.651,119,2.065,120,2.065,121,2.065,122,2.917,123,2.917,124,2.917,125,2.677,126,2.917,127,2.917,128,3.063,129,2.065,130,2.065,131,1.807,132,2.855,133,2.855,134,2.855,135,2.456,136,2.456,137,2.065,138,2.456,139,1.461,140,1.807,141,2.456,142,3.643,143,1.672,144,2.456,145,1.432,146,2.456,147,1.333,148,2.456,149,2.456,150,1.807,151,2.456,152,2.456,153,4.343,154,3.643,155,2.395,156,2.456,157,3.643,158,2.456,159,1.672,160,2.456,161,3.643,162,2.456,163,2.065,164,2.065,165,2.456,166,3.643,167,2.855,168,2.456,169,2.456,170,1.807,171,2.456,172,2.456,173,2.456,174,2.065,175,1.807,176,2.065,177,2.395,178,2.456,179,2.456,180,2.456,181,3.643,182,2.456,183,2.68,184,2.456,185,1.614,186,2.065,187,3.643,188,2.065,189,2.456,190,2.456,191,2.456,192,2.456,193,3.643,194,3.643,195,2.456,196,2.456,197,1.614,198,2.456,199,2.456,200,2.456,201,2.456,202,2.456,203,2.456,204,2.065,205,2.456,206,2.456,207,2.456,208,2.456,209,2.456,210,2.456,211,2.456,212,1.614,213,2.456,214,2.065,215,2.065,216,2.162,217,2.456,218,2.065,219,3.063,220,2.456,221,0.773,222,2.456,223,2.456,224,2.456,225,2.065,226,2.456,227,2.456,228,2.456,229,2.68,230,2.456,231,2.456,232,2.065,233,2.456,234,2.065,235,2.456,236,2.456,237,0.773,238,2.456,239,2.456,240,4.343,241,4.343,242,1.461,243,2.065]],["title/injectables/AppService.html",[103,1.796,244,0.773]],["body/injectables/AppService.html",[0,0.056,3,0.437,4,0.384,5,0.333,17,0.384,18,1.424,19,0.857,26,0.548,29,0.029,38,1.188,40,0.548,43,0.869,58,0.437,63,1.597,87,0.024,88,0.024,93,5.275,99,4.159,102,1.041,103,3.067,109,1.597,244,1.32,245,2.001,246,3.47,247,4.717,248,3.966]],["title/entities/ArticleContentEntity.html",[145,1.3,249,1.519]],["body/entities/ArticleContentEntity.html",[0,0.036,3,0.282,4,0.248,5,0.215,17,0.347,19,0.947,26,0.703,29,0.029,30,0.978,31,0.703,40,0.569,58,0.282,71,1.337,87,0.018,88,0.018,94,2.569,102,1.066,143,2.436,145,1.672,216,2.643,221,1.67,249,1.398,250,1.812,251,3.339,252,2.562,253,1.441,254,1.867,255,4.462,256,1.935,257,3.223,258,2.88,259,1.958,260,1.935,261,2.562,262,4.256,263,3.577,264,3.047,265,3.047,266,3.047,267,4.122,268,3.047,269,2.797,270,4.256,271,4.256,272,3.047,273,2.309,274,4.256,275,3.577,276,4.256,277,4.256,278,3.047,279,2.531,280,3.577,281,4.256,282,3.047,283,4.122,284,3.047,285,2.036,286,3.577,287,3.131,288,3.047,289,3.905,290,3.047,291,3.577,292,3.577,293,1.517,294,2.562,295,1.293,296,3.047,297,3.047,298,3.047,299,3.047,300,3.047,301,3.047,302,2.562]],["title/controllers/ArticleController.html",[89,1.404,132,2.175]],["body/controllers/ArticleController.html",[0,0.02,3,0.152,4,0.133,5,0.391,8,1.119,10,1.539,17,0.133,18,0.67,19,0.818,26,0.493,28,0.991,29,0.029,30,0.782,31,0.615,32,0.848,38,1.393,40,0.662,43,0.302,44,2.094,46,1.076,58,0.152,59,0.888,60,0.969,61,0.643,71,1.487,87,0.011,88,0.011,89,0.695,91,0.888,94,1.8,95,2.79,102,0.618,105,2.988,106,0.974,108,2.79,109,1.621,123,1.82,125,1.67,132,1.747,143,1.771,145,1.517,197,3.634,221,1.874,237,1.214,242,0.974,254,2.06,256,2.106,259,1.836,269,2.988,285,1.746,303,1.376,304,1.205,305,3.436,306,2.651,307,2.234,308,2.234,309,2.658,310,2.234,311,3.245,312,1.376,313,2.385,314,3.148,315,2.704,316,2.205,317,1.637,318,2.82,319,1.539,320,2.468,321,1.637,322,1.637,323,2.658,324,2.234,325,2.658,326,1.955,327,1.948,328,2.248,329,1.637,330,1.637,331,1.637,332,3.245,333,3.86,334,3.822,335,2.234,336,1.637,337,3.39,338,2.79,339,4.026,340,1.637,341,1.637,342,1.747,343,2.658,344,2.234,345,2.658,346,1.747,347,1.747,348,2.234,349,1.442,350,1.58,351,1.376,352,4.455,353,1.995,354,2.658,355,1.637,356,1.637,357,1.637,358,2.094,359,3.245,360,2.234,361,3.86,362,3.86,363,2.658,364,2.658,365,2.658,366,2.988,367,1.376,368,1.771,369,1.955,370,1.637,371,1.637,372,1.637,373,1.747,374,1.205,375,1.376,376,2.799,377,1.376,378,1.376,379,1.637,380,3.354,381,1.637,382,1.637,383,1.637,384,0.888,385,1.637,386,1.995,387,1.076,388,1.376,389,2.704,390,1.076,391,1.376,392,0.974,393,2.84,394,1.076,395,1.376,396,1.637,397,1.205,398,1.376,399,1.205,400,1.637,401,1.376,402,0.974,403,1.376,404,1.637,405,1.637,406,1.637,407,2.234,408,1.637,409,1.376,410,1.637,411,1.376,412,1.376,413,1.637,414,1.637,415,1.995,416,0.888,417,1.376,418,1.637,419,2.658,420,2.658,421,1.637,422,1.637,423,1.442,424,2.658,425,2.658,426,2.658,427,1.637,428,1.076,429,1.205,430,1.637,431,2.658,432,2.658,433,1.58,434,1.58,435,2.234,436,1.747,437,1.637,438,1.637,439,1.637,440,1.637,441,1.637,442,1.637,443,1.637]],["title/classes/ArticleDto.html",[0,0.039,368,1.519]],["body/classes/ArticleDto.html",[0,0.034,2,1.033,3,0.262,4,0.231,5,0.2,17,0.231,19,0.955,21,0.891,26,0.729,28,0.662,29,0.029,30,0.522,31,0.729,32,0.566,40,0.469,58,0.262,71,1.295,87,0.017,88,0.017,100,2.084,102,1.174,145,2.019,147,1.537,221,1.709,251,1.537,253,1.368,254,1.931,256,1.981,257,3.097,258,2.557,259,1.368,260,1.981,269,2.657,273,2.788,279,3.056,319,2.668,326,2.084,327,2.162,353,2.404,366,3.097,368,1.855,373,2.657,444,2.382,445,3.997,446,3.997,447,4.713,448,4.042,449,4.042,450,2.833,451,2.833,452,2.833,453,2.833,454,2.833,455,2.974,456,2.657,457,2.833,458,3.398,459,2.833,460,2.833,461,2.557,462,2.833,463,4.042,464,4.042,465,4.042,466,2.833,467,3.398,468,4.042,469,2.974,470,2.833,471,2.084,472,2.833,473,2.833,474,2.833,475,2.833,476,2.382,477,4.042,478,2.382,479,2.833,480,2.833,481,2.833,482,2.833,483,2.833,484,2.833,485,2.833,486,2.833,487,2.833,488,2.833,489,2.833,490,2.833,491,2.833,492,2.833]],["title/entities/ArticleEntity.html",[143,1.519,249,1.519]],["body/entities/ArticleEntity.html",[0,0.033,3,0.254,4,0.224,5,0.194,9,1.964,17,0.224,19,0.944,26,0.697,29,0.029,30,1.061,31,0.697,32,1.117,40,0.588,58,0.254,71,1.276,87,0.017,88,0.017,94,2.547,143,2.705,145,1.99,147,1.489,159,2.324,216,2.673,221,0.863,249,1.26,250,1.633,253,1.338,254,1.812,259,1.893,261,2.308,263,3.322,267,2.308,273,2.144,275,2.308,279,2.35,280,3.322,283,3.893,286,3.322,287,2.907,289,3.407,291,3.322,292,3.322,293,1.367,302,4.258,313,2.673,319,2.125,326,2.907,327,2.125,353,2.35,384,1.489,445,3.407,446,3.726,493,2.308,494,4.631,495,4.631,496,4.631,497,5.368,498,2.308,499,2.745,500,3.952,501,3.952,502,2.745,503,3.952,504,2.745,505,3.952,506,2.745,507,2.745,508,2.745,509,2.745,510,3.952,511,3.952,512,4.631,513,3.952,514,2.745,515,2.745,516,2.308,517,2.745,518,3.952,519,3.952,520,2.907,521,3.952,522,2.745,523,3.952,524,2.745,525,3.322,526,1.489,527,3.952,528,3.322,529,4.631,530,2.745,531,2.745,532,2.745,533,2.745]],["title/classes/ArticleRequestDto.html",[0,0.039,315,1.968]],["body/classes/ArticleRequestDto.html",[0,0.055,2,1.239,3,0.315,4,0.277,5,0.24,8,0.794,17,0.277,19,0.942,26,0.694,29,0.029,31,0.722,40,0.395,58,0.315,71,1.155,77,3.374,87,0.019,88,0.019,94,2.202,102,1.145,204,3.855,212,3.014,253,1.552,254,1.955,256,1.892,257,3.412,258,2.816,259,1.552,260,1.892,279,3.556,315,2.727,319,2.382,347,3.014,349,2.488,358,2.488,394,4.018,446,4.269,455,3.374,456,3.014,458,3.855,471,3.374,525,3.855,534,2.856,535,3.374,536,3.855,537,4.586,538,4.586,539,5.139,540,3.398,541,3.398,542,4.586,543,3.398,544,4.586,545,3.398,546,3.398,547,4.586,548,3.855,549,3.855,550,3.398,551,2.233]],["title/controllers/ArticleSearchController.html",[89,1.404,134,2.175]],["body/controllers/ArticleSearchController.html",[0,0.031,3,0.244,4,0.215,5,0.186,8,1.161,17,0.215,18,0.967,19,0.781,26,0.446,28,0.896,29,0.029,30,0.707,31,0.446,32,0.767,38,1.252,40,0.677,43,0.485,58,0.244,59,1.43,60,0.961,71,1.469,87,0.016,88,0.016,89,1.118,91,1.43,94,1.627,95,2.522,102,1.015,105,2.974,106,1.567,108,2.522,109,1.682,122,2.455,134,2.522,188,2.215,197,3.266,221,2.008,254,1.734,256,1.649,258,2.696,259,1.682,260,2.202,285,2.074,295,1.118,304,1.939,305,3.68,313,2.833,327,2.28,328,2.108,337,3.907,338,3.471,346,2.522,347,3.266,350,2.281,358,2.082,368,1.209,374,1.939,376,2.745,384,1.43,386,2.69,387,1.732,388,2.215,389,2.69,390,1.732,391,2.215,392,1.567,393,3.328,407,3.225,409,2.215,411,2.215,412,2.215,415,2.281,434,2.281,526,1.43,552,3.328,553,2.215,554,2.635,555,5.202,556,3.837,557,2.635,558,5.541,559,2.635,560,2.635,561,2.635,562,4.178,563,2.822,564,2.635,565,2.635,566,2.635,567,2.635,568,3.803,569,2.635,570,2.635,571,2.635,572,3.837,573,2.635,574,2.635,575,2.635,576,2.635]],["title/injectables/ArticleSearchService.html",[122,1.796,244,0.773]],["body/injectables/ArticleSearchService.html",[0,0.026,3,0.204,4,0.179,5,0.156,8,0.95,9,1.424,17,0.179,18,0.846,19,0.731,21,1.056,26,0.528,28,1.062,29,0.029,30,0.838,31,0.528,32,0.909,38,1.3,40,0.642,43,0.406,58,0.204,61,1.787,63,1.137,71,1.393,87,0.014,88,0.014,102,1.082,109,1.658,122,1.821,139,1.31,145,0.866,147,1.195,218,1.852,221,1.95,237,1.056,244,0.784,245,0.934,251,1.195,254,1.623,256,1.224,258,2.799,259,1.658,260,2.107,285,1.956,293,1.097,295,0.934,305,3.289,306,2.367,313,2.671,319,1.011,320,1.621,327,2.462,328,1.929,337,3.635,338,2.99,342,2.673,346,2.207,350,1.996,358,2.468,366,1.448,368,1.011,376,2.671,384,1.195,392,1.31,415,1.31,416,1.821,423,1.195,428,1.448,433,1.31,526,1.195,552,3.602,555,4.94,558,5.568,562,3.824,563,2.47,568,3.419,577,1.852,578,3.357,579,4.068,580,3.357,581,2.203,582,2.705,583,2.203,584,2.822,585,3.357,586,2.203,587,4.337,588,2.822,589,3.357,590,4.068,591,4.068,592,4.068,593,2.203,594,2.203,595,1.54,596,2.912,597,2.673,598,3.357,599,2.203,600,1.621,601,1.448,602,4.068,603,1.852,604,3.357,605,1.852,606,2.203,607,2.203,608,2.203,609,3.357,610,3.357,611,2.203,612,2.203,613,2.203,614,2.203,615,3.357,616,2.203,617,2.203,618,2.203,619,2.203,620,1.852,621,2.203,622,2.203,623,2.203,624,2.203,625,2.203,626,2.203,627,2.203,628,2.203,629,2.203,630,2.203,631,2.203,632,2.203,633,2.203,634,1.621,635,1.621,636,2.203,637,2.203,638,2.203]],["title/injectables/ArticleService.html",[123,1.796,244,0.773]],["body/injectables/ArticleService.html",[0,0.015,3,0.118,4,0.104,5,0.09,8,0.863,9,0.914,17,0.104,18,0.543,19,0.766,21,0.678,25,2.129,26,0.466,28,0.937,29,0.029,30,0.739,31,0.618,32,0.802,38,1.133,40,0.629,42,0.633,43,0.234,44,2.542,51,0.633,52,0.5,53,0.54,58,0.118,60,1.204,61,1.68,62,0.836,63,1.586,71,1.402,87,0.009,88,0.009,102,0.681,109,1.251,123,1.169,124,2.32,125,2.129,126,2.32,139,0.756,143,1.287,145,2.053,147,0.69,159,1.287,185,0.836,186,1.069,216,1.84,221,1.888,237,1.838,244,0.503,245,0.54,249,0.584,251,0.69,254,2.006,256,0.786,259,1.927,260,0.786,269,3.08,273,2.177,279,1.282,285,1.559,293,0.633,295,0.54,305,2.674,306,2.484,307,1.812,308,1.812,310,1.812,311,1.812,312,1.812,313,2.129,315,1.963,316,1.417,318,3.373,319,2.484,324,1.069,327,2.064,328,2.057,334,3.373,337,3.08,338,2.17,339,3.781,342,1.417,346,1.417,347,2.17,348,1.812,349,2.177,350,1.282,351,1.812,352,3.939,353,1.668,358,2.631,359,2.775,366,3.362,367,1.812,368,1.515,369,1.586,373,1.843,376,2.602,384,0.69,392,0.756,394,0.836,395,1.069,398,1.069,415,1.282,416,0.69,423,2.631,428,1.417,433,2.543,434,1.668,435,1.812,436,1.843,445,1.586,455,2.718,456,2.428,469,0.936,520,0.936,526,0.69,548,1.069,549,1.812,563,1.586,582,2.883,584,2.357,587,4.076,595,0.989,596,2.197,597,1.843,600,0.936,601,0.836,603,1.069,605,1.812,620,1.069,634,2.063,635,1.586,639,1.069,640,2.804,641,1.069,642,2.804,643,1.272,644,1.812,645,3.302,646,1.272,647,2.155,648,2.155,649,1.272,650,2.775,651,1.272,652,1.272,653,1.069,654,2.155,655,1.272,656,3.302,657,1.272,658,1.272,659,0.936,660,1.272,661,0.936,662,1.069,663,1.272,664,0.836,665,1.272,666,1.272,667,1.272,668,2.155,669,1.272,670,2.155,671,1.272,672,1.272,673,1.272,674,3.302,675,2.155,676,1.272,677,2.155,678,2.155,679,2.155,680,2.155,681,1.272,682,1.812,683,1.272,684,2.155,685,2.155,686,2.155,687,1.272,688,1.272,689,1.272,690,1.272,691,1.272,692,2.155,693,2.155,694,1.272,695,2.155,696,1.272,697,1.272,698,1.272,699,1.272,700,1.272,701,1.272,702,1.272,703,2.155,704,1.272,705,1.586,706,1.069,707,1.272,708,1.069,709,1.069,710,1.272,711,1.272,712,1.272,713,1.272,714,1.069,715,1.069,716,1.272,717,1.272,718,1.272,719,1.272,720,1.272,721,3.302,722,1.272,723,2.804,724,2.804,725,1.272,726,2.804,727,0.936,728,1.272,729,1.272,730,1.272,731,1.272,732,1.272,733,1.272,734,1.272,735,1.272,736,1.272,737,1.272,738,2.155,739,1.272,740,2.155,741,3.302,742,2.804,743,1.586,744,2.155,745,1.272,746,3.302,747,1.272,748,1.272,749,1.272,750,1.069,751,1.272,752,1.272,753,1.272,754,1.272,755,1.272,756,1.272]],["title/classes/BadValidationRequestException.html",[0,0.039,757,2.175]],["body/classes/BadValidationRequestException.html",[0,0.048,2,1.453,3,0.369,4,0.325,5,0.282,8,0.931,10,2.804,21,1.254,26,0.463,28,1.19,29,0.029,30,0.734,31,0.463,32,0.796,40,0.463,43,0.734,44,3.045,45,2.932,58,0.369,63,1.724,75,3.045,87,0.022,88,0.022,102,0.938,253,1.349,254,1.602,320,4.351,350,2.37,416,3.045,536,3.351,551,3.347,634,4.351,635,2.932,757,3.347,758,3.747,759,3.747,760,3.351,761,5.914,762,5.093,763,5.093,764,4.281,765,5.093,766,5.138,767,3.986,768,3.351,769,3.986,770,3.986,771,3.986,772,3.986,773,3.986,774,4.281,775,3.986,776,3.986,777,3.351]],["title/classes/CheckArticleType.html",[0,0.039,386,1.968]],["body/classes/CheckArticleType.html",[0,0.049,2,1.483,3,0.377,4,0.331,5,0.287,8,0.95,15,3.391,17,0.331,18,1.3,19,0.802,26,0.472,28,0.95,29,0.029,30,0.749,31,0.73,32,0.813,38,1.025,40,0.599,43,0.749,58,0.377,63,1.377,87,0.022,88,0.022,109,1.377,237,1.28,254,1.934,313,3.129,327,2.6,384,2.207,386,3.068,387,3.391,416,3.074,433,2.419,526,2.207,588,4.337,595,2.6,778,3.42,779,4.337,780,4.337,781,5.16,782,4.763,783,3.796,784,4.337,785,4.169,786,5.01,787,4.068,788,4.068,789,4.068]],["title/classes/CustomValidationPipe.html",[0,0.039,402,1.968]],["body/classes/CustomValidationPipe.html",[0,0.054,2,1.641,3,0.417,4,0.367,5,0.318,8,1.052,21,1.866,26,0.523,29,0.029,40,0.638,43,0.829,44,2.982,58,0.417,87,0.023,88,0.023,216,2.241,237,1.416,256,2.003,402,3.268,535,4.043,757,2.959,758,3.312,759,3.312,764,4.62,766,4.62,768,3.784,777,3.784,780,4.62,783,3.312,790,3.784,791,5.495,792,5.495,793,5.932,794,4.502,795,4.502,796,4.502,797,4.502]],["title/injectables/EmailService.html",[124,1.796,244,0.773]],["body/injectables/EmailService.html",[0,0.039,3,0.306,4,0.269,5,0.234,8,0.773,10,2.067,17,0.269,18,1.135,19,0.725,21,1.041,24,2.786,25,2.954,26,0.523,28,1.052,29,0.029,30,0.83,31,0.523,32,0.9,38,0.834,40,0.705,42,1.647,43,0.61,51,1.647,52,1.3,53,1.403,58,0.306,60,1.867,61,2.012,87,0.019,88,0.019,124,2.444,167,2.175,170,2.434,177,3.366,214,2.782,232,2.782,237,1.91,244,1.052,245,1.403,254,2.011,256,1.206,257,2.175,258,1.795,260,1.206,306,2.35,328,1.911,368,2.522,376,1.647,392,1.968,664,2.96,705,4.231,706,4.988,798,2.782,799,4.504,800,2.175,801,6.071,802,3.309,803,4.504,804,3.309,805,2.782,806,3.786,807,2.434,808,3.309,809,3.309,810,5.121,811,3.309,812,3.309,813,3.309,814,5.121,815,3.309,816,2.782,817,3.309,818,3.309,819,3.309,820,2.175,821,4.504,822,4.504,823,3.309,824,3.309,825,3.309,826,3.309,827,2.782,828,3.309,829,3.309,830,3.786,831,2.782,832,3.309]],["title/classes/ErrorResponse.html",[0,0.039,54,2.175]],["body/classes/ErrorResponse.html",[0,0.05,2,1.54,3,0.391,4,0.344,5,0.298,10,2.953,13,3.886,17,0.344,19,0.929,26,0.669,29,0.029,31,0.669,54,3.472,55,4.444,58,0.391,70,3.886,71,1.331,74,4.241,75,3.128,87,0.022,88,0.022,102,1.113,253,1.788,335,4.441,833,3.55,834,4.223,835,6.04,836,5.283,837,4.223,838,4.441,839,4.441,840,5.283,841,4.223,842,5.283]],["title/injectables/FileService.html",[125,1.648,244,0.773]],["body/injectables/FileService.html",[0,0.025,3,0.193,4,0.169,5,0.426,8,0.751,9,0.883,10,2.557,17,0.169,18,0.81,19,0.769,21,0.655,24,2.315,25,2.618,26,0.586,28,1.115,29,0.029,30,1.067,31,0.586,32,0.954,38,1.325,39,2.902,40,0.673,42,1.036,43,0.383,51,1.036,52,0.818,53,0.883,58,0.193,59,1.129,60,1.172,61,1.735,62,1.368,63,1.088,87,0.014,88,0.014,102,1.11,109,1.927,125,1.955,175,4.1,177,3.137,216,2.376,219,2.702,229,3.248,237,0.655,242,1.911,244,0.751,245,0.883,253,1.088,273,1.129,306,2.315,328,1.873,353,1.911,360,1.75,376,1.955,397,1.531,401,1.75,416,1.129,423,1.129,428,2.902,456,3.663,595,0.955,601,1.368,664,1.368,743,1.531,805,1.75,820,2.113,827,1.75,831,1.75,843,1.75,844,5.044,845,4.416,846,3.214,847,3.214,848,3.214,849,2.081,850,2.081,851,3.214,852,3.926,853,4.773,854,2.081,855,2.081,856,3.214,857,3.926,858,3.926,859,5.044,860,3.926,861,1.75,862,3.214,863,2.081,864,3.214,865,4.416,866,2.702,867,3.214,868,3.214,869,2.081,870,3.214,871,5.258,872,3.214,873,2.081,874,3.926,875,3.214,876,3.926,877,2.702,878,3.214,879,3.214,880,3.214,881,3.214,882,3.301,883,2.702,884,2.889,885,3.926,886,3.214,887,3.214,888,3.214,889,3.214,890,2.889,891,2.081,892,3.926,893,2.081,894,2.081,895,2.081,896,3.214,897,1.75,898,2.081,899,2.702,900,3.214,901,2.081,902,2.081,903,2.081,904,2.081,905,2.081,906,2.081,907,2.081,908,2.081,909,2.081,910,2.081,911,2.081,912,2.081,913,2.081,914,2.702,915,2.081,916,2.081,917,2.081,918,2.081,919,2.081,920,2.081,921,2.081,922,2.081,923,2.081,924,3.926,925,3.214,926,2.081,927,2.081,928,2.081,929,2.081,930,2.081,931,2.081,932,2.081,933,2.081]],["title/classes/HttpExceptionFilter.html",[0,0.039,155,2.175]],["body/classes/HttpExceptionFilter.html",[0,0.044,2,1.353,3,0.343,4,0.302,5,0.262,7,2.73,8,0.867,10,2.489,11,4.088,12,4.088,13,3.577,14,4.088,15,3.196,16,4.559,17,0.302,18,1.225,19,0.768,20,4.559,21,1.167,25,3.053,26,0.565,28,1.136,29,0.029,30,0.896,31,0.565,32,0.972,33,4.088,34,3.565,35,4.839,37,2.73,38,0.935,39,3.196,40,0.668,42,1.847,43,0.684,44,2.638,45,3.99,46,2.439,48,4.088,49,3.119,50,3.119,51,1.847,52,1.458,53,1.574,58,0.343,60,1.353,61,1.458,63,1.949,66,3.119,67,3.119,68,3.119,69,3.119,70,3.99,71,0.935,74,2.73,75,2.013,85,3.119,87,0.021,88,0.021,155,3.196,800,2.439,807,2.73,934,4.559,935,3.71,936,5.756,937,3.71,938,3.71,939,3.71,940,3.71,941,3.71,942,4.862,943,3.71,944,3.71]],["title/injectables/PushNotificationService.html",[126,1.796,244,0.773]],["body/injectables/PushNotificationService.html",[0,0.04,3,0.307,4,0.27,5,0.234,9,1.406,17,0.27,18,1.136,19,0.726,21,1.043,25,2.956,26,0.524,28,1.053,29,0.029,30,0.831,31,0.524,32,0.901,38,0.835,40,0.705,42,1.651,43,0.611,51,1.651,52,1.303,53,1.406,58,0.307,60,1.644,61,2.014,63,1.527,75,1.799,87,0.019,88,0.019,102,0.611,126,2.447,145,2.162,147,1.799,167,2.179,183,4.047,185,3.369,197,2.179,221,1.867,237,1.043,244,1.053,245,1.406,251,1.799,254,1.419,255,2.787,256,1.644,260,1.209,285,2.006,295,1.406,306,2.352,327,1.521,328,1.913,423,1.799,582,1.971,661,3.771,664,2.964,705,2.439,708,2.787,714,3.791,715,4.625,727,2.439,800,2.179,807,2.439,816,2.787,830,2.787,945,2.787,946,4.51,947,5.502,948,3.315,949,4.51,950,3.315,951,4.51,952,3.791,953,3.315,954,3.315,955,2.787,956,3.315,957,3.315,958,4.51,959,3.315,960,3.315,961,3.315,962,3.315,963,3.315,964,3.315,965,3.315,966,3.315,967,3.315,968,3.315,969,3.315,970,3.315,971,4.51,972,3.315,973,3.315,974,3.315,975,4.51,976,3.315]],["title/injectables/SentryService.html",[24,1.519,244,0.773]],["body/injectables/SentryService.html",[0,0.05,3,0.388,4,0.341,5,0.296,17,0.341,18,1.325,19,0.814,21,1.654,24,2.413,25,3.153,26,0.611,28,1.228,29,0.029,30,0.969,31,0.611,32,1.051,37,3.085,38,1.056,39,3.457,40,0.667,42,2.088,43,0.772,51,2.088,52,1.648,53,1.779,58,0.388,60,1.529,61,1.648,62,2.756,75,2.853,87,0.022,88,0.022,102,1.059,244,1.228,245,1.779,653,3.525,727,4.565,800,2.756,977,3.525,978,5.259,979,4.193,980,5.259,981,4.193,982,4.193,983,3.525,984,5.259,985,4.193,986,4.193,987,4.193]],["title/classes/StringToNumberPipe.html",[0,0.039,389,1.968]],["body/classes/StringToNumberPipe.html",[0,0.051,2,1.551,3,0.394,4,0.346,5,0.301,8,0.993,15,3.488,17,0.346,18,1.337,19,0.819,26,0.494,28,0.993,29,0.029,30,0.784,31,0.494,32,0.85,38,1.072,40,0.494,43,0.784,58,0.394,63,1.44,71,1.57,87,0.023,88,0.023,102,1.148,109,1.796,389,3.155,390,3.488,520,4.255,595,1.952,779,4.461,782,4.862,783,3.904,784,4.461,785,4.255,786,5.091,988,3.576,989,5.306,990,4.253,991,5.306,992,4.253,993,4.253]],["title/controllers/TagController.html",[89,1.404,133,2.175]],["body/controllers/TagController.html",[0,0.032,3,0.245,4,0.216,5,0.187,8,1.236,17,0.216,18,0.97,19,0.877,26,0.578,28,1.163,29,0.029,30,0.917,31,0.578,32,0.995,38,1.435,40,0.641,43,0.488,58,0.245,59,1.436,60,0.965,87,0.016,88,0.016,89,1.123,91,1.436,94,2.112,95,3.273,105,3.478,106,1.574,108,3.273,109,1.686,127,2.461,133,2.53,221,1.664,237,1.836,256,0.965,259,1.686,285,1.815,295,1.123,304,1.947,306,2.842,316,3.273,319,1.766,328,2.476,349,3.631,369,2.832,373,2.53,374,1.947,375,2.225,376,2.48,377,3.236,378,3.236,393,2.832,402,1.574,403,2.225,415,2.289,417,2.225,429,3.892,434,1.574,436,2.53,461,3.28,743,4.295,994,2.225,995,3.236,996,3.236,997,3.236,998,3.236,999,2.225,1000,2.647,1001,3.813,1002,2.647,1003,2.647,1004,5.003,1005,3.849,1006,2.225,1007,2.647,1008,2.647,1009,2.225,1010,2.647,1011,2.647,1012,3.849,1013,2.225,1014,2.647,1015,2.647,1016,2.647,1017,2.647,1018,2.225,1019,3.849,1020,2.647,1021,2.225,1022,2.647,1023,2.647,1024,2.647,1025,2.647,1026,2.647,1027,2.647,1028,2.647,1029,2.647]],["title/classes/TagDto.html",[0,0.039,461,1.796]],["body/classes/TagDto.html",[0,0.056,2,1.285,3,0.326,4,0.287,5,0.249,17,0.287,19,0.922,21,1.109,26,0.682,28,0.824,29,0.029,30,0.974,31,0.682,32,0.705,40,0.614,58,0.326,71,1.184,87,0.02,88,0.02,94,2.243,100,3.891,102,1.113,159,2.774,212,2.317,221,1.848,253,1.592,259,1.791,260,1.928,285,1.928,295,1.496,349,3.401,461,2.551,476,2.964,478,2.964,539,5.187,551,2.317,659,2.594,838,3.952,839,3.952,1030,2.964,1031,4.323,1032,4.701,1033,4.701,1034,3.526,1035,4.701,1036,4.701,1037,3.526,1038,4.701,1039,3.526,1040,5.289,1041,2.594,1042,3.526,1043,3.526,1044,3.526,1045,3.526,1046,3.526,1047,3.526]],["title/entities/TagEntity.html",[159,1.519,249,1.519]],["body/entities/TagEntity.html",[0,0.045,3,0.352,4,0.31,5,0.269,9,1.614,17,0.31,19,0.945,26,0.7,29,0.029,31,0.7,32,0.988,40,0.638,58,0.352,71,1.246,87,0.021,88,0.021,94,2.555,102,1.071,143,2.667,159,2.269,221,1.727,249,1.746,250,2.263,253,1.674,259,1.859,260,2.002,285,2.196,287,3.637,289,4.276,293,1.895,294,3.199,295,1.614,305,3.265,498,3.199,516,3.199,528,4.156,1031,4.04,1048,3.199,1049,4.944,1050,4.944,1051,3.806,1052,5.491,1053,3.806,1054,4.944,1055,3.806,1056,4.944,1057,3.806,1058,3.806,1059,3.806]],["title/injectables/TagService.html",[127,1.796,244,0.773]],["body/injectables/TagService.html",[0,0.034,3,0.266,4,0.234,5,0.203,9,1.217,17,0.234,18,1.028,19,0.89,21,1.283,26,0.634,28,1.275,29,0.029,30,1.006,31,0.634,32,1.091,38,1.302,40,0.678,43,0.529,58,0.266,61,1.128,63,1.607,87,0.017,88,0.017,109,1.607,127,2.213,139,1.706,159,2.506,221,1.785,237,1.717,244,0.953,245,1.217,259,1.75,260,1.046,273,2.213,285,1.884,293,1.429,295,1.217,306,2.885,319,1.317,328,2.53,349,2.963,423,3.078,429,2.111,433,2.426,434,1.706,436,1.886,461,3.339,582,3.074,595,1.317,596,2.822,600,2.111,601,1.886,641,2.412,644,3.429,659,2.111,662,2.412,995,3.429,996,3.429,997,3.429,998,3.429,999,3.429,1001,2.412,1004,3.99,1006,3.429,1009,3.429,1013,3.429,1018,2.412,1021,2.412,1031,3.492,1060,2.412,1061,2.87,1062,2.87,1063,2.87,1064,2.87,1065,2.87,1066,2.87,1067,5.169,1068,5.169,1069,2.87,1070,2.87,1071,2.87,1072,4.079,1073,4.079,1074,2.87,1075,2.87,1076,2.87,1077,2.87,1078,4.079,1079,2.87,1080,2.87,1081,2.87,1082,2.87,1083,2.87,1084,2.87]],["title/interfaces/UploadedFileDto.html",[314,2.175,1085,2.175]],["body/interfaces/UploadedFileDto.html",[3,0.314,4,0.276,5,0.47,8,0.792,17,0.276,29,0.029,30,1.101,31,0.756,58,0.314,71,1.306,87,0.019,88,0.019,102,1.236,177,3.65,253,1.55,314,3.01,316,2.229,332,2.851,399,2.495,469,3.369,535,2.495,750,3.85,820,3.65,866,4.668,877,5.024,882,5.024,883,5.024,914,5.293,1085,3.01,1086,3.391,1087,2.851,1088,5.186,1089,3.391,1090,5.977,1091,5.553,1092,5.553,1093,4.58,1094,4.58,1095,4.58,1096,4.58,1097,4.58,1098,4.58,1099,4.58,1100,4.58,1101,4.58,1102,4.58,1103,4.58]],["title/coverage.html",[1104,3.314]],["body/coverage.html",[0,0.075,1,1.986,5,0.214,6,2.54,7,3.112,24,1.386,29,0.029,31,0.351,54,1.986,55,2.223,87,0.018,88,0.018,89,2.243,90,1.986,92,2.54,103,1.639,117,1.986,122,1.639,123,1.639,124,1.639,125,1.504,126,1.639,127,1.639,131,2.223,132,1.986,133,1.986,134,1.986,140,2.223,143,1.386,145,1.662,150,2.223,155,1.986,159,1.386,185,1.986,237,0.95,242,1.797,244,1.412,246,3.112,249,2.24,251,2.295,252,3.556,254,0.95,303,2.54,314,1.986,315,1.797,368,1.386,386,1.797,387,1.986,389,1.797,390,1.986,394,1.986,399,2.223,402,1.797,444,2.54,461,1.639,493,2.54,534,2.54,552,3.112,553,2.54,577,2.54,596,1.797,597,1.986,639,2.54,661,2.223,757,1.986,758,2.223,759,2.223,760,2.54,774,5.497,778,2.54,790,2.54,798,2.54,833,2.54,843,2.54,861,2.54,884,2.223,890,2.223,934,2.54,945,2.54,977,2.54,988,2.54,994,2.54,1030,2.54,1048,2.54,1060,2.54,1085,1.986,1087,2.54,1104,2.223,1105,3.021,1106,3.021,1107,3.021,1108,4.68,1109,5.567,1110,6.222,1111,6.396,1112,3.021,1113,2.54,1114,2.54,1115,2.54,1116,4.23,1117,3.021,1118,2.54,1119,3.556,1120,2.54,1121,4.445,1122,3.021,1123,3.021,1124,4.881,1125,4.881,1126,4.23,1127,3.021,1128,3.021,1129,3.021,1130,4.23,1131,3.021,1132,3.021,1133,3.021,1134,2.54,1135,3.021,1136,4.881,1137,4.881,1138,3.112,1139,3.021,1140,3.021,1141,3.021,1142,3.021,1143,3.021,1144,3.021,1145,3.021,1146,3.021]],["title/dependencies.html",[114,2.614,1147,2.328]],["body/dependencies.html",[0,0.062,5,0.292,29,0.029,43,0.762,46,2.717,47,3.042,52,1.625,53,2.422,87,0.022,88,0.022,106,2.459,114,2.717,137,3.476,139,2.459,163,3.476,164,4.382,167,3.426,170,3.042,174,3.476,175,3.042,183,3.042,293,2.059,397,3.042,551,2.717,785,3.042,806,3.476,897,3.476,899,3.476,952,3.476,955,3.476,983,3.476,1148,4.134,1149,4.134,1150,5.994,1151,4.134,1152,4.134,1153,4.134,1154,4.134,1155,4.134,1156,4.134,1157,4.134,1158,4.134,1159,4.134,1160,4.134,1161,4.134,1162,4.134,1163,4.134,1164,4.134,1165,4.134,1166,4.134,1167,4.134,1168,4.134,1169,4.134,1170,4.134,1171,4.134,1172,4.134,1173,4.134,1174,4.134,1175,4.134,1176,4.134,1177,4.134,1178,4.134,1179,4.134,1180,4.134]],["title/miscellaneous/enumerations.html",[1181,1.503,1182,3.343]],["body/miscellaneous/enumerations.html",[17,0.399,29,0.028,87,0.025,88,0.025,212,3.8,285,2.108,313,2.879,471,4.254,526,2.658,595,2.916,1041,4.254,1181,2.658,1182,4.119,1183,4.9,1184,5.782,1185,4.9,1186,5.782,1187,4.9]],["title/miscellaneous/functions.html",[1181,1.503,1188,3.343]],["body/miscellaneous/functions.html",[17,0.424,29,0.025,87,0.025,88,0.025,117,4.144,1138,3.827,1181,2.822,1188,4.373,1189,4.373]],["title/index.html",[17,0.226,650,2.328,1190,2.77]],["body/index.html",[4,0.34,8,0.975,29,0.029,52,2.253,77,3.07,79,3.508,87,0.022,88,0.022,176,3.508,215,3.508,582,2.482,1104,3.07,1191,4.173,1192,4.173,1193,5.244,1194,4.173,1195,4.173,1196,4.173,1197,4.173,1198,4.173,1199,4.173,1200,4.173,1201,4.173,1202,6.419,1203,4.173,1204,3.508,1205,4.173,1206,6.325,1207,4.173,1208,5.244,1209,4.173,1210,4.173,1211,4.173,1212,4.173,1213,5.244,1214,5.244,1215,4.173,1216,4.173,1217,4.173,1218,5.244,1219,5.244,1220,4.173,1221,4.173,1222,4.173,1223,4.173,1224,4.173,1225,3.508,1226,4.173,1227,4.173,1228,4.173,1229,4.173,1230,4.173,1231,4.173,1232,4.173,1233,4.173,1234,3.508,1235,4.173,1236,4.173,1237,4.173,1238,4.173,1239,4.173,1240,4.173,1241,3.508]],["title/modules.html",[113,3.314]],["body/modules.html",[29,0.025,87,0.025,88,0.025,112,3.439,113,3.849,1225,4.399,1242,5.233,1243,5.233,1244,5.233]],["title/overview.html",[1245,3.787]],["body/overview.html",[2,1.581,24,2.677,29,0.028,87,0.023,88,0.023,91,2.353,103,3.165,111,3.951,112,4.479,114,2.85,115,3.646,116,3.646,117,2.85,118,3.646,119,3.646,120,3.646,121,3.646,122,3.165,123,3.165,124,3.165,125,2.905,126,3.165,127,3.165,128,4.515,129,3.646,130,3.646,245,1.839,250,2.579,342,3.53,344,3.646,1085,2.85,1134,3.646,1245,3.646,1246,4.337,1247,4.337]],["title/properties.html",[253,1.346,1147,2.328]],["body/properties.html",[8,1.187,29,0.028,87,0.025,88,0.025,96,4.273,99,3.739,107,4.273,253,1.721,1041,3.739,1204,4.273,1234,4.273,1241,4.273,1248,5.083,1249,5.083,1250,5.083]],["title/miscellaneous/variables.html",[1181,1.503,1251,3.343]],["body/miscellaneous/variables.html",[9,2.634,10,1.93,17,0.244,29,0.029,31,0.686,34,1.969,71,0.755,87,0.018,88,0.018,102,0.775,109,1.645,131,2.204,140,3.094,150,3.094,216,3.003,225,2.518,229,3.094,234,4.085,237,1.657,242,2.501,243,2.518,246,2.204,248,3.535,250,1.781,358,1.625,467,4.085,595,2.85,596,2.501,597,2.764,682,2.518,709,2.518,820,2.764,884,3.094,890,3.094,1108,2.518,1113,2.518,1114,3.535,1115,3.535,1118,2.518,1119,4.429,1120,2.518,1121,2.518,1138,2.204,1181,1.625,1189,2.518,1251,2.518,1252,2.996,1253,2.996,1254,5.269,1255,2.996,1256,2.996,1257,2.996,1258,2.996,1259,2.996,1260,2.996,1261,2.996,1262,2.996,1263,2.996,1264,2.996,1265,2.996,1266,2.996,1267,2.996,1268,2.996,1269,2.996,1270,2.996,1271,2.996,1272,2.996,1273,2.996,1274,2.996,1275,2.996,1276,2.996,1277,2.996,1278,2.996,1279,2.996,1280,2.996,1281,2.996,1282,4.205,1283,2.996,1284,2.996,1285,2.996,1286,2.996,1287,4.205,1288,4.205,1289,4.205,1290,4.205,1291,4.205,1292,4.205,1293,4.205,1294,4.205,1295,4.205,1296,4.205,1297,4.205,1298,4.205,1299,4.205,1300,4.205,1301,4.859,1302,4.205,1303,4.859,1304,4.859,1305,4.859,1306,4.859,1307,4.859,1308,4.859,1309,4.859,1310,4.859,1311,4.859,1312,2.996,1313,2.996]]],"invertedIndex":[["",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":774,"title":{},"body":{"classes/BadValidationRequestException.html":{},"coverage.html":{}}}],["0.0.1",{"_index":107,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["0.1.13",{"_index":1171,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1159,"title":{},"body":{"dependencies.html":{}}}],["0.3.17",{"_index":1175,"title":{},"body":{"dependencies.html":{}}}],["0.32.4",{"_index":1174,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1158,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1111,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1112,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1130,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1133,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":342,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"overview.html":{}}}],["1.9.1",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["1.9.3",{"_index":1166,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1117,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1137,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":1135,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1056,"title":{},"body":{"entities/TagEntity.html":{}}}],["10.0.0",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["10.2.6",{"_index":1167,"title":{},"body":{"dependencies.html":{}}}],["10/10",{"_index":1144,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1116,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["1024",{"_index":1282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1025",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["11",{"_index":1134,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["11.10.1",{"_index":1160,"title":{},"body":{"dependencies.html":{}}}],["14d",{"_index":1299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["15",{"_index":1283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1s",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["2",{"_index":343,"title":{},"body":{"controllers/ArticleController.html":{}}}],["2.1.0",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":1163,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":1127,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":277,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["25m",{"_index":1297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":344,"title":{},"body":{"controllers/ArticleController.html":{},"overview.html":{}}}],["3.0.0",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["3.10.0",{"_index":1177,"title":{},"body":{"dependencies.html":{}}}],["3.5.2",{"_index":1165,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":1142,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":1129,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1136,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":1265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["360",{"_index":916,"title":{},"body":{"injectables/FileService.html":{}}}],["360px",{"_index":875,"title":{},"body":{"injectables/FileService.html":{}}}],["39;0.0.1&#39",{"_index":101,"title":{},"body":{"controllers/AppController.html":{}}}],["4",{"_index":1246,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":1180,"title":{},"body":{"dependencies.html":{}}}],["4.7.8",{"_index":1162,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":1132,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1143,"title":{},"body":{"coverage.html":{}}}],["5.2.3",{"_index":1156,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":1123,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":1125,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1108,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["53",{"_index":1139,"title":{},"body":{"coverage.html":{}}}],["6.9.4",{"_index":1169,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1128,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1126,"title":{},"body":{"coverage.html":{}}}],["7.1.4",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["7.61.0",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1173,"title":{},"body":{"dependencies.html":{}}}],["7/13",{"_index":1140,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":1124,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1141,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1247,"title":{},"body":{"overview.html":{}}}],["80",{"_index":1131,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1122,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":1176,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["_req",{"_index":860,"title":{},"body":{"injectables/FileService.html":{}}}],["acceptfile",{"_index":903,"title":{},"body":{"injectables/FileService.html":{}}}],["acceptlanguageresolver",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["accepts",{"_index":323,"title":{},"body":{"controllers/ArticleController.html":{}}}],["according",{"_index":792,"title":{},"body":{"classes/CustomValidationPipe.html":{}}}],["active",{"_index":445,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{}}}],["activity",{"_index":352,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["activity.'})@apinotfoundresponse({description",{"_index":355,"title":{},"body":{"controllers/ArticleController.html":{}}}],["adapter",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["addselect('date_of_publication",{"_index":625,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["addselect('title",{"_index":624,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["admin",{"_index":955,"title":{},"body":{"injectables/PushNotificationService.html":{},"dependencies.html":{}}}],["admin/lib/messaging/messaging",{"_index":953,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["administration",{"_index":365,"title":{},"body":{"controllers/ArticleController.html":{}}}],["administrator",{"_index":81,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["allowed",{"_index":858,"title":{},"body":{"injectables/FileService.html":{}}}],["allowedfiletypes",{"_index":904,"title":{},"body":{"injectables/FileService.html":{}}}],["allowedfiletypes.includes(file.mimetype",{"_index":907,"title":{},"body":{"injectables/FileService.html":{}}}],["already",{"_index":1001,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["amazing",{"_index":1226,"title":{},"body":{"index.html":{}}}],["android",{"_index":963,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["andwhere('(content.title",{"_index":616,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["andwhere('article.active",{"_index":614,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["andwhere('article.articletype",{"_index":615,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["andwhere('title",{"_index":628,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["api",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/PushNotificationService.html":{}}}],["apiconflictresponse",{"_index":1019,"title":{},"body":{"controllers/TagController.html":{}}}],["apinotfoundresponse",{"_index":393,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/TagController.html":{}}}],["apioperation",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/TagController.html":{}}}],["apioperation({summary",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/TagController.html":{}}}],["app",{"_index":1204,"title":{},"body":{"index.html":{},"properties.html":{}}}],["app.controller",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":104,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":90,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appdatasource",{"_index":1115,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["applications",{"_index":1198,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":112,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":103,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":960,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["argumentmetadata",{"_index":786,"title":{},"body":{"classes/CheckArticleType.html":{},"classes/StringToNumberPipe.html":{}}}],["argumentshost",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":548,"title":{},"body":{"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{}}}],["article",{"_index":254,"title":{},"body":{"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"injectables/EmailService.html":{},"injectables/PushNotificationService.html":{},"coverage.html":{}}}],["article.'})@apinotfoundresponse({description",{"_index":317,"title":{},"body":{"controllers/ArticleController.html":{}}}],["article.article.articletype",{"_index":962,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["article.articlecontentid",{"_index":810,"title":{},"body":{"injectables/EmailService.html":{}}}],["article.articlecontents",{"_index":262,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["article.body",{"_index":816,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PushNotificationService.html":{}}}],["article.childrenarticles",{"_index":510,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["article.coverimage",{"_index":817,"title":{},"body":{"injectables/EmailService.html":{}}}],["article.entity",{"_index":294,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/TagEntity.html":{}}}],["article.id",{"_index":961,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["article.parentarticle",{"_index":505,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["article.service",{"_index":385,"title":{},"body":{"controllers/ArticleController.html":{}}}],["article.title",{"_index":814,"title":{},"body":{"injectables/EmailService.html":{}}}],["article=${json.stringify(newarticledto",{"_index":666,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article__tag",{"_index":518,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["article_id",{"_index":267,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{}}}],["article_type",{"_index":503,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["articlecontent",{"_index":326,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{}}}],["articlecontent.article",{"_index":501,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["articlecontent.article.active",{"_index":483,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.article.articletype",{"_index":475,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.article.parent",{"_index":485,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.article.tags?.filter(tag",{"_index":489,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.body",{"_index":481,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.coverimage",{"_index":487,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.dateofpublication",{"_index":492,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.id",{"_index":473,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.language",{"_index":477,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontent.title",{"_index":479,"title":{},"body":{"classes/ArticleDto.html":{}}}],["articlecontententities",{"_index":719,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlecontententity",{"_index":145,"title":{"entities/ArticleContentEntity.html":{}},"body":{"modules/AppModule.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{},"coverage.html":{}}}],["articlecontentid",{"_index":366,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["articlecontentrepository",{"_index":584,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["articlecontents",{"_index":494,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["articlecontroller",{"_index":132,"title":{"controllers/ArticleController.html":{}},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"coverage.html":{}}}],["articledto",{"_index":368,"title":{"classes/ArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"coverage.html":{}}}],["articledto(articlecontent",{"_index":620,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["articledto(articlecontententity",{"_index":725,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articledto(newarticlecontententities[0",{"_index":713,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articledto(newarticlecontententity",{"_index":755,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleentity",{"_index":143,"title":{"entities/ArticleEntity.html":{}},"body":{"modules/AppModule.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/TagEntity.html":{},"coverage.html":{}}}],["articleid",{"_index":255,"title":{},"body":{"entities/ArticleContentEntity.html":{},"injectables/PushNotificationService.html":{}}}],["articlerepository",{"_index":642,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlerequestdto",{"_index":315,"title":{"classes/ArticleRequestDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["articles",{"_index":305,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"entities/TagEntity.html":{}}}],["articles/search",{"_index":554,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["articlesearchcontroller",{"_index":134,"title":{"controllers/ArticleSearchController.html":{}},"body":{"modules/AppModule.html":{},"controllers/ArticleSearchController.html":{},"coverage.html":{}}}],["articlesearchservice",{"_index":122,"title":{"injectables/ArticleSearchService.html":{}},"body":{"modules/AppModule.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"coverage.html":{},"overview.html":{}}}],["articleservice",{"_index":123,"title":{"injectables/ArticleService.html":{}},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"coverage.html":{},"overview.html":{}}}],["articletype",{"_index":327,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"injectables/PushNotificationService.html":{}}}],["articletypeenum",{"_index":313,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"miscellaneous/enumerations.html":{}}}],["asc",{"_index":1076,"title":{},"body":{"injectables/TagService.html":{}}}],["assets",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{}}}],["associated",{"_index":463,"title":{},"body":{"classes/ArticleDto.html":{}}}],["async",{"_index":306,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/PushNotificationService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["atd",{"_index":345,"title":{},"body":{"controllers/ArticleController.html":{}}}],["attachments",{"_index":819,"title":{},"body":{"injectables/EmailService.html":{}}}],["attribute",{"_index":762,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["attributes",{"_index":770,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["author",{"_index":1234,"title":{},"body":{"index.html":{},"properties.html":{}}}],["autocomplete",{"_index":568,"title":{},"body":{"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{}}}],["autocomplete.'})@apinotfoundresponse({description",{"_index":565,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["available",{"_index":1038,"title":{},"body":{"classes/TagDto.html":{}}}],["await",{"_index":423,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/FileService.html":{},"injectables/PushNotificationService.html":{},"injectables/TagService.html":{}}}],["backend",{"_index":96,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["backers",{"_index":1227,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":416,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"injectables/FileService.html":{}}}],["badrequestexception('missing",{"_index":633,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["badrequestexception('only",{"_index":909,"title":{},"body":{"injectables/FileService.html":{}}}],["badrequestexception(`cannot",{"_index":680,"title":{},"body":{"injectables/ArticleService.html":{}}}],["badrequestexception(`missing",{"_index":703,"title":{},"body":{"injectables/ArticleService.html":{}}}],["badrequestexception(`unsupported",{"_index":789,"title":{},"body":{"classes/CheckArticleType.html":{}}}],["badvalidationrequestexception",{"_index":757,"title":{"classes/BadValidationRequestException.html":{}},"body":{"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{},"coverage.html":{}}}],["badvalidationrequestexception(errors",{"_index":797,"title":{},"body":{"classes/CustomValidationPipe.html":{}}}],["belongs",{"_index":270,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["best",{"_index":821,"title":{},"body":{"injectables/EmailService.html":{}}}],["body",{"_index":256,"title":{},"body":{"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"injectables/PushNotificationService.html":{},"controllers/TagController.html":{}}}],["body('active",{"_index":442,"title":{},"body":{"controllers/ArticleController.html":{}}}],["body(customvalidationpipe",{"_index":422,"title":{},"body":{"controllers/ArticleController.html":{}}}],["body).catch((error",{"_index":431,"title":{},"body":{"controllers/ArticleController.html":{}}}],["body.'})@apinotfoundresponse({description",{"_index":559,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["body.coverimage",{"_index":425,"title":{},"body":{"controllers/ArticleController.html":{}}}],["boolean",{"_index":353,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/FileService.html":{}}}],["bootstrap",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1244,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1242,"title":{},"body":{"modules.html":{}}}],["buckovsky",{"_index":1250,"title":{},"body":{"properties.html":{}}}],["buffer",{"_index":914,"title":{},"body":{"injectables/FileService.html":{},"interfaces/UploadedFileDto.html":{}}}],["building",{"_index":1194,"title":{},"body":{"index.html":{}}}],["bytes",{"_index":1103,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["cache",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["cacheinterceptor",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["capture",{"_index":985,"title":{},"body":{"injectables/SentryService.html":{}}}],["captureexception",{"_index":978,"title":{},"body":{"injectables/SentryService.html":{}}}],["captureexception(message",{"_index":980,"title":{},"body":{"injectables/SentryService.html":{}}}],["cascade",{"_index":263,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{}}}],["catch",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch((error",{"_index":831,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FileService.html":{}}}],["catch(e",{"_index":677,"title":{},"body":{"injectables/ArticleService.html":{}}}],["catch(exception",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":938,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catching",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["cb",{"_index":853,"title":{},"body":{"injectables/FileService.html":{}}}],["cb(new",{"_index":908,"title":{},"body":{"injectables/FileService.html":{}}}],["cb(null",{"_index":885,"title":{},"body":{"injectables/FileService.html":{}}}],["charset",{"_index":1275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkarticletype",{"_index":386,"title":{"classes/CheckArticleType.html":{}},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"classes/CheckArticleType.html":{},"coverage.html":{}}}],["checking",{"_index":588,"title":{},"body":{"injectables/ArticleSearchService.html":{},"classes/CheckArticleType.html":{}}}],["checks",{"_index":763,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["checksearchpattern",{"_index":578,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["checksearchpattern(pattern",{"_index":585,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["childrenarticles",{"_index":495,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["cid",{"_index":828,"title":{},"body":{"injectables/EmailService.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"classes/ErrorResponse.html":{},"classes/HttpExceptionFilter.html":{},"classes/StringToNumberPipe.html":{},"classes/TagDto.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"classes/ErrorResponse.html":{},"classes/HttpExceptionFilter.html":{},"classes/StringToNumberPipe.html":{},"classes/TagDto.html":{},"overview.html":{}}}],["clickaction",{"_index":967,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["cluster_appmodule",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":842,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["column",{"_index":289,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"entities/TagEntity.html":{}}}],["column('datetime",{"_index":280,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{}}}],["column('enum",{"_index":286,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{}}}],["column('longtext",{"_index":271,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["column('varchar",{"_index":274,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["column({default",{"_index":498,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/TagEntity.html":{}}}],["column({name",{"_index":266,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["column({nullable",{"_index":508,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["coming",{"_index":468,"title":{},"body":{"classes/ArticleDto.html":{}}}],["computer",{"_index":1101,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["condition",{"_index":606,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["config",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["config.ts",{"_index":1119,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["config/database",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["config/logger",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":1021,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["conflictexception(\"tag",{"_index":1069,"title":{},"body":{"injectables/TagService.html":{}}}],["const",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"classes/StringToNumberPipe.html":{},"injectables/TagService.html":{}}}],["constructor",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ArticleDto.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/TagDto.html":{},"injectables/TagService.html":{}}}],["constructor(@inject(winston_module_provider",{"_index":807,"title":{},"body":{"injectables/EmailService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{}}}],["constructor(articlecontent",{"_index":448,"title":{},"body":{"classes/ArticleDto.html":{}}}],["constructor(articlecontentrepository",{"_index":581,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["constructor(errors",{"_index":765,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["constructor(httpadapterhost",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["constructor(logger",{"_index":800,"title":{},"body":{"injectables/EmailService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{}}}],["constructor(private",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/FileService.html":{},"controllers/TagController.html":{}}}],["constructor(sentryservice",{"_index":849,"title":{},"body":{"injectables/FileService.html":{}}}],["constructor(tagentity",{"_index":1032,"title":{},"body":{"classes/TagDto.html":{}}}],["constructor(tagrepository",{"_index":641,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["contact",{"_index":80,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["containing",{"_index":348,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["content",{"_index":269,"title":{},"body":{"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{}}}],["content.body",{"_index":617,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["content.entity",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{}}}],["content.entity.ts",{"_index":252,"title":{},"body":{"entities/ArticleContentEntity.html":{},"coverage.html":{}}}],["content.entity.ts:13",{"_index":284,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content.entity.ts:19",{"_index":268,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content.entity.ts:22",{"_index":288,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content.entity.ts:25",{"_index":290,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content.entity.ts:28",{"_index":272,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content.entity.ts:31",{"_index":278,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content.entity.ts:34",{"_index":282,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["content.entity.ts:38",{"_index":265,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["contenttype",{"_index":826,"title":{},"body":{"injectables/EmailService.html":{}}}],["context",{"_index":815,"title":{},"body":{"injectables/EmailService.html":{}}}],["controller",{"_index":89,"title":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/TagController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/TagController.html":{},"coverage.html":{}}}],["controller('articles",{"_index":404,"title":{},"body":{"controllers/ArticleController.html":{}}}],["controller('articles/search",{"_index":570,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["controller('tags",{"_index":1020,"title":{},"body":{"controllers/TagController.html":{}}}],["controllers",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/TagController.html":{},"overview.html":{}}}],["count",{"_index":338,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["cover",{"_index":455,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{}}}],["coverage",{"_index":1104,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["coverimage",{"_index":257,"title":{},"body":{"entities/ArticleContentEntity.html":{},"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"injectables/EmailService.html":{}}}],["coverimagetodelete",{"_index":741,"title":{},"body":{"injectables/ArticleService.html":{}}}],["create",{"_index":316,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{},"interfaces/UploadedFileDto.html":{}}}],["createarticle",{"_index":307,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["createarticle(@param('articletype",{"_index":421,"title":{},"body":{"controllers/ArticleController.html":{}}}],["createarticle(articletype",{"_index":312,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["created",{"_index":1005,"title":{},"body":{"controllers/TagController.html":{}}}],["createquerybuilder('content",{"_index":610,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["creates",{"_index":325,"title":{},"body":{"controllers/ArticleController.html":{}}}],["createtag",{"_index":995,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["createtag(@body(customvalidationpipe",{"_index":1022,"title":{},"body":{"controllers/TagController.html":{}}}],["createtag(newtag",{"_index":999,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["creating",{"_index":647,"title":{},"body":{"injectables/ArticleService.html":{}}}],["creation",{"_index":525,"title":{},"body":{"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{}}}],["cs",{"_index":471,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"miscellaneous/enumerations.html":{}}}],["ctx",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":544,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["current_timestamp",{"_index":523,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["customvalidationpipe",{"_index":402,"title":{"classes/CustomValidationPipe.html":{}},"body":{"controllers/ArticleController.html":{},"classes/CustomValidationPipe.html":{},"controllers/TagController.html":{},"coverage.html":{}}}],["daily",{"_index":1178,"title":{},"body":{"dependencies.html":{}}}],["dailyrotatefile",{"_index":1287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":727,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{}}}],["database",{"_index":682,"title":{},"body":{"injectables/ArticleService.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":1258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource(databaseconfig",{"_index":1259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasourceoptions",{"_index":1262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":279,"title":{},"body":{"entities/ArticleContentEntity.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{}}}],["date%.log",{"_index":1289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date_of_publication",{"_index":281,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["dateofpublication",{"_index":258,"title":{},"body":{"entities/ArticleContentEntity.html":{},"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/EmailService.html":{}}}],["datepattern",{"_index":1292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dd",{"_index":1295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deactivated",{"_index":361,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deactivation",{"_index":364,"title":{},"body":{"controllers/ArticleController.html":{}}}],["debug",{"_index":1288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decorators",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{}}}],["default",{"_index":9,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/FileService.html":{},"injectables/PushNotificationService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"miscellaneous/variables.html":{}}}],["default_language",{"_index":596,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/TagService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["defined",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["delete",{"_index":743,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/FileService.html":{},"controllers/TagController.html":{}}}],["deleted",{"_index":360,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/FileService.html":{}}}],["deletetag",{"_index":996,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["deletetag(@body",{"_index":1028,"title":{},"body":{"controllers/TagController.html":{}}}],["deletetag(newtag",{"_index":1006,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["dependencies",{"_index":114,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":631,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"interfaces/UploadedFileDto.html":{},"index.html":{},"properties.html":{}}}],["destination",{"_index":883,"title":{},"body":{"injectables/FileService.html":{},"interfaces/UploadedFileDto.html":{}}}],["detail",{"_index":335,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ErrorResponse.html":{}}}],["details",{"_index":334,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["developers",{"_index":836,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["developing",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["development",{"_index":1205,"title":{},"body":{"index.html":{}}}],["dir",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["directory_images",{"_index":884,"title":{},"body":{"injectables/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dirname",{"_index":1290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["diskstorage",{"_index":882,"title":{},"body":{"injectables/FileService.html":{},"interfaces/UploadedFileDto.html":{}}}],["dmitrij",{"_index":1249,"title":{},"body":{"properties.html":{}}}],["documentation",{"_index":1105,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":535,"title":{},"body":{"classes/ArticleRequestDto.html":{},"classes/CustomValidationPipe.html":{},"interfaces/UploadedFileDto.html":{}}}],["during",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"classes/ArticleRequestDto.html":{}}}],["e",{"_index":679,"title":{},"body":{"injectables/ArticleService.html":{}}}],["e2e",{"_index":1215,"title":{},"body":{"index.html":{}}}],["each",{"_index":324,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["efficient",{"_index":1195,"title":{},"body":{"index.html":{}}}],["email",{"_index":706,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/EmailService.html":{}}}],["email_service",{"_index":808,"title":{},"body":{"injectables/EmailService.html":{}}}],["emailservice",{"_index":124,"title":{"injectables/EmailService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["en",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"classes/ArticleRequestDto.html":{},"classes/TagDto.html":{},"miscellaneous/enumerations.html":{}}}],["encoding",{"_index":1090,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["endpoints/**/*.entity{.ts,.js",{"_index":1271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endpoints/article/article.controller",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/article/article.service",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/article/search/article",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/push",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/tag/tag.controller",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints/tag/tag.service",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["enough",{"_index":621,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["entire",{"_index":1093,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["entities",{"_index":250,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"entities/TagEntity.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/**/*.entity{.ts,.js",{"_index":1272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/article",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/article.entity",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/tag.entity",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":249,"title":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"entities/TagEntity.html":{}},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/TagEntity.html":{},"coverage.html":{}}}],["entity('article",{"_index":531,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["entity('article_content",{"_index":301,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["entity('tag",{"_index":1059,"title":{},"body":{"entities/TagEntity.html":{}}}],["enum",{"_index":287,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"entities/TagEntity.html":{}}}],["enumerations",{"_index":1182,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":10,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"classes/BadValidationRequestException.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["errorresponse",{"_index":54,"title":{"classes/ErrorResponse.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"classes/ErrorResponse.html":{},"coverage.html":{}}}],["errors",{"_index":768,"title":{},"body":{"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{}}}],["errors.foreach((error",{"_index":771,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["example",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"classes/ArticleDto.html":{},"classes/TagDto.html":{}}}],["exception",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/SentryService.html":{}}}],["exception.filter",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["exception.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:10",{"_index":935,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:13",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.filter.ts:14",{"_index":937,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:19",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":939,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":942,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception['message",{"_index":82,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception['stack",{"_index":86,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfactory",{"_index":796,"title":{},"body":{"classes/CustomValidationPipe.html":{}}}],["exceptionfilter",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exceptions",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["exist",{"_index":435,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["exists",{"_index":429,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["exists.'})@apiconflictresponse({description",{"_index":1000,"title":{},"body":{"controllers/TagController.html":{}}}],["exists.'})@httpcode(200)@post",{"_index":1002,"title":{},"body":{"controllers/TagController.html":{}}}],["exitonerror",{"_index":1285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{}}}],["exports",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["express",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":852,"title":{},"body":{"injectables/FileService.html":{}}}],["express/multer/interfaces/multer",{"_index":893,"title":{},"body":{"injectables/FileService.html":{}}}],["extends",{"_index":764,"title":{},"body":{"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{}}}],["extension",{"_index":859,"title":{},"body":{"injectables/FileService.html":{}}}],["extname",{"_index":898,"title":{},"body":{"injectables/FileService.html":{}}}],["fallbacklanguage",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["false",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileService.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":707,"title":{},"body":{"injectables/ArticleService.html":{}}}],["field",{"_index":1096,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["fieldname",{"_index":1091,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["file.dto",{"_index":400,"title":{},"body":{"controllers/ArticleController.html":{}}}],["file.dto.ts",{"_index":1087,"title":{},"body":{"interfaces/UploadedFileDto.html":{},"coverage.html":{}}}],["filefilter",{"_index":845,"title":{},"body":{"injectables/FileService.html":{}}}],["filefilter(_req",{"_index":851,"title":{},"body":{"injectables/FileService.html":{}}}],["fileinterceptor",{"_index":396,"title":{},"body":{"controllers/ArticleController.html":{}}}],["filename",{"_index":820,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FileService.html":{},"interfaces/UploadedFileDto.html":{},"miscellaneous/variables.html":{}}}],["files",{"_index":857,"title":{},"body":{"injectables/FileService.html":{}}}],["fileservice",{"_index":125,"title":{"injectables/FileService.html":{}},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/FileService.html":{},"coverage.html":{},"overview.html":{}}}],["fileservice.filefilter",{"_index":887,"title":{},"body":{"injectables/FileService.html":{}}}],["fileservice.getrandomname(file.originalname",{"_index":886,"title":{},"body":{"injectables/FileService.html":{}}}],["fileservice.multeroptions",{"_index":420,"title":{},"body":{"controllers/ArticleController.html":{}}}],["filesize",{"_index":889,"title":{},"body":{"injectables/FileService.html":{}}}],["fileurl",{"_index":871,"title":{},"body":{"injectables/FileService.html":{}}}],["fileurl.replace(server_url",{"_index":927,"title":{},"body":{"injectables/FileService.html":{}}}],["fileurl.startswith(server_url",{"_index":926,"title":{},"body":{"injectables/FileService.html":{}}}],["filter",{"_index":856,"title":{},"body":{"injectables/FileService.html":{}}}],["filtered",{"_index":654,"title":{},"body":{"injectables/ArticleService.html":{}}}],["filtering",{"_index":465,"title":{},"body":{"classes/ArticleDto.html":{}}}],["filters/all",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["filters/http",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["find",{"_index":605,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["firebase",{"_index":952,"title":{},"body":{"injectables/PushNotificationService.html":{},"dependencies.html":{}}}],["firebaseadmin",{"_index":954,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["firebaseadmin.messaging().send(message",{"_index":976,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["first",{"_index":711,"title":{},"body":{"injectables/ArticleService.html":{}}}],["fit",{"_index":917,"title":{},"body":{"injectables/FileService.html":{}}}],["flutter_notification_click",{"_index":968,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["folder",{"_index":1095,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["form",{"_index":469,"title":{},"body":{"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"interfaces/UploadedFileDto.html":{}}}],["format",{"_index":467,"title":{},"body":{"classes/ArticleDto.html":{},"miscellaneous/variables.html":{}}}],["format.colorize",{"_index":1313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.combine",{"_index":1301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.printf(msg",{"_index":1304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.timestamp",{"_index":1303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.uncolorize",{"_index":1302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":436,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["found.'})@put",{"_index":1015,"title":{},"body":{"controllers/TagController.html":{}}}],["found.'})@put(':id')@useinterceptors(undefined",{"_index":371,"title":{},"body":{"controllers/ArticleController.html":{}}}],["found.'})@put(':id/activity",{"_index":356,"title":{},"body":{"controllers/ArticleController.html":{}}}],["framework",{"_index":1193,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":839,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/TagDto.html":{}}}],["fs",{"_index":900,"title":{},"body":{"injectables/FileService.html":{}}}],["fs.unlink(olddatarelativeurl",{"_index":930,"title":{},"body":{"injectables/FileService.html":{}}}],["fulltext",{"_index":298,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["function",{"_index":861,"title":{},"body":{"injectables/FileService.html":{},"coverage.html":{}}}],["functions",{"_index":1188,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":637,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["generate",{"_index":864,"title":{},"body":{"injectables/FileService.html":{}}}],["get(':articletype",{"_index":409,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{}}}],["get('autocomplete/:articletype",{"_index":574,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["get('detail/:id",{"_index":405,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getalltags",{"_index":997,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["getalltags(@headers('x",{"_index":1024,"title":{},"body":{"controllers/TagController.html":{}}}],["getalltags(language",{"_index":1009,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["getarticlebyid",{"_index":308,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getarticlebyid(@param('id",{"_index":406,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticlebyid(articlecontentid",{"_index":648,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getarticlebyid(id",{"_index":329,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticles",{"_index":309,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticles(@param('articletype",{"_index":410,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticles(articletype",{"_index":336,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticlesbytypeandfilter",{"_index":640,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getarticlesbytypeandfilter(articletype",{"_index":651,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getrandomname",{"_index":846,"title":{},"body":{"injectables/FileService.html":{}}}],["getrandomname(originalname",{"_index":862,"title":{},"body":{"injectables/FileService.html":{}}}],["getting",{"_index":650,"title":{"index.html":{}},"body":{"injectables/ArticleService.html":{}}}],["getversion",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gif",{"_index":913,"title":{},"body":{"injectables/FileService.html":{}}}],["grow",{"_index":1222,"title":{},"body":{"index.html":{}}}],["handlebars",{"_index":1161,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["handleexceptions",{"_index":1310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handler",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["handlerejections",{"_index":1311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headerresolver",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["headers",{"_index":374,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/TagController.html":{}}}],["headers('x",{"_index":407,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{}}}],["here",{"_index":1231,"title":{},"body":{"index.html":{}}}],["high",{"_index":965,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["higher",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["host",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["host.interface",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["http",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ErrorResponse.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpadapter",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapter.reply(response",{"_index":83,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapterhost",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpargumentshost",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpcode",{"_index":375,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/TagController.html":{}}}],["httpcode(200",{"_index":417,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/TagController.html":{}}}],["httpexception",{"_index":936,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":155,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://nestjs.com",{"_index":1238,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":72,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["i18n",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"injectables/PushNotificationService.html":{},"dependencies.html":{}}}],["i18nmodule",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nmodule.forroot",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nservice",{"_index":947,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["icon",{"_index":969,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["id",{"_index":259,"title":{},"body":{"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["id.'})@apinotfoundresponse({description",{"_index":370,"title":{},"body":{"controllers/ArticleController.html":{}}}],["id.'})@get('detail/:id",{"_index":330,"title":{},"body":{"controllers/ArticleController.html":{}}}],["identifier",{"_index":1106,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":549,"title":{},"body":{"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{}}}],["ignoretls",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["image",{"_index":456,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{},"injectables/FileService.html":{}}}],["image/gif",{"_index":906,"title":{},"body":{"injectables/FileService.html":{}}}],["image/jpeg",{"_index":905,"title":{},"body":{"injectables/FileService.html":{}}}],["image/png",{"_index":827,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FileService.html":{}}}],["images",{"_index":825,"title":{},"body":{"injectables/EmailService.html":{}}}],["implements",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CheckArticleType.html":{},"classes/HttpExceptionFilter.html":{},"classes/StringToNumberPipe.html":{}}}],["import",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["imports",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["in(tagsfromdto.map(tag",{"_index":685,"title":{},"body":{"injectables/ArticleService.html":{}}}],["included",{"_index":974,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index('article_id",{"_index":296,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["index('date_of_publication_idx",{"_index":299,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["index('idx_fulltext",{"_index":297,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["index('language",{"_index":300,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{}}}],["infromation",{"_index":333,"title":{},"body":{"controllers/ArticleController.html":{}}}],["inject",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{}}}],["inject(winston_module_provider",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ArticleService.html":{},"injectables/FileService.html":{},"injectables/SentryService.html":{}}}],["injectable",{"_index":244,"title":{"injectables/AppService.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"injectables/TagService.html":{}},"body":{"injectables/AppService.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["injectables",{"_index":245,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"injectables/TagService.html":{},"overview.html":{}}}],["injectrepository",{"_index":600,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["injectrepository(articlecontententity",{"_index":603,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["injectrepository(articleentity",{"_index":663,"title":{},"body":{"injectables/ArticleService.html":{}}}],["injectrepository(tagentity",{"_index":662,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["innerjoin('content.article",{"_index":626,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["innerjoinandselect('content.article",{"_index":611,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["inside",{"_index":918,"title":{},"body":{"injectables/FileService.html":{}}}],["installation",{"_index":1201,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1203,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1089,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["intended",{"_index":835,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["interface",{"_index":1085,"title":{"interfaces/UploadedFileDto.html":{}},"body":{"interfaces/UploadedFileDto.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":1086,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["internal",{"_index":76,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["inversejoincolumns",{"_index":521,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["isnan(numbervalue",{"_index":993,"title":{},"body":{"classes/StringToNumberPipe.html":{}}}],["isnotempty",{"_index":539,"title":{},"body":{"classes/ArticleRequestDto.html":{},"classes/TagDto.html":{}}}],["item",{"_index":1049,"title":{},"body":{"entities/TagEntity.html":{}}}],["item.language",{"_index":718,"title":{},"body":{"injectables/ArticleService.html":{}}}],["item.tags",{"_index":1050,"title":{},"body":{"entities/TagEntity.html":{}}}],["join",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["joincolumn",{"_index":291,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{}}}],["joincolumns",{"_index":519,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["jointable",{"_index":527,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["jpeg",{"_index":911,"title":{},"body":{"injectables/FileService.html":{}}}],["jpg",{"_index":910,"title":{},"body":{"injectables/FileService.html":{}}}],["json",{"_index":941,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["json.parse(newarticledto.tags",{"_index":676,"title":{},"body":{"injectables/ArticleService.html":{}}}],["json.parse(updatedarticle.updatedtags",{"_index":739,"title":{},"body":{"injectables/ArticleService.html":{}}}],["json.stringify(message",{"_index":972,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["kamil",{"_index":1235,"title":{},"body":{"index.html":{}}}],["key",{"_index":973,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["keyof",{"_index":689,"title":{},"body":{"injectables/ArticleService.html":{}}}],["lang",{"_index":958,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["language",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["language.'})@httpcode(200)@post(':articletype')@useinterceptors(undefined",{"_index":321,"title":{},"body":{"controllers/ArticleController.html":{}}}],["languageenum",{"_index":285,"title":{},"body":{"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"miscellaneous/enumerations.html":{}}}],["languageenum.cs",{"_index":1280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["languages",{"_index":668,"title":{},"body":{"injectables/ArticleService.html":{}}}],["languages.map((language",{"_index":688,"title":{},"body":{"injectables/ArticleService.html":{}}}],["leftjoinandselect('article.tags",{"_index":612,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["legend",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["length",{"_index":276,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["level",{"_index":1300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":1241,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1219,"title":{},"body":{"index.html":{}}}],["limit(10",{"_index":629,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["limit(count",{"_index":618,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["limits",{"_index":888,"title":{},"body":{"injectables/FileService.html":{}}}],["list",{"_index":350,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{}}}],["literal",{"_index":538,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["loaderoptions",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["location",{"_index":1102,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["logger",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{}}}],["loggerconfig",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logging",{"_index":1274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logs",{"_index":1291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mailermodule",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule.forroot",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["mailerservice",{"_index":801,"title":{},"body":{"injectables/EmailService.html":{}}}],["manager",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["mandatory",{"_index":634,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{}}}],["manytomany",{"_index":528,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/TagEntity.html":{}}}],["manytomany(undefined",{"_index":516,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/TagEntity.html":{}}}],["manytoone",{"_index":292,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{}}}],["manytoone(undefined",{"_index":261,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{}}}],["matching",{"_index":88,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max_file_size",{"_index":890,"title":{},"body":{"injectables/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["maxfiles",{"_index":1298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxsize",{"_index":1296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memorystorage",{"_index":1094,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["message",{"_index":75,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadValidationRequestException.html":{},"classes/ErrorResponse.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{}}}],["messageid",{"_index":975,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["metadata",{"_index":785,"title":{},"body":{"classes/CheckArticleType.html":{},"classes/StringToNumberPipe.html":{},"dependencies.html":{}}}],["method",{"_index":587,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["methods",{"_index":18,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["migration",{"_index":1260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations",{"_index":1277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations/*{.ts,.js",{"_index":1278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsrun",{"_index":1279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mime",{"_index":1099,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["mimetype",{"_index":1092,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["miscellaneous",{"_index":1181,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":320,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"classes/BadValidationRequestException.html":{}}}],["mit",{"_index":1218,"title":{},"body":{"index.html":{}}}],["mm",{"_index":1294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":1208,"title":{},"body":{"index.html":{}}}],["models/enums/article",{"_index":383,"title":{},"body":{"controllers/ArticleController.html":{}}}],["models/enums/language.enum",{"_index":382,"title":{},"body":{"controllers/ArticleController.html":{}}}],["module",{"_index":111,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":113,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["modules/mailer",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["moment",{"_index":806,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["moment(article.dateofpublication).format('dd.mm.yyyy",{"_index":818,"title":{},"body":{"injectables/EmailService.html":{}}}],["more",{"_index":1230,"title":{},"body":{"index.html":{}}}],["ms",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["msg.level",{"_index":1306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["msg.message",{"_index":1307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["msg.stack",{"_index":1308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["msg.timestamp",{"_index":1305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multer",{"_index":892,"title":{},"body":{"injectables/FileService.html":{}}}],["multeroptions",{"_index":844,"title":{},"body":{"injectables/FileService.html":{}}}],["mysql",{"_index":1263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1164,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1236,"title":{},"body":{"index.html":{}}}],["n${data",{"_index":987,"title":{},"body":{"injectables/SentryService.html":{}}}],["n\\t${msg.stack",{"_index":1309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{}}}],["nest",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"dependencies.html":{},"index.html":{}}}],["nestframework",{"_index":1240,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/PushNotificationService.html":{},"dependencies.html":{}}}],["nestjs/cache",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/features/arguments",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["nestjs/config",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":397,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/FileService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":106,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/TagController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/TagService.html":{},"dependencies.html":{}}}],["new",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/PushNotificationService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newarticle",{"_index":670,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticle.articletype",{"_index":671,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticle.parent",{"_index":672,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticle.tags",{"_index":683,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontent",{"_index":692,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontent.article",{"_index":700,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontent.body",{"_index":695,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontent.coverimage",{"_index":701,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontent.dateofpublication",{"_index":698,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontent.language",{"_index":697,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontent.title",{"_index":693,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontententities",{"_index":687,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontententities.foreach(item",{"_index":716,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticlecontententity",{"_index":748,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto",{"_index":645,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto.body[language",{"_index":696,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto.coverimage",{"_index":702,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto.dateofpublication",{"_index":699,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto.parent",{"_index":673,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto.tags",{"_index":681,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto.title",{"_index":691,"title":{},"body":{"injectables/ArticleService.html":{}}}],["newarticledto.title[language",{"_index":694,"title":{},"body":{"injectables/ArticleService.html":{}}}],["news",{"_index":1041,"title":{},"body":{"classes/TagDto.html":{},"miscellaneous/enumerations.html":{},"properties.html":{}}}],["news.png",{"_index":822,"title":{},"body":{"injectables/EmailService.html":{}}}],["newssmall",{"_index":829,"title":{},"body":{"injectables/EmailService.html":{}}}],["newtag",{"_index":1004,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["newtag.id",{"_index":1067,"title":{},"body":{"injectables/TagService.html":{}}}],["newtag.language",{"_index":1068,"title":{},"body":{"injectables/TagService.html":{}}}],["newtag.order",{"_index":1073,"title":{},"body":{"injectables/TagService.html":{}}}],["newtag.title",{"_index":1072,"title":{},"body":{"injectables/TagService.html":{}}}],["node.js",{"_index":1192,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1168,"title":{},"body":{"dependencies.html":{}}}],["notfoundexception",{"_index":434,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["notfoundexception(\"tag",{"_index":1080,"title":{},"body":{"injectables/TagService.html":{}}}],["notfoundexception(`article",{"_index":724,"title":{},"body":{"injectables/ArticleService.html":{}}}],["notification",{"_index":715,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{}}}],["notification.service",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{}}}],["notification.service.ts",{"_index":945,"title":{},"body":{"injectables/PushNotificationService.html":{},"coverage.html":{}}}],["notification.service.ts:10",{"_index":948,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["notification.service.ts:17",{"_index":950,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["notification/push",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{},"coverage.html":{}}}],["notification_icon",{"_index":970,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["npm",{"_index":1202,"title":{},"body":{"index.html":{}}}],["null",{"_index":273,"title":{},"body":{"entities/ArticleContentEntity.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/FileService.html":{},"injectables/TagService.html":{}}}],["null,acceptfile",{"_index":854,"title":{},"body":{"injectables/FileService.html":{}}}],["nullable",{"_index":275,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{}}}],["number",{"_index":71,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/ErrorResponse.html":{},"classes/HttpExceptionFilter.html":{},"classes/StringToNumberPipe.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"interfaces/UploadedFileDto.html":{},"miscellaneous/variables.html":{}}}],["number(value",{"_index":992,"title":{},"body":{"classes/StringToNumberPipe.html":{}}}],["number.pipe",{"_index":391,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{}}}],["number.pipe.ts",{"_index":988,"title":{},"body":{"classes/StringToNumberPipe.html":{},"coverage.html":{}}}],["number.pipe.ts:7",{"_index":990,"title":{},"body":{"classes/StringToNumberPipe.html":{}}}],["numbervalue",{"_index":991,"title":{},"body":{"classes/StringToNumberPipe.html":{}}}],["object",{"_index":332,"title":{},"body":{"controllers/ArticleController.html":{},"interfaces/UploadedFileDto.html":{}}}],["object.keys(newarticledto.title",{"_index":669,"title":{},"body":{"injectables/ArticleService.html":{}}}],["object.values(articletypeenum",{"_index":788,"title":{},"body":{"classes/CheckArticleType.html":{}}}],["occurred",{"_index":78,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["occurs",{"_index":427,"title":{},"body":{"controllers/ArticleController.html":{}}}],["offset(page",{"_index":619,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["old",{"_index":744,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity",{"_index":726,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity.article.active",{"_index":736,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity.article.parent",{"_index":734,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity.article.tags",{"_index":740,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity.body",{"_index":730,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity.coverimage",{"_index":746,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity.dateofpublication",{"_index":732,"title":{},"body":{"injectables/ArticleService.html":{}}}],["oldarticlecontententity.title",{"_index":728,"title":{},"body":{"injectables/ArticleService.html":{}}}],["olddatarelativeurl",{"_index":924,"title":{},"body":{"injectables/FileService.html":{}}}],["olddatarelativeurl.replace",{"_index":929,"title":{},"body":{"injectables/FileService.html":{}}}],["olddatarelativeurl.startswith",{"_index":928,"title":{},"body":{"injectables/FileService.html":{}}}],["ondelete",{"_index":511,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["one",{"_index":745,"title":{},"body":{"injectables/ArticleService.html":{}}}],["onetomany",{"_index":529,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["onetomany(undefined",{"_index":500,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["onupdate",{"_index":513,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["open",{"_index":1220,"title":{},"body":{"index.html":{}}}],["operation",{"_index":753,"title":{},"body":{"injectables/ArticleService.html":{}}}],["operator",{"_index":607,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["options",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileService.html":{}}}],["options.interface",{"_index":894,"title":{},"body":{"injectables/FileService.html":{}}}],["order",{"_index":1031,"title":{},"body":{"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["orderby('dateofpublication",{"_index":630,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["original",{"_index":867,"title":{},"body":{"injectables/FileService.html":{}}}],["originalname",{"_index":866,"title":{},"body":{"injectables/FileService.html":{},"interfaces/UploadedFileDto.html":{}}}],["otherwise",{"_index":880,"title":{},"body":{"injectables/FileService.html":{}}}],["out",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["overview",{"_index":1245,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1147,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["package.json",{"_index":1261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["page",{"_index":337,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["page_count",{"_index":597,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pagination",{"_index":563,"title":{},"body":{"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["param",{"_index":376,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"controllers/TagController.html":{}}}],["param,query",{"_index":569,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["parameter(s",{"_index":635,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"injectables/TagService.html":{}}}],["parent",{"_index":446,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{}}}],["parentarticle",{"_index":496,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["parse",{"_index":318,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["password",{"_index":1269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"interfaces/UploadedFileDto.html":{}}}],["path.join(__dirname",{"_index":823,"title":{},"body":{"injectables/EmailService.html":{}}}],["pattern",{"_index":558,"title":{},"body":{"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{}}}],["pattern.replace",{"_index":636,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["per",{"_index":346,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{}}}],["pick",{"_index":710,"title":{},"body":{"injectables/ArticleService.html":{}}}],["pipe",{"_index":779,"title":{},"body":{"classes/CheckArticleType.html":{},"classes/StringToNumberPipe.html":{}}}],["pipetransform",{"_index":782,"title":{},"body":{"classes/CheckArticleType.html":{},"classes/StringToNumberPipe.html":{}}}],["please",{"_index":79,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"index.html":{}}}],["png",{"_index":912,"title":{},"body":{"injectables/FileService.html":{}}}],["port",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":377,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/TagController.html":{}}}],["post(':articletype",{"_index":418,"title":{},"body":{"controllers/ArticleController.html":{}}}],["prefix",{"_index":304,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/TagController.html":{}}}],["present",{"_index":347,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleService.html":{}}}],["present.'})@get(':articletype",{"_index":560,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["present.'})@get('autocomplete/:articletype",{"_index":566,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["preview",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["primarycolumn",{"_index":1052,"title":{},"body":{"entities/TagEntity.html":{}}}],["primarycolumn('enum",{"_index":1054,"title":{},"body":{"entities/TagEntity.html":{}}}],["primarygeneratedcolumn",{"_index":283,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{}}}],["priority",{"_index":964,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["private",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"injectables/TagService.html":{}}}],["process.env.mysql_database",{"_index":1266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mysql_host",{"_index":1264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mysql_password",{"_index":1270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mysql_user",{"_index":1268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.server_url",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["prod",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":1210,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1191,"title":{},"body":{"index.html":{}}}],["project",{"_index":1221,"title":{},"body":{"index.html":{}}}],["promise",{"_index":328,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/PushNotificationService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["promise((resolve",{"_index":923,"title":{},"body":{"injectables/FileService.html":{}}}],["properties",{"_index":253,"title":{"properties.html":{}},"body":{"entities/ArticleContentEntity.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"classes/BadValidationRequestException.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"interfaces/UploadedFileDto.html":{},"properties.html":{}}}],["properties.join",{"_index":776,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["properties.length",{"_index":773,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["properties.push(error.property",{"_index":772,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["provide",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["publicated",{"_index":458,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{}}}],["purposes",{"_index":709,"title":{},"body":{"injectables/ArticleService.html":{},"miscellaneous/variables.html":{}}}],["push",{"_index":714,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{}}}],["push_notification_service",{"_index":971,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["pushnotificationservice",{"_index":126,"title":{"injectables/PushNotificationService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["put",{"_index":378,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/TagController.html":{}}}],["put(':id",{"_index":437,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put(':id/activity",{"_index":440,"title":{},"body":{"controllers/ArticleController.html":{}}}],["query",{"_index":379,"title":{},"body":{"controllers/ArticleController.html":{}}}],["query('count",{"_index":412,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{}}}],["query('page",{"_index":411,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{}}}],["query('pattern",{"_index":572,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["query('tagid",{"_index":413,"title":{},"body":{"controllers/ArticleController.html":{}}}],["querybuilder",{"_index":622,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["querybuilder.getrawmany",{"_index":632,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["quick",{"_index":363,"title":{},"body":{"controllers/ArticleController.html":{}}}],["random",{"_index":865,"title":{},"body":{"injectables/FileService.html":{}}}],["randomname",{"_index":901,"title":{},"body":{"injectables/FileService.html":{}}}],["randomname}${extname(originalname",{"_index":902,"title":{},"body":{"injectables/FileService.html":{}}}],["read",{"_index":1229,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"controllers/TagController.html":{}}}],["reduced",{"_index":878,"title":{},"body":{"injectables/FileService.html":{}}}],["referencedcolumnname",{"_index":302,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{}}}],["reflect",{"_index":1170,"title":{},"body":{"dependencies.html":{}}}],["relations",{"_index":721,"title":{},"body":{"injectables/ArticleService.html":{}}}],["remove",{"_index":428,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/FileService.html":{}}}],["removefilefromsystem",{"_index":847,"title":{},"body":{"injectables/FileService.html":{}}}],["removefilefromsystem(fileurl",{"_index":868,"title":{},"body":{"injectables/FileService.html":{}}}],["repository",{"_index":582,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{},"injectables/TagService.html":{},"index.html":{}}}],["reqeust",{"_index":537,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["request",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{},"classes/HttpExceptionFilter.html":{}}}],["request.dto",{"_index":395,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["request.dto.ts",{"_index":534,"title":{},"body":{"classes/ArticleRequestDto.html":{},"coverage.html":{}}}],["request.dto.ts:12",{"_index":540,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["request.dto.ts:17",{"_index":545,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["request.dto.ts:22",{"_index":541,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["request.dto.ts:28",{"_index":546,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["request.dto.ts:33",{"_index":543,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["request.dto.ts:9",{"_index":550,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["request.exception",{"_index":795,"title":{},"body":{"classes/CustomValidationPipe.html":{}}}],["request.exception.ts",{"_index":760,"title":{},"body":{"classes/BadValidationRequestException.html":{},"coverage.html":{}}}],["request.exception.ts:7",{"_index":767,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["request.url",{"_index":85,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["require('../package.json",{"_index":248,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["resize",{"_index":874,"title":{},"body":{"injectables/FileService.html":{}}}],["resized",{"_index":879,"title":{},"body":{"injectables/FileService.html":{}}}],["resizeimage",{"_index":848,"title":{},"body":{"injectables/FileService.html":{}}}],["resizeimage(path",{"_index":872,"title":{},"body":{"injectables/FileService.html":{}}}],["resizing",{"_index":922,"title":{},"body":{"injectables/FileService.html":{}}}],["resolve(false",{"_index":932,"title":{},"body":{"injectables/FileService.html":{}}}],["resolve(true",{"_index":933,"title":{},"body":{"injectables/FileService.html":{}}}],["resolvers",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["response",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BadValidationRequestException.html":{},"classes/HttpExceptionFilter.html":{}}}],["response.dto",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["response.dto.ts",{"_index":833,"title":{},"body":{"classes/ErrorResponse.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":837,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["response.dto.ts:16",{"_index":841,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["response.dto.ts:6",{"_index":834,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["responsebody",{"_index":73,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["restrict",{"_index":512,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["restrict'})@joincolumn(['undefined",{"_index":514,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["results",{"_index":87,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"injectables/FileService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":761,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["returns",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["rootpath",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["rotate",{"_index":1179,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":1206,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1172,"title":{},"body":{"dependencies.html":{}}}],["saved",{"_index":750,"title":{},"body":{"injectables/ArticleService.html":{},"interfaces/UploadedFileDto.html":{}}}],["savedtag",{"_index":1070,"title":{},"body":{"injectables/TagService.html":{}}}],["scalable",{"_index":1196,"title":{},"body":{"index.html":{}}}],["search",{"_index":555,"title":{},"body":{"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{}}}],["search(@param('articletype",{"_index":571,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["search(articletype",{"_index":557,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["search.controller",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["search.controller.ts",{"_index":553,"title":{},"body":{"controllers/ArticleSearchController.html":{},"coverage.html":{}}}],["search.controller.ts:29",{"_index":561,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["search.controller.ts:48",{"_index":567,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["search.service",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticleSearchController.html":{}}}],["search.service.ts",{"_index":577,"title":{},"body":{"injectables/ArticleSearchService.html":{},"coverage.html":{}}}],["search.service.ts:11",{"_index":583,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["search.service.ts:25",{"_index":594,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["search.service.ts:57",{"_index":599,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["search.service.ts:83",{"_index":586,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["searcharticles",{"_index":579,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["searcharticles(articletype",{"_index":593,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["searchautocomplete",{"_index":556,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["searchautocomplete(@param('articletype",{"_index":575,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["searchautocomplete(articletype",{"_index":564,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["searchautocompletearticle",{"_index":580,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["searchautocompletearticle(articletype",{"_index":598,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["searching",{"_index":562,"title":{},"body":{"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{}}}],["secure",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["select('content.id",{"_index":623,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["selectquerybuilder",{"_index":602,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["send",{"_index":705,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/PushNotificationService.html":{}}}],["sendemail",{"_index":799,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendemail(article",{"_index":803,"title":{},"body":{"injectables/EmailService.html":{}}}],["sending",{"_index":809,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendpushnotificationtotopic",{"_index":946,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["sendpushnotificationtotopic(article",{"_index":949,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["sent",{"_index":830,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PushNotificationService.html":{}}}],["sentry",{"_index":982,"title":{},"body":{"injectables/SentryService.html":{}}}],["sentry.captureexception(`${message",{"_index":986,"title":{},"body":{"injectables/SentryService.html":{}}}],["sentry.service",{"_index":805,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FileService.html":{}}}],["sentry/node",{"_index":983,"title":{},"body":{"injectables/SentryService.html":{},"dependencies.html":{}}}],["sentryservice",{"_index":24,"title":{"injectables/SentryService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/SentryService.html":{},"coverage.html":{},"overview.html":{}}}],["server",{"_index":77,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ArticleRequestDto.html":{},"index.html":{}}}],["server_url",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"injectables/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server_url}/${file.destination}/${file.filename",{"_index":426,"title":{},"body":{"controllers/ArticleController.html":{}}}],["serveroot",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["services/email.service",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["services/file.service",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["services/sentry.service",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["set",{"_index":354,"title":{},"body":{"controllers/ArticleController.html":{}}}],["setarticleactivity",{"_index":310,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["setarticleactivity(@param('id",{"_index":441,"title":{},"body":{"controllers/ArticleController.html":{}}}],["setarticleactivity(articlecontentid",{"_index":351,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["sharp",{"_index":899,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["sharp(buffer).tofile(path",{"_index":920,"title":{},"body":{"injectables/FileService.html":{}}}],["sharp(path",{"_index":915,"title":{},"body":{"injectables/FileService.html":{}}}],["shortcut",{"_index":1036,"title":{},"body":{"classes/TagDto.html":{}}}],["side",{"_index":1197,"title":{},"body":{"index.html":{}}}],["size",{"_index":877,"title":{},"body":{"injectables/FileService.html":{},"interfaces/UploadedFileDto.html":{}}}],["skip",{"_index":722,"title":{},"body":{"injectables/ArticleService.html":{}}}],["sound",{"_index":966,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"index.html":{}}}],["source.ts",{"_index":1114,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["spaces",{"_index":592,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["specific",{"_index":1012,"title":{},"body":{"controllers/TagController.html":{}}}],["specified",{"_index":1097,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["sponsors",{"_index":1224,"title":{},"body":{"index.html":{}}}],["sqlquery",{"_index":608,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["src/.../app.module.ts",{"_index":1256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.service.ts",{"_index":1257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../article",{"_index":1183,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../constants.ts",{"_index":1254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../data",{"_index":1252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database",{"_index":1253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../language.enum.ts",{"_index":1185,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../logger",{"_index":1255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1189,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:16",{"_index":98,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module",{"_index":401,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/FileService.html":{}}}],["src/app.module.ts",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":246,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts:7",{"_index":247,"title":{},"body":{"injectables/AppService.html":{}}}],["src/config/data",{"_index":1113,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/database",{"_index":1118,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/logger",{"_index":1120,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/constants",{"_index":601,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/FileService.html":{},"injectables/TagService.html":{}}}],["src/constants.ts",{"_index":1121,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/endpoints/article/article.controller.ts",{"_index":303,"title":{},"body":{"controllers/ArticleController.html":{},"coverage.html":{}}}],["src/endpoints/article/article.controller.ts:127",{"_index":357,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/endpoints/article/article.controller.ts:32",{"_index":331,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/endpoints/article/article.controller.ts:50",{"_index":341,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/endpoints/article/article.controller.ts:69",{"_index":322,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/endpoints/article/article.controller.ts:99",{"_index":372,"title":{},"body":{"controllers/ArticleController.html":{}}}],["src/endpoints/article/article.service.ts",{"_index":639,"title":{},"body":{"injectables/ArticleService.html":{},"coverage.html":{}}}],["src/endpoints/article/article.service.ts:102",{"_index":652,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/endpoints/article/article.service.ts:141",{"_index":649,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/endpoints/article/article.service.ts:173",{"_index":657,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/endpoints/article/article.service.ts:18",{"_index":643,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/endpoints/article/article.service.ts:250",{"_index":655,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/endpoints/article/article.service.ts:35",{"_index":646,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/endpoints/article/search/article",{"_index":552,"title":{},"body":{"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"coverage.html":{}}}],["src/endpoints/push",{"_index":661,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{},"coverage.html":{}}}],["src/endpoints/tag/tag.controller.ts",{"_index":994,"title":{},"body":{"controllers/TagController.html":{},"coverage.html":{}}}],["src/endpoints/tag/tag.controller.ts:24",{"_index":1003,"title":{},"body":{"controllers/TagController.html":{}}}],["src/endpoints/tag/tag.controller.ts:34",{"_index":1011,"title":{},"body":{"controllers/TagController.html":{}}}],["src/endpoints/tag/tag.controller.ts:49",{"_index":1016,"title":{},"body":{"controllers/TagController.html":{}}}],["src/endpoints/tag/tag.controller.ts:60",{"_index":1008,"title":{},"body":{"controllers/TagController.html":{}}}],["src/endpoints/tag/tag.service.ts",{"_index":1060,"title":{},"body":{"injectables/TagService.html":{},"coverage.html":{}}}],["src/endpoints/tag/tag.service.ts:10",{"_index":1061,"title":{},"body":{"injectables/TagService.html":{}}}],["src/endpoints/tag/tag.service.ts:17",{"_index":1062,"title":{},"body":{"injectables/TagService.html":{}}}],["src/endpoints/tag/tag.service.ts:35",{"_index":1064,"title":{},"body":{"injectables/TagService.html":{}}}],["src/endpoints/tag/tag.service.ts:41",{"_index":1065,"title":{},"body":{"injectables/TagService.html":{}}}],["src/endpoints/tag/tag.service.ts:61",{"_index":1063,"title":{},"body":{"injectables/TagService.html":{}}}],["src/entities/article",{"_index":251,"title":{},"body":{"entities/ArticleContentEntity.html":{},"classes/ArticleDto.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{},"coverage.html":{}}}],["src/entities/article.entity",{"_index":658,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/entities/article.entity.ts",{"_index":493,"title":{},"body":{"entities/ArticleEntity.html":{},"coverage.html":{}}}],["src/entities/article.entity.ts:10",{"_index":507,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:13",{"_index":504,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:16",{"_index":499,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:19",{"_index":509,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:25",{"_index":524,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:28",{"_index":502,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:35",{"_index":515,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:38",{"_index":506,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/article.entity.ts:51",{"_index":522,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["src/entities/tag.entity",{"_index":659,"title":{},"body":{"injectables/ArticleService.html":{},"classes/TagDto.html":{},"injectables/TagService.html":{}}}],["src/entities/tag.entity.ts",{"_index":1048,"title":{},"body":{"entities/TagEntity.html":{},"coverage.html":{}}}],["src/entities/tag.entity.ts:12",{"_index":1055,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/entities/tag.entity.ts:15",{"_index":1058,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/entities/tag.entity.ts:18",{"_index":1057,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/entities/tag.entity.ts:21",{"_index":1051,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/entities/tag.entity.ts:9",{"_index":1053,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/filters/all",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/filters/http",{"_index":934,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1138,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/models/dtos/article",{"_index":394,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["src/models/dtos/article.dto",{"_index":392,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{}}}],["src/models/dtos/article.dto.ts",{"_index":444,"title":{},"body":{"classes/ArticleDto.html":{},"coverage.html":{}}}],["src/models/dtos/article.dto.ts:10",{"_index":453,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:16",{"_index":459,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:18",{"_index":452,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:23",{"_index":460,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:28",{"_index":450,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:33",{"_index":454,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:38",{"_index":457,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:43",{"_index":462,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:48",{"_index":449,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:6",{"_index":451,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/article.dto.ts:8",{"_index":466,"title":{},"body":{"classes/ArticleDto.html":{}}}],["src/models/dtos/error",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ErrorResponse.html":{},"coverage.html":{}}}],["src/models/dtos/tag.dto",{"_index":1018,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["src/models/dtos/tag.dto.ts",{"_index":1030,"title":{},"body":{"classes/TagDto.html":{},"coverage.html":{}}}],["src/models/dtos/tag.dto.ts:12",{"_index":1034,"title":{},"body":{"classes/TagDto.html":{}}}],["src/models/dtos/tag.dto.ts:19",{"_index":1037,"title":{},"body":{"classes/TagDto.html":{}}}],["src/models/dtos/tag.dto.ts:26",{"_index":1039,"title":{},"body":{"classes/TagDto.html":{}}}],["src/models/dtos/tag.dto.ts:31",{"_index":1033,"title":{},"body":{"classes/TagDto.html":{}}}],["src/models/dtos/uploaded",{"_index":399,"title":{},"body":{"controllers/ArticleController.html":{},"interfaces/UploadedFileDto.html":{},"coverage.html":{}}}],["src/models/enums/article",{"_index":526,"title":{},"body":{"entities/ArticleEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"miscellaneous/enumerations.html":{}}}],["src/models/enums/language.enum",{"_index":295,"title":{},"body":{"entities/ArticleContentEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["src/models/enums/language.enum.ts",{"_index":1187,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/models/exceptions/bad",{"_index":758,"title":{},"body":{"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{},"coverage.html":{}}}],["src/services/email.service",{"_index":660,"title":{},"body":{"injectables/ArticleService.html":{}}}],["src/services/email.service.ts",{"_index":798,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/services/email.service.ts:10",{"_index":802,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/services/email.service.ts:21",{"_index":804,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/services/file.service",{"_index":398,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["src/services/file.service.ts",{"_index":843,"title":{},"body":{"injectables/FileService.html":{},"coverage.html":{}}}],["src/services/file.service.ts:15",{"_index":850,"title":{},"body":{"injectables/FileService.html":{}}}],["src/services/file.service.ts:24",{"_index":891,"title":{},"body":{"injectables/FileService.html":{}}}],["src/services/file.service.ts:42",{"_index":863,"title":{},"body":{"injectables/FileService.html":{}}}],["src/services/file.service.ts:51",{"_index":855,"title":{},"body":{"injectables/FileService.html":{}}}],["src/services/file.service.ts:65",{"_index":873,"title":{},"body":{"injectables/FileService.html":{}}}],["src/services/file.service.ts:87",{"_index":869,"title":{},"body":{"injectables/FileService.html":{}}}],["src/services/sentry.service",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/services/sentry.service.ts",{"_index":977,"title":{},"body":{"injectables/SentryService.html":{},"coverage.html":{}}}],["src/services/sentry.service.ts:12",{"_index":981,"title":{},"body":{"injectables/SentryService.html":{}}}],["src/services/sentry.service.ts:6",{"_index":979,"title":{},"body":{"injectables/SentryService.html":{}}}],["src/utils/pipes/check",{"_index":387,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"classes/CheckArticleType.html":{},"coverage.html":{}}}],["src/utils/pipes/string",{"_index":390,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"classes/StringToNumberPipe.html":{},"coverage.html":{}}}],["src/utils/pipes/validation.pipe",{"_index":403,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/TagController.html":{}}}],["src/utils/pipes/validation.pipe.ts",{"_index":790,"title":{},"body":{"classes/CustomValidationPipe.html":{},"coverage.html":{}}}],["src/utils/pipes/validation.pipe.ts:7",{"_index":794,"title":{},"body":{"classes/CustomValidationPipe.html":{}}}],["start",{"_index":1207,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1209,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1211,"title":{},"body":{"index.html":{}}}],["started",{"_index":1190,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1200,"title":{},"body":{"index.html":{}}}],["starts",{"_index":925,"title":{},"body":{"injectables/FileService.html":{}}}],["statements",{"_index":1107,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileService.html":{},"dependencies.html":{}}}],["status",{"_index":70,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ErrorResponse.html":{},"classes/HttpExceptionFilter.html":{}}}],["status(status",{"_index":940,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":74,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ErrorResponse.html":{},"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":1232,"title":{},"body":{"index.html":{}}}],["storage",{"_index":881,"title":{},"body":{"injectables/FileService.html":{}}}],["story",{"_index":1186,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["storyboard_article_service",{"_index":665,"title":{},"body":{"injectables/ArticleService.html":{}}}],["strict",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["string",{"_index":102,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"interfaces/UploadedFileDto.html":{},"miscellaneous/variables.html":{}}}],["stringified",{"_index":547,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["stringtonumberpipe",{"_index":389,"title":{"classes/StringToNumberPipe.html":{}},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"classes/StringToNumberPipe.html":{},"coverage.html":{}}}],["subject",{"_index":813,"title":{},"body":{"injectables/EmailService.html":{}}}],["summary",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"controllers/TagController.html":{}}}],["super",{"_index":777,"title":{},"body":{"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{}}}],["support",{"_index":1225,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1243,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":1273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":870,"title":{},"body":{"injectables/FileService.html":{}}}],["table",{"_index":1146,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1145,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":349,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleRequestDto.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"injectables/TagService.html":{}}}],["tag.'})@apinotfoundresponse({description",{"_index":1014,"title":{},"body":{"controllers/TagController.html":{}}}],["tag.'})@delete",{"_index":1007,"title":{},"body":{"controllers/TagController.html":{}}}],["tag.dto",{"_index":470,"title":{},"body":{"classes/ArticleDto.html":{}}}],["tag.entity",{"_index":530,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["tag.id",{"_index":686,"title":{},"body":{"injectables/ArticleService.html":{}}}],["tag.language",{"_index":490,"title":{},"body":{"classes/ArticleDto.html":{}}}],["tag.order",{"_index":1082,"title":{},"body":{"injectables/TagService.html":{}}}],["tag.service",{"_index":1017,"title":{},"body":{"controllers/TagController.html":{}}}],["tag.title",{"_index":1081,"title":{},"body":{"injectables/TagService.html":{}}}],["tag_id",{"_index":532,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["tag_language",{"_index":533,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["tagcontroller",{"_index":133,"title":{"controllers/TagController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TagController.html":{},"coverage.html":{}}}],["tagdto",{"_index":461,"title":{"classes/TagDto.html":{}},"body":{"classes/ArticleDto.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["tagdto(savedtag",{"_index":1074,"title":{},"body":{"injectables/TagService.html":{}}}],["tagdto(tag",{"_index":1078,"title":{},"body":{"injectables/TagService.html":{}}}],["tagentity",{"_index":159,"title":{"entities/TagEntity.html":{}},"body":{"modules/AppModule.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["tagentity.id",{"_index":1043,"title":{},"body":{"classes/TagDto.html":{}}}],["tagentity.language",{"_index":1044,"title":{},"body":{"classes/TagDto.html":{}}}],["tagentity.order",{"_index":1047,"title":{},"body":{"classes/TagDto.html":{}}}],["tagentity.title",{"_index":1045,"title":{},"body":{"classes/TagDto.html":{}}}],["tagid",{"_index":339,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["tagrepository",{"_index":644,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["tags",{"_index":319,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["tags.'})@get",{"_index":1010,"title":{},"body":{"controllers/TagController.html":{}}}],["tags.map(tag",{"_index":1077,"title":{},"body":{"injectables/TagService.html":{}}}],["tagservice",{"_index":127,"title":{"injectables/TagService.html":{}},"body":{"modules/AppModule.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"coverage.html":{},"overview.html":{}}}],["tagsfromdto",{"_index":674,"title":{},"body":{"injectables/ArticleService.html":{}}}],["take",{"_index":667,"title":{},"body":{"injectables/ArticleService.html":{}}}],["template",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{}}}],["templates",{"_index":824,"title":{},"body":{"injectables/EmailService.html":{}}}],["templates/emails",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":1214,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1217,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1216,"title":{},"body":{"index.html":{}}}],["test@test.com",{"_index":812,"title":{},"body":{"injectables/EmailService.html":{}}}],["testing",{"_index":708,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/PushNotificationService.html":{}}}],["tests",{"_index":1213,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1223,"title":{},"body":{"index.html":{}}}],["this.active",{"_index":482,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.appservice.getversion",{"_index":110,"title":{},"body":{"controllers/AppController.html":{}}}],["this.articlecontentid",{"_index":472,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.articlecontentrepository",{"_index":609,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["this.articlecontentrepository.find",{"_index":720,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlecontentrepository.findone",{"_index":723,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlecontentrepository.save(newarticlecontententities",{"_index":704,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlecontentrepository.save(oldarticlecontententity",{"_index":749,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.update(articlecontententity.article.id",{"_index":756,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlesearchservice.searcharticles(articletype",{"_index":573,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["this.articlesearchservice.searchautocompletearticle(articletype",{"_index":576,"title":{},"body":{"controllers/ArticleSearchController.html":{}}}],["this.articleservice.createarticle(articletype",{"_index":430,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getarticlebyid(id",{"_index":408,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getarticlesbytypeandfilter(articletype",{"_index":414,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.setarticleactivity(articlecontentid",{"_index":443,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.updatearticlebyid(articlecontentid",{"_index":439,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articletype",{"_index":474,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.body",{"_index":480,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.checksearchpattern(pattern",{"_index":604,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["this.coverimage",{"_index":486,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.dateofpublication",{"_index":491,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.emailservice.sendemail(new",{"_index":712,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.fileservice.removefilefromsystem(coverimagetodelete",{"_index":754,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.fileservice.removefilefromsystem(file.path",{"_index":432,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.fileservice.resizeimage(file.path",{"_index":424,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.httpadapterhost.httpadapter",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.i18n.translate('data.push_notification_body",{"_index":959,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["this.i18n.translate('data.push_notification_title",{"_index":957,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["this.id",{"_index":1042,"title":{},"body":{"classes/TagDto.html":{}}}],["this.language",{"_index":476,"title":{},"body":{"classes/ArticleDto.html":{},"classes/TagDto.html":{}}}],["this.logger.error(`[fileservice",{"_index":931,"title":{},"body":{"injectables/FileService.html":{}}}],["this.logger.error(`[sentry_service",{"_index":984,"title":{},"body":{"injectables/SentryService.html":{}}}],["this.logger.error(`[storyboard_article_service",{"_index":678,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.logger.error(`httpexception",{"_index":943,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.logger.error(exception.stack",{"_index":944,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.logger.log('info",{"_index":664,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/PushNotificationService.html":{}}}],["this.mailerservice.sendmail",{"_index":811,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.order",{"_index":1046,"title":{},"body":{"classes/TagDto.html":{}}}],["this.parent",{"_index":484,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.pushnotificationservice.sendpushnotificationtotopic(item",{"_index":717,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.sentryservice.captureexception('[email_service_error",{"_index":832,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.sentryservice.captureexception('error",{"_index":921,"title":{},"body":{"injectables/FileService.html":{}}}],["this.sentryservice.captureexception(`internal",{"_index":84,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.tagrepository.delete",{"_index":1084,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.find",{"_index":1075,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.findby",{"_index":684,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.tagrepository.findone",{"_index":1079,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.findoneby",{"_index":1066,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.save",{"_index":1071,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.save(tag",{"_index":1083,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tags",{"_index":488,"title":{},"body":{"classes/ArticleDto.html":{}}}],["this.tagservice.createtag(newtag",{"_index":1023,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.deletetag(newtag",{"_index":1029,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.getalltags(language",{"_index":1025,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.updatetag(newtag",{"_index":1027,"title":{},"body":{"controllers/TagController.html":{}}}],["this.title",{"_index":478,"title":{},"body":{"classes/ArticleDto.html":{},"classes/TagDto.html":{}}}],["throw",{"_index":433,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"injectables/TagService.html":{}}}],["thrown",{"_index":781,"title":{},"body":{"classes/CheckArticleType.html":{}}}],["throws",{"_index":415,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{}}}],["timestamp",{"_index":497,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["title",{"_index":260,"title":{},"body":{"entities/ArticleContentEntity.html":{},"classes/ArticleDto.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/PushNotificationService.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["tobuffer",{"_index":919,"title":{},"body":{"injectables/FileService.html":{}}}],["topic",{"_index":956,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["topicmessage",{"_index":951,"title":{},"body":{"injectables/PushNotificationService.html":{}}}],["touch",{"_index":1233,"title":{},"body":{"index.html":{}}}],["transform",{"_index":783,"title":{},"body":{"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{},"classes/StringToNumberPipe.html":{}}}],["transform(value",{"_index":784,"title":{},"body":{"classes/CheckArticleType.html":{},"classes/StringToNumberPipe.html":{}}}],["transformer",{"_index":1157,"title":{},"body":{"dependencies.html":{}}}],["transforming",{"_index":989,"title":{},"body":{"classes/StringToNumberPipe.html":{}}}],["transport",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["transports",{"_index":1286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transports.console",{"_index":1312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trim",{"_index":638,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["true",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CustomValidationPipe.html":{},"injectables/FileService.html":{},"miscellaneous/variables.html":{}}}],["true})@joincolumn(['undefined",{"_index":264,"title":{},"body":{"entities/ArticleContentEntity.html":{}}}],["true})@jointable({name",{"_index":517,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["try",{"_index":675,"title":{},"body":{"injectables/ArticleService.html":{}}}],["ttl",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":1239,"title":{},"body":{"index.html":{}}}],["type",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"entities/ArticleContentEntity.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/BadValidationRequestException.html":{},"classes/CheckArticleType.html":{},"injectables/EmailService.html":{},"classes/ErrorResponse.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"classes/StringToNumberPipe.html":{},"controllers/TagController.html":{},"classes/TagDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"interfaces/UploadedFileDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.'})@get(':articletype",{"_index":340,"title":{},"body":{"controllers/ArticleController.html":{}}}],["type.enum",{"_index":384,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{}}}],["type.enum.ts",{"_index":1184,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["type.pipe",{"_index":388,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ArticleSearchController.html":{}}}],["type.pipe.ts",{"_index":778,"title":{},"body":{"classes/CheckArticleType.html":{},"coverage.html":{}}}],["type.pipe.ts:8",{"_index":787,"title":{},"body":{"classes/CheckArticleType.html":{}}}],["typeof",{"_index":690,"title":{},"body":{"injectables/ArticleService.html":{}}}],["typeorm",{"_index":293,"title":{},"body":{"entities/ArticleContentEntity.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forfeature",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forroot(databaseconfig",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":1199,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":520,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/StringToNumberPipe.html":{}}}],["unexpected",{"_index":775,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["uniqe",{"_index":1035,"title":{},"body":{"classes/TagDto.html":{}}}],["unit",{"_index":1212,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":1248,"title":{},"body":{"properties.html":{}}}],["unset",{"_index":747,"title":{},"body":{"injectables/ArticleService.html":{}}}],["unwanted",{"_index":590,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["update",{"_index":369,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{}}}],["updatearticlebyid",{"_index":311,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updatearticlebyid(@param('id",{"_index":438,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatearticlebyid(articlecontentid",{"_index":367,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updated",{"_index":373,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{}}}],["updatedarticle",{"_index":656,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedarticle.active",{"_index":737,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedarticle.body",{"_index":731,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedarticle.coverimage",{"_index":742,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedarticle.dateofpublication",{"_index":733,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedarticle.parent",{"_index":735,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedarticle.title",{"_index":729,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedarticle.updatedtags",{"_index":738,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatedtags",{"_index":447,"title":{},"body":{"classes/ArticleDto.html":{}}}],["updatetag",{"_index":998,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["updatetag(@body(customvalidationpipe",{"_index":1026,"title":{},"body":{"controllers/TagController.html":{}}}],["updatetag(newtag",{"_index":1013,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["updating",{"_index":359,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["uploaded",{"_index":1088,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["uploadedfile",{"_index":380,"title":{},"body":{"controllers/ArticleController.html":{}}}],["uploadedfiledto",{"_index":314,"title":{"interfaces/UploadedFileDto.html":{}},"body":{"controllers/ArticleController.html":{},"interfaces/UploadedFileDto.html":{},"coverage.html":{}}}],["uploads",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["uploads/images",{"_index":1281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":542,"title":{},"body":{"classes/ArticleRequestDto.html":{}}}],["use",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleSearchService.html":{}}}],["useclass",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":358,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleRequestDto.html":{},"controllers/ArticleSearchController.html":{},"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":464,"title":{},"body":{"classes/ArticleDto.html":{}}}],["useinterceptors",{"_index":381,"title":{},"body":{"controllers/ArticleController.html":{}}}],["useinterceptors(fileinterceptor('coverimage",{"_index":419,"title":{},"body":{"controllers/ArticleController.html":{}}}],["user",{"_index":838,"title":{},"body":{"classes/ErrorResponse.html":{},"classes/TagDto.html":{}}}],["user's",{"_index":1100,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["username",{"_index":1267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users",{"_index":840,"title":{},"body":{"classes/ErrorResponse.html":{}}}],["utf8_unicode_ci",{"_index":1276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuid",{"_index":897,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":896,"title":{},"body":{"injectables/FileService.html":{}}}],["v4",{"_index":895,"title":{},"body":{"injectables/FileService.html":{}}}],["valid",{"_index":780,"title":{},"body":{"classes/CheckArticleType.html":{},"classes/CustomValidationPipe.html":{}}}],["validate",{"_index":791,"title":{},"body":{"classes/CustomValidationPipe.html":{}}}],["validating",{"_index":536,"title":{},"body":{"classes/ArticleRequestDto.html":{},"classes/BadValidationRequestException.html":{}}}],["validation",{"_index":759,"title":{},"body":{"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{},"coverage.html":{}}}],["validationerror",{"_index":766,"title":{},"body":{"classes/BadValidationRequestException.html":{},"classes/CustomValidationPipe.html":{}}}],["validationpipe",{"_index":793,"title":{},"body":{"classes/CustomValidationPipe.html":{}}}],["validationpipeoptions",{"_index":769,"title":{},"body":{"classes/BadValidationRequestException.html":{}}}],["validator",{"_index":551,"title":{},"body":{"classes/ArticleRequestDto.html":{},"classes/BadValidationRequestException.html":{},"classes/TagDto.html":{},"dependencies.html":{}}}],["value",{"_index":595,"title":{},"body":{"injectables/ArticleSearchService.html":{},"injectables/ArticleService.html":{},"classes/CheckArticleType.html":{},"injectables/FileService.html":{},"classes/StringToNumberPipe.html":{},"injectables/TagService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1110,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1251,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"properties.html":{}}}],["version.'})@get",{"_index":97,"title":{},"body":{"controllers/AppController.html":{}}}],["via",{"_index":362,"title":{},"body":{"controllers/ArticleController.html":{}}}],["void",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/SentryService.html":{}}}],["wait",{"_index":752,"title":{},"body":{"injectables/ArticleService.html":{}}}],["want",{"_index":751,"title":{},"body":{"injectables/ArticleService.html":{}}}],["watch",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["website",{"_index":1237,"title":{},"body":{"index.html":{}}}],["where('content.language",{"_index":613,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["where('language",{"_index":627,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["white",{"_index":591,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["width",{"_index":876,"title":{},"body":{"injectables/FileService.html":{}}}],["winston",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{},"dependencies.html":{}}}],["winston_module_provider",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ArticleService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PushNotificationService.html":{},"injectables/SentryService.html":{}}}],["winstonmodule",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule.forroot(loggerconfig",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmoduleoptions",{"_index":1284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["within",{"_index":1098,"title":{},"body":{"interfaces/UploadedFileDto.html":{}}}],["without",{"_index":589,"title":{},"body":{"injectables/ArticleSearchService.html":{}}}],["world",{"_index":1040,"title":{},"body":{"classes/TagDto.html":{}}}],["x",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["yes",{"_index":653,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/SentryService.html":{}}}],["you'd",{"_index":1228,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":1293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/all-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Default error handler catching all but HTTP exceptions.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost, sentryService: SentryService, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/filters/all-exception.filter.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sentryService\n                                                  \n                                                        \n                                                                        SentryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        catch\n                        \n                    \n                \n            \n            \n                \n                    \n                    catch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/all-exception.filter.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpStatus, Logger, Inject } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { ErrorResponse } from 'src/models/dtos/error-response.dto';\nimport { SentryService } from 'src/services/sentry.service';\n\n/**\n * Default error handler catching all but HTTP exceptions.\n */\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n    constructor(private readonly httpAdapterHost: HttpAdapterHost,\n                private readonly sentryService: SentryService,\n                @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger) {\n    }\n\n    public catch(exception: any, host: ArgumentsHost): void {\n        const httpAdapter: any = this.httpAdapterHost.httpAdapter;\n\n        const ctx: HttpArgumentsHost = host.switchToHttp();\n        const response: any = ctx.getResponse();\n        const request: any = ctx.getRequest();\n        const status: number = HttpStatus.INTERNAL_SERVER_ERROR;\n\n        const responseBody: ErrorResponse = {\n            statusCode: status,\n            message: 'Internal server error occurred, please contact the administrator.',\n            error: exception['message'],\n        };\n\n        httpAdapter.reply(response, responseBody, status);\n        this.sentryService.captureException(`Internal server error ${status}: ${request.url}`, exception['stack']);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                getVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Public\n                        getVersion\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVersion()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get backend version.'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:16\n                \n            \n\n\n            \n                \n                    Get backend version.\n\n\n                    \n                        Example :\n                        \n                            &#39;0.0.1&#39;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        backend version.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiOperation } from '@nestjs/swagger';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Get backend version.\n   * @example '0.0.1'\n   * @returns backend version.\n   */\n  @ApiOperation({ summary: 'Get backend version.' })\n  @Get()\n  public getVersion(): string {\n    return this.appService.getVersion();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArticleSearchService\n\nArticleSearchService\n\nAppModule -->\n\nArticleSearchService->AppModule\n\n\n\n\n\nArticleService\n\nArticleService\n\nAppModule -->\n\nArticleService->AppModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAppModule -->\n\nEmailService->AppModule\n\n\n\n\n\nFileService\n\nFileService\n\nAppModule -->\n\nFileService->AppModule\n\n\n\n\n\nPushNotificationService\n\nPushNotificationService\n\nAppModule -->\n\nPushNotificationService->AppModule\n\n\n\n\n\nSentryService\n\nSentryService\n\nAppModule -->\n\nSentryService->AppModule\n\n\n\n\n\nTagService\n\nTagService\n\nAppModule -->\n\nTagService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            ArticleSearchService\n                        \n                        \n                            ArticleService\n                        \n                        \n                            EmailService\n                        \n                        \n                            FileService\n                        \n                        \n                            PushNotificationService\n                        \n                        \n                            SentryService\n                        \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            ArticleController\n                        \n                        \n                            TagController\n                        \n                        \n                            ArticleSearchController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport databaseConfig from './config/database-config';\nimport { ArticleEntity } from './entities/article.entity';\nimport { ArticleContentEntity } from './entities/article-content.entity';\nimport { ArticleController } from './endpoints/article/article.controller';\nimport { ArticleService } from './endpoints/article/article.service';\nimport loggerConfig from './config/logger-config';\nimport { WinstonModule } from 'nest-winston';\nimport { APP_FILTER, APP_INTERCEPTOR } from '@nestjs/core';\nimport { HttpExceptionFilter } from './filters/http-exception.filter';\nimport { AllExceptionsFilter } from './filters/all-exception.filter';\nimport { TagEntity } from './entities/tag.entity';\nimport { CacheInterceptor, CacheModule } from '@nestjs/cache-manager';\nimport { SentryService } from './services/sentry.service';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { FileService } from './services/file.service';\nimport { EmailService } from './services/email.service';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { TagService } from './endpoints/tag/tag.service';\nimport { TagController } from './endpoints/tag/tag.controller';\nimport { AcceptLanguageResolver, HeaderResolver, I18nModule } from 'nestjs-i18n';\nimport { PushNotificationService } from './endpoints/push-notification/push-notification.service';\nimport { ArticleSearchService } from './endpoints/article/search/article-search.service';\nimport { ArticleSearchController } from './endpoints/article/search/article-search.controller';\n\n@Module({\n    imports: [\n        ServeStaticModule.forRoot(\n            {\n                rootPath: join(__dirname, '..', 'uploads'),\n                serveRoot: '/uploads',\n                exclude: ['/api/(.*)'],\n            },\n        ),\n        ConfigModule.forRoot(),\n        CacheModule.register({\n            ttl: 1000, // ms. 1s during developing. In prod, this could be higher.\n        }),\n        TypeOrmModule.forRoot(databaseConfig),\n        TypeOrmModule.forFeature([\n            ArticleEntity,\n            ArticleContentEntity,\n            TagEntity,\n        ]),\n        I18nModule.forRoot({\n            fallbackLanguage: 'en',\n            loaderOptions: {\n                path: join(__dirname, 'assets', 'i18n'),\n                watch: true,\n            },\n            resolvers: [\n                { use: HeaderResolver, options: ['x-language']}\n            ]\n        }),\n        MailerModule.forRoot({\n            transport: {\n                host: 'localhost',\n                port: 1025,\n                ignoreTLS: true,\n                secure: false,\n            },\n            preview: false,\n            defaults: {\n                from: '\"Info\" ',\n            },\n            template: {\n                dir: __dirname + '/templates/emails',\n                adapter: new HandlebarsAdapter(),\n                options: {\n                    strict: true,\n                },\n            },\n        }),\n        WinstonModule.forRoot(loggerConfig),\n    ],\n    controllers: [\n        AppController,\n        ArticleController,\n        TagController,\n        ArticleSearchController\n    ],\n    providers: [\n        AppService,\n        ArticleService,\n        ArticleSearchService,\n        SentryService,\n        FileService,\n        EmailService,\n        TagService,\n        PushNotificationService,\n        {\n            provide: APP_FILTER,\n            useClass: AllExceptionsFilter,\n        },\n        {\n            provide: APP_FILTER,\n            useClass: HttpExceptionFilter,\n        },\n        {\n            provide: APP_INTERCEPTOR,\n            useClass: CacheInterceptor,\n        },\n    ],\n})\nexport class AppModule {}\n\nexport const SERVER_URL: string = process.env.SERVER_URL ?? '';\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getVersion\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVersion()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nconst { version } = require('../package.json');\n\n@Injectable()\nexport class AppService {\n  \n  public getVersion(): string {\n    return version;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ArticleContentEntity.html":{"url":"entities/ArticleContentEntity.html","title":"entity - ArticleContentEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ArticleContentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/article-content.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                article\n                            \n                            \n                                    \n                                    Public\n                                articleId\n                            \n                            \n                                    \n                                    Public\n                                body\n                            \n                            \n                                    \n                                    Public\n                                coverImage\n                            \n                            \n                                    \n                                    Public\n                                dateOfPublication\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                language\n                            \n                            \n                                    \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        article\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, article => article.articleContents, {cascade: true})@JoinColumn(['undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        articleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'article_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:19\n                        \n                    \n\n            \n                \n                    Id of the article to which this content belongs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('longtext')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        coverImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true, length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        dateOfPublication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('datetime', {name: 'date_of_publication'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LanguageEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('enum', {enum: LanguageEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article-content.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, Index, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { ArticleEntity } from './article.entity';\nimport { LanguageEnum } from 'src/models/enums/language.enum';\n\n@Index('article_id', ['articleId'], {})\n@Index('IDX_fulltext', ['title', 'body'], { fulltext: true })\n@Index('date_of_publication_idx', ['dateOfPublication'], {})\n@Index('language', ['language'], {})\n@Entity('article_content')\nexport class ArticleContentEntity {\n\n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    /**\n     * Id of the article to which this content belongs.\n     */\n    @Column({ name: 'article_id' })\n    public articleId: number;\n\n    @Column('enum', { enum: LanguageEnum })\n    public language: LanguageEnum;\n\n    @Column()\n    public title: string;\n\n    @Column('longtext')\n    public body: string;\n\n    @Column('varchar', { nullable: true, length: 255 })\n    public coverImage: string | null;\n\n    @Column('datetime', { name: 'date_of_publication' })\n    public dateOfPublication: Date;\n\n    @ManyToOne(() => ArticleEntity, (article) => article.articleContents, { cascade: true })\n    @JoinColumn([{ name: 'article_id', referencedColumnName: 'id' }])\n    public article: ArticleEntity;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArticleController.html":{"url":"controllers/ArticleController.html","title":"controller - ArticleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArticleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/article/article.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                articles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createArticle\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                getArticleById\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                getArticles\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                setArticleActivity\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateArticleById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Public\n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(articleType: ArticleTypeEnum, file: UploadedFileDto, body: ArticleRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create new article.'})@ApiNotFoundResponse({description: 'Cannot parse tags or body is missing for some language.'})@HttpCode(200)@Post(':articleType')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/article.controller.ts:69\n                \n            \n\n\n            \n                \n                    API accepts ArticleRequestDto from request. For each language creates new ArticleContent.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    file\n                                    \n                                                UploadedFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    body\n                                    \n                                                ArticleRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Article request body.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Public\n                        Async\n                        getArticleById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticleById(id: number, language: LanguageEnum)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get article by id.'})@Get('detail/:id')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/article.controller.ts:32\n                \n            \n\n\n            \n                \n                    API returns object with infromation get from ArticleEntity and details about article from ArticleContentEntity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        article detail.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Public\n                        Async\n                        getArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticles(articleType: ArticleTypeEnum, page: number, count: number, language: LanguageEnum, tagId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all articles by article type.'})@Get(':articleType')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/article.controller.ts:50\n                \n            \n\n\n            \n                \n                    Get all articles by article type.\nAPI returns object with infromation get from ArticleEntity and details about article from ArticleContentEntity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type of article.\n\n                                    \n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Page (1, 2, 3, atd)\n\n                                    \n                                \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Number of articles per page.\n\n                                    \n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Content language.\n\n                                    \n                                \n                                \n                                    tagId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If tagId is present, return only articles containing this tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        list of articles.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Public\n                        Async\n                        setArticleActivity\n                        \n                    \n                \n            \n            \n                \n                    \n                    setArticleActivity(articleContentId: number, activity: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Set article activity.'})@ApiNotFoundResponse({description: 'Article not found.'})@Put(':id/activity')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/article.controller.ts:127\n                \n            \n\n\n            \n                \n                    This API is used for updating article activity. Articles cannot be deleted, only deactivated.\nArticles can be deactivated also via updateArticleById. But this API is for quick deactivation via administration.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleContentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of the article content.\n\n                                    \n                                \n                                \n                                    activity\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Activity of the article.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Public\n                        Async\n                        updateArticleById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticleById(articleContentId: number, file: UploadedFileDto, body: ArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update article by id.'})@ApiNotFoundResponse({description: 'Article not found.'})@Put(':id')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/article.controller.ts:99\n                \n            \n\n\n            \n                \n                    This API is used for updating article by id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleContentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of the article content.\n\n                                    \n                                \n                                \n                                    file\n                                    \n                                                UploadedFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    body\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Article details.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Updated article.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Headers, HttpCode, Param, Post, Put, Query, UploadedFile, UseInterceptors } from '@nestjs/common';\nimport { LanguageEnum } from '../../models/enums/language.enum';\nimport { ArticleTypeEnum } from '../../models/enums/article-type.enum';\nimport { ArticleService } from './article.service';\nimport { CheckArticleType } from 'src/utils/pipes/check-article-type.pipe';\nimport { StringToNumberPipe } from 'src/utils/pipes/string-to-number.pipe';\nimport { ArticleDto } from 'src/models/dtos/article.dto';\nimport { ApiNotFoundResponse, ApiOperation } from '@nestjs/swagger';\nimport { ArticleRequestDto } from 'src/models/dtos/article-request.dto';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { FileService } from 'src/services/file.service';\nimport { UploadedFileDto } from 'src/models/dtos/uploaded-file.dto';\nimport { SERVER_URL } from 'src/app.module';\nimport { CustomValidationPipe } from 'src/utils/pipes/validation.pipe';\n\n@Controller('articles')\nexport class ArticleController {\n\n    constructor(private readonly articleService: ArticleService,\n                private readonly fileService: FileService) {\n    }\n\n    /**\n     * API returns object with infromation get from ArticleEntity and details about article from ArticleContentEntity.\n     * \n     * @param id \n     * @param language \n     * @returns article detail.\n     */\n    @ApiOperation({ summary: 'Get article by id.' })\n    @Get('detail/:id')\n    public async getArticleById(@Param('id', StringToNumberPipe) id: number,\n                                @Headers('x-language') language: LanguageEnum): Promise {\n        return this.articleService.getArticleById(id, language);\n    }\n\n    /**\n     * Get all articles by article type.\n     * API returns object with infromation get from ArticleEntity and details about article from ArticleContentEntity.\n     *\n     * @param articleType   Type of article.\n     * @param language      Content language.\n     * @param page          Page (1, 2, 3, atd)\n     * @param count         Number of articles per page.\n     * @param tagId         If tagId is present, return only articles containing this tag.\n     * @returns             list of articles.\n     */\n    @ApiOperation({ summary: 'Get all articles by article type.' })\n    @Get(':articleType')\n    public async getArticles(@Param('articleType', CheckArticleType) articleType: ArticleTypeEnum,\n                             @Query('page', StringToNumberPipe) page: number,\n                             @Query('count', StringToNumberPipe) count: number,\n                             @Headers('x-language') language: LanguageEnum,\n                             @Query('tagId') tagId: string): Promise {\n        return this.articleService.getArticlesByTypeAndFilter(articleType, language, page, count, tagId);\n    }\n\n    /**\n     * API accepts ArticleRequestDto from request. For each language creates new ArticleContent.\n     * \n     * @throws BadRequestException    if cannot parse tags or body is missing for some language.\n     * @param body      Article request body.\n     */\n    @ApiOperation({ summary: 'Create new article.' })\n    @ApiNotFoundResponse({ description: 'Cannot parse tags or body is missing for some language.' })\n    @HttpCode(200)\n    @Post(':articleType')\n    @UseInterceptors(FileInterceptor('coverImage', FileService.multerOptions))\n    public async createArticle(@Param('articleType', CheckArticleType) articleType: ArticleTypeEnum,\n                               @UploadedFile() file: UploadedFileDto,\n                               @Body(CustomValidationPipe) body: ArticleRequestDto): Promise {\n\n        if (file) {\n            await this.fileService.resizeImage(file.path);\n            body.coverImage = `${SERVER_URL}/${file.destination}/${file.filename}`;\n        }\n\n        // Create article. If error occurs, remove file if exists.\n        return this.articleService.createArticle(articleType, body).catch((error) => {\n            if (file) {\n                this.fileService.removeFileFromSystem(file.path);\n            }\n            throw error;\n        });\n    }\n\n    /**\n     * This API is used for updating article by id.\n     * \n     * @throws NotFoundException    if article does not exist.\n     * @param articleContentId      Id of the article content.  \n     * @param body                  Article details.\n     * @returns                     Updated article.\n     */\n    @ApiOperation({ summary: 'Update article by id.' })\n    @ApiNotFoundResponse({ description: 'Article not found.' })\n    @Put(':id')\n    @UseInterceptors(FileInterceptor('coverImage', FileService.multerOptions))\n    public async updateArticleById(@Param('id', StringToNumberPipe) articleContentId: number,\n                                   @UploadedFile() file: UploadedFileDto,\n                                   @Body() body: ArticleDto): Promise {\n\n        if (file) {\n            await this.fileService.resizeImage(file.path);\n            body.coverImage = `${SERVER_URL}/${file.destination}/${file.filename}`;\n        }\n        \n        return this.articleService.updateArticleById(articleContentId, body).catch((error) => {\n            if (file) {\n                this.fileService.removeFileFromSystem(file.path);\n            }\n            throw error;\n        });\n    }\n\n    /**\n     * This API is used for updating article activity. Articles cannot be deleted, only deactivated.\n     * Articles can be deactivated also via updateArticleById. But this API is for quick deactivation via administration.\n     * \n     * @throws NotFoundException    if article does not exist.\n     * @param articleContentId      Id of the article content.\n     * @param activity              Activity of the article.\n     */\n    @ApiOperation({ summary: 'Set article activity.' })\n    @ApiNotFoundResponse({ description: 'Article not found.' })\n    @Put(':id/activity')\n    public async setArticleActivity(@Param('id', StringToNumberPipe) articleContentId: number,\n                                    @Body('active') activity: boolean): Promise {\n        return this.articleService.setArticleActivity(articleContentId, activity);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleDto.html":{"url":"classes/ArticleDto.html","title":"class - ArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dtos/article.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                articleContentId\n                            \n                            \n                                    Public\n                                articleType\n                            \n                            \n                                    Public\n                                body\n                            \n                            \n                                    Public\n                                coverImage\n                            \n                            \n                                    Public\n                                dateOfPublication\n                            \n                            \n                                    Public\n                                language\n                            \n                            \n                                    Public\n                                parent\n                            \n                            \n                                    Public\n                                tags\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                updatedTags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(articleContent: ArticleContentEntity)\n                    \n                \n                        \n                            \n                                Defined in src/models/dtos/article.dto.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        articleContent\n                                                  \n                                                        \n                                                                        ArticleContentEntity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:28\n                        \n                    \n\n            \n                \n                    Is article active?\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        articleContentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        articleType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        coverImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:33\n                        \n                    \n\n            \n                \n                    Cover image of the article.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dateOfPublication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:38\n                        \n                    \n\n            \n                \n                    Date when the article was publicated or updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:16\n                        \n                    \n\n            \n                \n                    Content (title, body) language.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:23\n                        \n                    \n\n            \n                \n                    Id of the parent article.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TagDto[]\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:43\n                        \n                    \n\n            \n                \n                    What tags are associated with this article. Useful for filtering.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updatedTags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article.dto.ts:48\n                        \n                    \n\n            \n                \n                    Tags in string format. When coming from form.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArticleContentEntity } from \"src/entities/article-content.entity\";\nimport { TagDto } from \"./tag.dto\";\n\nexport class ArticleDto {\n\n    public articleContentId: number;\n\n    public title: string;\n    \n    public body: string;\n\n    /**\n     * Content (title, body) language.\n     * @example 'cs'\n     */\n    public language: string;\n    \n    public articleType: string;\n    \n    /**\n     * Id of the parent article.\n     */\n    public parent: number | null;\n\n    /**\n     * Is article active?\n     */\n    public active: boolean;\n\n    /**\n     * Cover image of the article.\n     */\n    public coverImage: string | null;\n\n    /**\n     * Date when the article was publicated or updated.\n     */\n    public dateOfPublication: Date;\n\n    /**\n     * What tags are associated with this article. Useful for filtering.\n     */\n    public tags: TagDto[];\n\n    /**\n     * Tags in string format. When coming from form.\n     */\n    public updatedTags: string;\n\n    constructor(articleContent: ArticleContentEntity) {\n        this.articleContentId = articleContent.id;\n        this.articleType = articleContent.article.articleType;\n        this.language = articleContent.language;\n        this.title = articleContent.title;\n        this.body = articleContent.body;\n        this.active = articleContent.article.active;\n        this.parent = articleContent.article.parent;\n        this.coverImage = articleContent.coverImage;\n        this.tags = articleContent.article.tags?.filter(tag => tag.language == articleContent.language) ?? [];\n        this.dateOfPublication = articleContent.dateOfPublication;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ArticleEntity.html":{"url":"entities/ArticleEntity.html","title":"entity - ArticleEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ArticleEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/article.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                active\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                articleContents\n                            \n                            \n                                    \n                                    Public\n                                articleType\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                childrenArticles\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                parent\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                parentArticle\n                            \n                            \n                                    \n                                    \n                                    Public\n                                tags\n                            \n                            \n                                    \n                                    Public\n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        articleContents\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleContentEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, articleContent => articleContent.article)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        articleType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('enum', {name: 'article_type', enum: ArticleTypeEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        childrenArticles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, article => article.parentArticle)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        parentArticle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, article => article.childrenArticles, {onDelete: 'RESTRICT', onUpdate: 'RESTRICT'})@JoinColumn(['undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TagEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, {cascade: true})@JoinTable({name: 'article__tag', joinColumns: undefined, inverseJoinColumns: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('datetime', {default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/article.entity.ts:25\n                        \n                    \n\n            \n                \n                    Article creation timestamp.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ArticleTypeEnum } from \"src/models/enums/article-type.enum\";\nimport { Column, Entity, JoinColumn, JoinTable, ManyToMany, ManyToOne, OneToMany, PrimaryGeneratedColumn } from \"typeorm\";\nimport { ArticleContentEntity } from \"./article-content.entity\";\nimport { TagEntity } from \"./tag.entity\";\n\n@Entity('article')\nexport class ArticleEntity {\n    \n    @PrimaryGeneratedColumn()\n    public id: number;\n\n    @Column('enum', { name: 'article_type', enum: ArticleTypeEnum })\n    public articleType: ArticleTypeEnum;\n\n    @Column({ default: true })\n    public active: boolean;\n\n    @Column({ nullable: true })\n    public parent: number | null;\n\n    /**\n     * Article creation timestamp.\n     */\n    @Column('datetime', { default: () => 'CURRENT_TIMESTAMP' })\n    public timestamp: Date;\n\n    @OneToMany(() => ArticleContentEntity, (articleContent) => articleContent.article)\n    public articleContents?: ArticleContentEntity[];\n\n    @ManyToOne(() => ArticleEntity, (article) => article.childrenArticles, {\n        onDelete: 'RESTRICT',\n        onUpdate: 'RESTRICT',\n    })\n    @JoinColumn([{ name: 'parent', referencedColumnName: 'id' }])\n    public parentArticle?: ArticleEntity;\n\n    @OneToMany(() => ArticleEntity, (article) => article.parentArticle)\n    public childrenArticles?: ArticleEntity[];\n    \n    @ManyToMany(() => TagEntity, { cascade: true })\n    @JoinTable({\n        name: 'article__tag',\n        joinColumns: [\n            { name: 'article_id', referencedColumnName: 'id'},\n        ],\n        inverseJoinColumns: [\n            { name: 'tag_id', referencedColumnName: 'id'},\n            { name: 'tag_language', referencedColumnName: 'language'},\n        ]\n    })\n    public tags: TagEntity[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleRequestDto.html":{"url":"classes/ArticleRequestDto.html","title":"class - ArticleRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dtos/article-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for validating article from the reqeust during article creation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                body\n                            \n                            \n                                    Public\n                                coverImage\n                            \n                            \n                                    Public\n                                dateOfPublication\n                            \n                            \n                                    Public\n                                parent\n                            \n                            \n                                    \n                                    Public\n                                tags\n                            \n                            \n                                    \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        coverImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article-request.dto.ts:22\n                        \n                    \n\n            \n                \n                    URL of the cover image on the server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dateOfPublication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Date when the article is publicated. If not present, current date is used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article-request.dto.ts:17\n                        \n                    \n\n            \n                \n                    Id of the parent article.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article-request.dto.ts:28\n                        \n                    \n\n            \n                \n                    Stringified array of tag ids.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/article-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\n/**\n * DTO for validating article from the reqeust during article creation.\n */\nexport class ArticleRequestDto {\n\n    @IsNotEmpty()\n    public title: { cs: string, en: string };\n    \n    @IsNotEmpty()\n    public body: { cs: string, en: string };\n\n    /**\n     * Id of the parent article.\n     */\n    public parent: number;\n\n    /**\n     * URL of the cover image on the server.\n     */\n    public coverImage: string;\n\n    /**\n     * Stringified array of tag ids.\n     */\n    @IsNotEmpty()\n    public tags: string;\n\n    /**\n     * Date when the article is publicated. If not present, current date is used.\n     */\n    public dateOfPublication: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArticleSearchController.html":{"url":"controllers/ArticleSearchController.html","title":"controller - ArticleSearchController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArticleSearchController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/article/search/article-search.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                articles/search\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                search\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                searchAutocomplete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Public\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(articleType: ArticleTypeEnum, page: number, count: number, language: LanguageEnum, pattern: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Search articles by pattern in title or body.'})@ApiNotFoundResponse({description: 'Pattern is not present.'})@Get(':articleType')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/search/article-search.controller.ts:29\n                \n            \n\n\n            \n                \n                    This API is used for searching articles by pattern in title or body.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pagination page.\n\n                                    \n                                \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Number of articles per page.\n\n                                    \n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Language of the article.\n\n                                    \n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pattern to search.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        List of articles.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Public\n                        searchAutocomplete\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAutocomplete(articleType: ArticleTypeEnum, language: LanguageEnum, pattern: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Search articles for autocomplete.'})@ApiNotFoundResponse({description: 'Pattern is not present.'})@Get('autocomplete/:articleType')\n                \n            \n\n            \n                \n                    Defined in src/endpoints/article/search/article-search.controller.ts:48\n                \n            \n\n\n            \n                \n                    API for searching articles for autocomplete. Search only in title. Return only id, title and dateOfPublication.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Language of the article.\n\n                                    \n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pattern to search.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Only id, title and dateOfPublication.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Headers, Param,Query } from '@nestjs/common';\nimport { CheckArticleType } from 'src/utils/pipes/check-article-type.pipe';\nimport { StringToNumberPipe } from 'src/utils/pipes/string-to-number.pipe';\nimport { ArticleDto } from 'src/models/dtos/article.dto';\nimport { ApiNotFoundResponse, ApiOperation } from '@nestjs/swagger';\nimport { ArticleTypeEnum } from 'src/models/enums/article-type.enum';\nimport { LanguageEnum } from 'src/models/enums/language.enum';\nimport { ArticleSearchService } from './article-search.service';\n\n@Controller('articles/search')\nexport class ArticleSearchController {\n\n    constructor(private readonly articleSearchService: ArticleSearchService) {\n    }\n\n    /**\n     * This API is used for searching articles by pattern in title or body.\n     * \n     * @throws NotFoundException    if pattern is not present.\n     * @param pattern   Pattern to search.\n     * @param language  Language of the article.\n     * @param page      Pagination page.\n     * @param count     Number of articles per page.\n     * @returns         List of articles.\n     */\n    @ApiOperation({ summary: 'Search articles by pattern in title or body.' })\n    @ApiNotFoundResponse({ description: 'Pattern is not present.' })\n    @Get(':articleType')\n    public search(@Param('articleType', CheckArticleType) articleType: ArticleTypeEnum,\n                  @Query('page', StringToNumberPipe) page: number,\n                  @Query('count', StringToNumberPipe) count: number,\n                  @Headers('x-language') language: LanguageEnum,\n                  @Query('pattern') pattern: string): Promise {\n        return this.articleSearchService.searchArticles(articleType, pattern, language, page, count);\n    }\n\n    /**\n     * API for searching articles for autocomplete. Search only in title. Return only id, title and dateOfPublication.\n     * \n     * @throws NotFoundException    if pattern is not present.\n     * @param pattern   Pattern to search.\n     * @param language  Language of the article.\n     * @returns         Only id, title and dateOfPublication.\n     */\n    @ApiOperation({ summary: 'Search articles for autocomplete.' })\n    @ApiNotFoundResponse({ description: 'Pattern is not present.' })\n    @Get('autocomplete/:articleType')\n    public searchAutocomplete(@Param('articleType', CheckArticleType) articleType: ArticleTypeEnum,\n                              @Headers('x-language') language: LanguageEnum,\n                              @Query('pattern') pattern: string): Promise {\n        return this.articleSearchService.searchAutocompleteArticle(articleType, pattern, language);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticleSearchService.html":{"url":"injectables/ArticleSearchService.html","title":"injectable - ArticleSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArticleSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/article/search/article-search.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkSearchPattern\n                            \n                            \n                                    Public\n                                    Async\n                                searchArticles\n                            \n                            \n                                    Public\n                                    Async\n                                searchAutocompleteArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(articleContentRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/endpoints/article/search/article-search.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        articleContentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        checkSearchPattern\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkSearchPattern(pattern: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/search/article-search.service.ts:83\n                \n            \n\n\n            \n                \n                    This method is used for checking search pattern.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pattern to search.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Pattern without unwanted white spaces.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        searchArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchArticles(articleType: ArticleTypeEnum, pattern: string, language: LanguageEnum, page: number, count: number)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/search/article-search.service.ts:25\n                \n            \n\n\n            \n                \n                    This method is used for searching articles by pattern in title or body.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pattern to search.\n\n                                    \n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_LANGUAGE\n                                    \n\n                                    \n                                        Language of the article.\n\n                                    \n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        Pagination page.\n\n                                    \n                                \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        PAGE_COUNT\n                                    \n\n                                    \n                                        Number of articles per page.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        List of articles.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        searchAutocompleteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAutocompleteArticle(articleType: ArticleTypeEnum, pattern: string, language: LanguageEnum)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/search/article-search.service.ts:57\n                \n            \n\n\n            \n                \n                    Method for searching articles for autocomplete. Search only in title. Return only id, title and dateOfPublication.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Pattern to search.\n\n                                    \n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_LANGUAGE\n                                    \n\n                                    \n                                        Language of the article.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Only id, title and dateOfPublication.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DEFAULT_LANGUAGE, PAGE_COUNT } from \"src/constants\";\nimport { ArticleContentEntity } from \"src/entities/article-content.entity\";\nimport { ArticleDto } from \"src/models/dtos/article.dto\";\nimport { ArticleTypeEnum } from \"src/models/enums/article-type.enum\";\nimport { LanguageEnum } from \"src/models/enums/language.enum\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\n\n@Injectable()\nexport class ArticleSearchService {\n\n    constructor(\n        @InjectRepository(ArticleContentEntity) private articleContentRepository: Repository,\n    ) { }\n\n    /**\n     * This method is used for searching articles by pattern in title or body.\n     * @param pattern   Pattern to search.\n     * @param language  Language of the article.\n     * @param page      Pagination page.\n     * @param count     Number of articles per page.\n     * @returns         List of articles.\n     */\n    public async searchArticles(\n        articleType: ArticleTypeEnum,\n        pattern: string,\n        language: LanguageEnum = DEFAULT_LANGUAGE,\n        page: number = 1,\n        count: number = PAGE_COUNT\n    ): Promise {\n        pattern = this.checkSearchPattern(pattern);\n\n        // Cannot use find() because of the WHERE condition with OR operator.\n        const sqlQuery: SelectQueryBuilder = this.articleContentRepository\n            .createQueryBuilder('content')\n            .innerJoinAndSelect('content.article', 'article')\n            .leftJoinAndSelect('article.tags', 'tags')\n            .where('content.language = :language', { language })\n            .andWhere('article.active = 1')\n            .andWhere('article.articleType = :articleType', { articleType })\n            .andWhere('(content.title LIKE :pattern OR content.body LIKE :pattern)', { pattern: `%${pattern}%` })\n            .limit(count)\n            .offset(page  new ArticleDto(articleContent));\n    }\n\n    /**\n     * Method for searching articles for autocomplete. Search only in title. Return only id, title and dateOfPublication.\n     * @param pattern   Pattern to search.\n     * @param language  Language of the article.\n     * @returns         Only id, title and dateOfPublication.\n     */\n    public async searchAutocompleteArticle(articleType: ArticleTypeEnum, pattern: string, language: LanguageEnum = DEFAULT_LANGUAGE ): Promise {\n        pattern = this.checkSearchPattern(pattern);\n\n        // Search only in title.\n        // Return only id, title and dateOfPublication. It is enough for autocomplete.\n        const queryBuilder: SelectQueryBuilder = this.articleContentRepository\n            .createQueryBuilder('content')\n            .select('content.id', 'articleContentId')\n            .addSelect('title')\n            .addSelect('date_of_publication', 'dateOfPublication')\n            .innerJoin('content.article', 'article')\n            .where('language = :language', { language })\n            .andWhere('article.articleType = :articleType', { articleType })\n            .andWhere('title LIKE :pattern', { pattern: `%${pattern}%` })\n            .limit(10)\n            .orderBy('dateOfPublication', 'DESC');\n\n        return await queryBuilder.getRawMany();\n    }\n\n    /**\n     * This method is used for checking search pattern.\n     * @throws BadRequestException  if pattern is missing.\n     * @param pattern               Pattern to search.\n     * @returns                     Pattern without unwanted white spaces.\n     */\n    private checkSearchPattern(pattern: string): string {\n        if (!pattern) {\n            throw new BadRequestException('Missing mandatory parameter(s): pattern.');\n        }\n        \n        // Remove unwanted white spaces.\n        return pattern.replace(/ +/g, ' ').trim();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticleService.html":{"url":"injectables/ArticleService.html","title":"injectable - ArticleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArticleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/article/article.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createArticle\n                            \n                            \n                                    Public\n                                    Async\n                                getArticleById\n                            \n                            \n                                    Public\n                                    Async\n                                getArticlesByTypeAndFilter\n                            \n                            \n                                    Public\n                                    Async\n                                setArticleActivity\n                            \n                            \n                                    Public\n                                    Async\n                                updateArticleById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository, articleRepository: Repository, articleContentRepository: Repository, logger: Logger, emailService: EmailService, pushNotificationService: PushNotificationService, fileService: FileService)\n                    \n                \n                        \n                            \n                                Defined in src/endpoints/article/article.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        articleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        articleContentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pushNotificationService\n                                                  \n                                                        \n                                                                        PushNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fileService\n                                                  \n                                                        \n                                                                        FileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(articleType: ArticleTypeEnum, newArticleDto: ArticleRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/article.service.ts:35\n                \n            \n\n\n            \n                \n                    This method is used for creating new article.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type of article.\n\n                                    \n                                \n                                \n                                    newArticleDto\n                                    \n                                                ArticleRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Article details.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getArticleById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticleById(articleContentId: number, language: LanguageEnum)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/article.service.ts:141\n                \n            \n\n\n            \n                \n                    This method is used for getting article by id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleContentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Id of the article content.\n\n                                    \n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_LANGUAGE\n                                    \n\n                                    \n                                        Language of the article.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Article with details.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getArticlesByTypeAndFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticlesByTypeAndFilter(articleType: ArticleTypeEnum, language: LanguageEnum, page: number, count: number, tagId?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/article.service.ts:102\n                \n            \n\n\n            \n                \n                    This method is used for getting articles by type and tag.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleType\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Type of article.\n\n                                    \n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_LANGUAGE\n                                    \n\n                                    \n                                        Content language.\n\n                                    \n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        Pagination page.\n\n                                    \n                                \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        PAGE_COUNT\n                                    \n\n                                    \n                                        Number of articles per page.\n\n                                    \n                                \n                                \n                                    tagId\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        If tagId is present, return only articles containing this tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        List of articles filtered by type and tag.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        setArticleActivity\n                        \n                    \n                \n            \n            \n                \n                    \n                    setArticleActivity(articleContentId: number, activity: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/article.service.ts:250\n                \n            \n\n\n            \n                \n                    This method is used for updating article activity.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleContentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of the article content.\n\n                                    \n                                \n                                \n                                    activity\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Activity of the article.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateArticleById\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticleById(articleContentId: number, updatedArticle: ArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/article/article.service.ts:173\n                \n            \n\n\n            \n                \n                    This method is used for updating article by id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    articleContentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of the article content.\n\n                                    \n                                \n                                \n                                    updatedArticle\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Article details.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Updated article.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable, Logger, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { WINSTON_MODULE_PROVIDER } from \"nest-winston\";\nimport { DEFAULT_LANGUAGE, PAGE_COUNT } from \"src/constants\";\nimport { ArticleContentEntity } from \"src/entities/article-content.entity\";\nimport { ArticleEntity } from \"src/entities/article.entity\";\nimport { TagEntity } from \"src/entities/tag.entity\";\nimport { ArticleRequestDto } from \"src/models/dtos/article-request.dto\";\nimport { ArticleDto } from \"src/models/dtos/article.dto\";\nimport { ArticleTypeEnum } from \"src/models/enums/article-type.enum\";\nimport { LanguageEnum } from \"src/models/enums/language.enum\";\nimport { EmailService } from \"src/services/email.service\";\nimport { FileService } from \"src/services/file.service\";\nimport { In, Repository } from \"typeorm\";\nimport { PushNotificationService } from \"src/endpoints/push-notification/push-notification.service\";\n\n@Injectable()\nexport class ArticleService {\n\n    constructor(\n        @InjectRepository(TagEntity) private tagRepository: Repository,\n        @InjectRepository(ArticleEntity) private articleRepository: Repository,\n        @InjectRepository(ArticleContentEntity) private articleContentRepository: Repository,\n        @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n        private readonly emailService: EmailService,\n        private readonly pushNotificationService: PushNotificationService,\n        private readonly fileService: FileService\n    ) { }\n\n    /**\n     * This method is used for creating new article.\n     * @param articleType   Type of article.\n     * @param newArticleDto Article details.\n     */\n    public async createArticle(articleType: ArticleTypeEnum, newArticleDto: ArticleRequestDto): Promise {\n        this.logger.log('info', `[STORYBOARD_ARTICLE_SERVICE] Article=${JSON.stringify(newArticleDto)}`);\n\n        // Title is mandatory, we will take from it what languages are in the request.\n        const languages: string [] = Object.keys(newArticleDto.title) as Array;\n\n        // Create new article.\n        const newArticle: ArticleEntity = new ArticleEntity();\n        newArticle.articleType = articleType;\n        newArticle.parent = newArticleDto.parent;\n\n        // Parse tags from request.\n        let tagsFromDto: TagEntity[] = [];\n        try {\n            tagsFromDto = JSON.parse(newArticleDto.tags);\n        } catch(e) {\n            this.logger.error(`[STORYBOARD_ARTICLE_SERVICE] Cannot parse tags from request. ${e}`);\n            throw new BadRequestException(`Cannot parse tags from request. ${newArticleDto.tags}`);\n        }\n\n        // Find tags from database by ids from request.\n        newArticle.tags = await this.tagRepository.findBy({\n            id: In(tagsFromDto.map(tag => tag.id))\n        });\n\n        // Create new article content for each language.\n        const newArticleContentEntities: ArticleContentEntity[] = languages.map((language: keyof typeof newArticleDto.title) => {\n            const newArticleContent: ArticleContentEntity = new ArticleContentEntity();\n            newArticleContent.title = newArticleDto.title[language];\n            newArticleContent.body = newArticleDto.body[language];\n            newArticleContent.language =  language;\n            newArticleContent.dateOfPublication = newArticleDto.dateOfPublication ?? new Date();\n            newArticleContent.article = newArticle;\n            newArticleContent.coverImage = newArticleDto.coverImage;\n\n            if (!newArticleContent.title) {\n                throw new BadRequestException(`Missing mandatory parameter(s): title for language ${language}.`);\n            }\n            \n            if (!newArticleContent.body) {\n                throw new BadRequestException(`Missing mandatory parameter(s): body for language ${language}.`);\n            }\n            return newArticleContent;\n        });\n\n        await this.articleContentRepository.save(newArticleContentEntities);\n\n        // Send email about new article.\n        // This feature is just for testing purposes, so pick first language.\n        this.emailService.sendEmail(new ArticleDto(newArticleContentEntities[0]));\n\n        // Send push notification about new article for every language.\n        newArticleContentEntities.forEach(item => {\n            this.pushNotificationService.sendPushNotificationToTopic(item, item.language);\n        });\n        \n    }\n\n    /**\n     * This method is used for getting articles by type and tag.\n     * @param articleType   Type of article.\n     * @param language      Content language.\n     * @param page          Pagination page.\n     * @param count         Number of articles per page.\n     * @param tagId         If tagId is present, return only articles containing this tag.\n     * @returns             List of articles filtered by type and tag.\n     */\n    public async getArticlesByTypeAndFilter(\n        articleType: ArticleTypeEnum,\n        language: LanguageEnum = DEFAULT_LANGUAGE,\n        page: number = 1,\n        count: number = PAGE_COUNT,\n        tagId?: string\n    ): Promise {\n\n        const articleContentEntities: ArticleContentEntity[] = await this.articleContentRepository.find({\n            where: {\n                language: language,\n                article: {\n                    active: true,\n                    articleType: articleType,\n                    tags: tagId ? {\n                        language: language,\n                        id: tagId\n                    } : undefined\n                }\n            },\n            relations: {\n                article: {\n                    tags: true\n                }\n            },\n            skip: (page  new ArticleDto(articleContent));\n    }\n\n    /**\n     * This method is used for getting article by id.\n     * @param articleContentId  Id of the article content.\n     * @param language          Language of the article.\n     * @returns                 Article with details.\n     */\n    public async getArticleById(articleContentId: number, language: LanguageEnum = DEFAULT_LANGUAGE): Promise {\n\n        const articleContentEntity: ArticleContentEntity | null = await this.articleContentRepository.findOne({\n            where: {\n                id: articleContentId,\n                article: {\n                    tags: {\n                        language: language\n                    }\n                }\n            },\n            relations: {\n                article: {\n                    tags: true\n                }\n            }\n        });\n\n        if (!articleContentEntity) {\n            throw new NotFoundException(`Article with id ${articleContentId} not found.`);\n        }\n\n        return new ArticleDto(articleContentEntity);\n    }\n    \n    /**\n     * This method is used for updating article by id.\n     * @throws NotFoundException    if article does not exist.\n     * @param articleContentId      Id of the article content.  \n     * @param updatedArticle        Article details.\n     * @returns                     Updated article.\n     */\n    public async updateArticleById(articleContentId: number, updatedArticle: ArticleDto): Promise {\n        \n        const oldArticleContentEntity: ArticleContentEntity | null = await this.articleContentRepository.findOne({\n            where: {\n                id: articleContentId\n            },\n            relations: {\n                article: {\n                    tags: true\n                }\n            }\n        });\n\n        if (!oldArticleContentEntity) {\n            throw new NotFoundException(`Article with id ${articleContentId} not found.`);\n        }\n\n        // Update oldArticleContentEntity with data from body.\n        oldArticleContentEntity.title = updatedArticle.title;\n        oldArticleContentEntity.body = updatedArticle.body;\n        oldArticleContentEntity.dateOfPublication = updatedArticle.dateOfPublication ?? new Date();\n        oldArticleContentEntity.article.parent = updatedArticle.parent;\n        oldArticleContentEntity.article.active = updatedArticle.active;\n\n        if (updatedArticle.updatedTags) {\n            // Parse tags from request form.\n            let tagsFromDto: TagEntity[] = [];\n            try {\n                tagsFromDto = JSON.parse(updatedArticle.updatedTags);\n            } catch(e) {\n                this.logger.error(`[STORYBOARD_ARTICLE_SERVICE] Cannot parse tags from request. ${e}`);\n                throw new BadRequestException(`Cannot parse tags from request. ${updatedArticle.updatedTags}`);\n            }\n\n            // Find tags from database by ids from request.\n            oldArticleContentEntity.article.tags = await this.tagRepository.findBy({ \n                id: In(tagsFromDto.map(tag => tag.id)) \n            });\n        } else {\n            // If tags are not present, remove all tags from article.\n            oldArticleContentEntity.article.tags = [];\n        }\n\n        let coverImageToDelete: string | null = null;\n\n        // If cover image is present, update it.\n        if (updatedArticle.coverImage) {\n            // If cover image is updated, delete old one.\n            coverImageToDelete = oldArticleContentEntity.coverImage;\n\n            // New cover image.\n            oldArticleContentEntity.coverImage = updatedArticle.coverImage;\n        } else if (updatedArticle.coverImage === '') {\n\n            // If cover image is unset, delete it.\n            coverImageToDelete = oldArticleContentEntity.coverImage;\n            oldArticleContentEntity.coverImage = null;\n        }\n\n        const newArticleContentEntity: ArticleContentEntity = await this.articleContentRepository.save(oldArticleContentEntity);\n\n        // New entity is saved, we can remove old cover image.\n        // Do not await, we do not want to wait for this operation.\n        if (coverImageToDelete) {\n            this.fileService.removeFileFromSystem(coverImageToDelete);\n        }\n\n        return new ArticleDto(newArticleContentEntity);\n    }\n    \n    /**\n     * This method is used for updating article activity.\n     * \n     * @throws NotFoundException    if article does not exist.\n     * @param articleContentId  Id of the article content.\n     * @param activity          Activity of the article.\n     */\n    public async setArticleActivity(articleContentId: number, activity: boolean): Promise {\n        \n        const articleContentEntity: ArticleContentEntity | null = await this.articleContentRepository.findOne({\n            where: {\n                id: articleContentId\n            },\n            relations: {\n                article: true\n            }\n        });\n\n        if (!articleContentEntity) {\n            throw new NotFoundException(`Article with id ${articleContentId} not found.`);\n        }\n\n        await this.articleRepository.update(articleContentEntity.article.id, { active: activity });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BadValidationRequestException.html":{"url":"classes/BadValidationRequestException.html","title":"class - BadValidationRequestException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BadValidationRequestException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/exceptions/bad-validation-request.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                An error that will be returned if some mandatory attribute is missing from the Article.\nThe error is returned by the validator that checks the request.\n\n            \n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errors: ValidationError[])\n                    \n                \n                        \n                            \n                                Defined in src/models/exceptions/bad-validation-request.exception.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    ValidationError[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException, ValidationError, ValidationPipeOptions } from '@nestjs/common';\n\n/**\n  * An error that will be returned if some mandatory attribute is missing from the Article.\n  * The error is returned by the validator that checks the request.\n  */\nexport class BadValidationRequestException extends BadRequestException {\n    constructor(errors: ValidationError[]) {\n        const properties: string[] = [];\n\n        // List of mandatory attributes that are missing.\n        errors.forEach((error: ValidationError) => {\n            properties.push(error.property);\n        });\n\n        const message: string = properties.length == 0\n            ? 'Unexpected error while validating request parameters.'\n            : 'Missing mandatory parameter(s): ' + properties.join(', ');\n\n        super({\n            response: 0,\n            message: message,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckArticleType.html":{"url":"classes/CheckArticleType.html","title":"class - CheckArticleType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckArticleType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pipes/check-article-type.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Pipe for checking article type. If type is not valid, BadRequestException is thrown.\n\n            \n\n\n            \n                Implements\n            \n            \n                        PipeTransform\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: ArticleTypeEnum, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/pipes/check-article-type.pipe.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                ArticleTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ArticleTypeEnum\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentMetadata, BadRequestException, PipeTransform } from '@nestjs/common';\nimport { ArticleTypeEnum } from 'src/models/enums/article-type.enum';\n\n/**\n * Pipe for checking article type. If type is not valid, BadRequestException is thrown.\n */\nexport class CheckArticleType implements PipeTransform {\n    public transform(value: ArticleTypeEnum, metadata: ArgumentMetadata): ArticleTypeEnum {\n\n        for (const articleType of Object.values(ArticleTypeEnum)) {\n            if (value === articleType) {\n                return articleType;\n            }\n        }\n        \n        throw new BadRequestException(`Unsupported article type: ${value}`);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomValidationPipe.html":{"url":"classes/CustomValidationPipe.html","title":"class - CustomValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pipes/validation.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Validate if request body is valid according to DTO.\n\n            \n\n            \n                Extends\n            \n            \n                    ValidationPipe\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/utils/pipes/validation.pipe.ts:7\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ValidationError, ValidationPipe } from \"@nestjs/common\";\nimport { BadValidationRequestException } from \"src/models/exceptions/bad-validation-request.exception\";\n\n/**\n * Validate if request body is valid according to DTO.\n */\nexport class CustomValidationPipe extends ValidationPipe {\n    constructor() {\n        super({\n            transform: true,\n            exceptionFactory: (errors: ValidationError[]) => new BadValidationRequestException(errors),\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger, sentryService: SentryService, mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/services/email.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sentryService\n                                                  \n                                                        \n                                                                        SentryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(article: ArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/services/email.service.ts:21\n                \n            \n\n\n            \n                \n                    Send email about new article.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    article\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Article to send.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from \"@nestjs-modules/mailer\";\nimport { Inject, Injectable, Logger } from \"@nestjs/common\";\nimport { WINSTON_MODULE_PROVIDER } from \"nest-winston\";\nimport { ArticleDto } from \"src/models/dtos/article.dto\";\nimport { SentryService } from \"./sentry.service\";\nimport * as path from 'path';\nimport * as moment from \"moment\";\n\n@Injectable()\nexport class EmailService {\n\n    constructor(@Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n                private readonly sentryService: SentryService,\n                private readonly mailerService: MailerService) {\n    }\n\n    /**\n     * Send email about new article.\n     * @param article   Article to send.\n     */\n    public async sendEmail(article: ArticleDto): Promise {\n        this.logger.log('info', `[EMAIL_SERVICE] Sending email about new article ${article.articleContentId}`);\n\n        this.mailerService.sendMail({\n            to: 'test@test.com',\n            subject: 'New article: ' + article.title,\n            template: 'new-article',\n            context: {\n                title: article.title,\n                body: article.body,\n                coverImage: article.coverImage,\n                dateOfPublication: moment(article.dateOfPublication).format('DD.MM.YYYY'),\n            },\n            attachments: [{\n                filename: 'best-news.png',\n                path: path.join(__dirname, '..', 'templates', 'assets', 'images', 'best-news.png'),\n                contentType: 'image/png',\n                cid: 'newsSmall',\n            }]\n        }).then(() => {\n            this.logger.log('info', `Email about new article ${article.articleContentId} was sent.`);\n        }).catch((error) => {\n            this.sentryService.captureException('[EMAIL_SERVICE_ERROR] Cannot send email.', `Email about new article (${article.articleContentId}-${article.title}) was not sent. Error: ${error}`);\n        });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorResponse.html":{"url":"classes/ErrorResponse.html","title":"class - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dtos/error-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                error\n                            \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Public\n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/error-response.dto.ts:6\n                        \n                    \n\n            \n                \n                    Error detail. Intended for developers.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/error-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    User-friendly error. Intended for users\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/error-response.dto.ts:16\n                        \n                    \n\n            \n                \n                    HTTP status code.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ErrorResponse {\n\n    /**\n     * Error detail. Intended for developers.\n     */\n    public error: string;\n\n    /**\n     * User-friendly error. Intended for users\n     */\n    public message: string;\n\n    /**\n     * HTTP status code.\n     */\n    public statusCode: number;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileService.html":{"url":"injectables/FileService.html","title":"injectable - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/file.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                multerOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                fileFilter\n                            \n                            \n                                    Static\n                                getRandomName\n                            \n                            \n                                    Public\n                                    Async\n                                removeFileFromSystem\n                            \n                            \n                                    Public\n                                    Async\n                                resizeImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sentryService: SentryService, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/services/file.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sentryService\n                                                  \n                                                        \n                                                                        SentryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        fileFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    fileFilter(_req: any, file: Express.Multer.File, cb: (error: Error | null,acceptFile: boolean) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/services/file.service.ts:51\n                \n            \n\n\n            \n                \n                    Filter files that have not allowed extension.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cb\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getRandomName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRandomName(originalname: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/file.service.ts:42\n                \n            \n\n\n            \n                \n                    Generate random name for file.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    originalname\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Original name of file to get extension.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Random name with extension.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        removeFileFromSystem\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFileFromSystem(fileUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/file.service.ts:87\n                \n            \n\n\n            \n                \n                    Remove file from system.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resizeImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    resizeImage(path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/file.service.ts:65\n                \n            \n\n\n            \n                \n                    Resize image to 360px width. Image size is reduced.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path to image.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        True if image was resized, false otherwise.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        multerOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MulterOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n        storage: diskStorage({\n            destination: DIRECTORY_IMAGES,\n            filename: (_req, file, cb) => {\n                return cb(null, FileService.getRandomName(file.originalname));\n            },\n        }),\n        fileFilter: FileService.fileFilter,\n        limits: {\n            fileSize: MAX_FILE_SIZE\n        }\n    }\n                    \n                \n                    \n                        \n                                Defined in src/services/file.service.ts:24\n                        \n                    \n\n            \n                \n                    Options for multer.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable, Logger } from '@nestjs/common';\nimport { MulterOptions } from '@nestjs/platform-express/multer/interfaces/multer-options.interface';\nimport { diskStorage } from 'multer';\n\nimport { DIRECTORY_IMAGES, MAX_FILE_SIZE } from 'src/constants';\nimport { v4 as uuidv4 } from 'uuid';\nimport { extname } from 'path';\nimport * as sharp from 'sharp';\nimport { SentryService } from './sentry.service';\nimport { SERVER_URL } from 'src/app.module';\nimport * as fs from 'fs';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\n\n@Injectable()\nexport class FileService {\n\n    constructor(private readonly sentryService: SentryService,\n                @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger) {\n    }\n\n    /**\n     * Options for multer.\n     */\n    public static multerOptions: MulterOptions = {\n        storage: diskStorage({\n            destination: DIRECTORY_IMAGES,\n            filename: (_req, file, cb) => {\n                return cb(null, FileService.getRandomName(file.originalname));\n            },\n        }),\n        fileFilter: FileService.fileFilter,\n        limits: {\n            fileSize: MAX_FILE_SIZE\n        }\n    };\n    \n    /**\n     * Generate random name for file.\n     * @param originalname  Original name of file to get extension.\n     * @returns             Random name with extension.\n     */\n    public static getRandomName(originalname: string): string {\n        const randomName: string = uuidv4();\n        return `${randomName}${extname(originalname)}`;\n    }\n\n    /**\n     * Filter files that have not allowed extension.\n     * \n     */\n    private static fileFilter(_req: any, file: Express.Multer.File, cb: (error: Error | null, acceptFile: boolean) => void): void {\n        let allowedFileTypes: string[] = ['image/png', 'image/jpeg', 'image/gif'];\n\n        if (!allowedFileTypes.includes(file.mimetype)) {\n            return cb(new BadRequestException('Only JPG, JPEG, PNG and GIF files are allowed.'), false);\n        }\n        return cb(null, true);\n    }\n\n    /**\n     * Resize image to 360px width. Image size is reduced.\n     * @param path  Path to image.\n     * @returns     True if image was resized, false otherwise.\n     */\n    public async resizeImage(path: string): Promise {\n        const buffer: Buffer = await sharp(path)\n            .resize({\n                width: 360,\n                fit: 'inside',\n            })\n            .toBuffer();\n\n        return sharp(buffer).toFile(path)\n            .then(() => {\n                return true;\n            }).catch((error: Error) => {\n                this.sentryService.captureException('Error while resizing image.', error);\n                return false;\n            });\n    }\n\n    /**\n     * Remove file from system.\n     * @param fileUrl \n     * @returns \n     */\n    public async removeFileFromSystem(fileUrl: string): Promise {\n        if (!fileUrl) {\n            return true;\n        }\n        return new Promise((resolve) => {\n            let oldDataRelativeUrl: string = '';\n\n            // If fileUrl starts with SERVER_URL, then remove it.\n            if (fileUrl.startsWith(SERVER_URL)) {\n                oldDataRelativeUrl = fileUrl.replace(SERVER_URL, '');\n            }\n\n            // If fileUrl starts with '/', then remove it.\n            if (oldDataRelativeUrl.startsWith('/')) {\n                oldDataRelativeUrl = oldDataRelativeUrl.replace('/', '');\n            }\n\n            fs.unlink(oldDataRelativeUrl, (error) => {\n                if (error) {\n                    this.logger.error(`[FileService] Cannot delete file: ${fileUrl}`, error);\n                    resolve(false);\n                } else {\n                    this.logger.log('info', `[FileService] File deleted: ${fileUrl}`);\n                    resolve(true);\n                }\n            });\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/http-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Error handler catching only HTTP exceptions.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/filters/http-exception.filter.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        catch\n                        \n                    \n                \n            \n            \n                \n                    \n                    catch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/http-exception.filter.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException, Inject, Logger } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\n\n/**\n * Error handler catching only HTTP exceptions.\n */\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n\n    constructor(@Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger) { }\n\n    public catch(exception: HttpException, host: ArgumentsHost): void {\n        const ctx: HttpArgumentsHost = host.switchToHttp();\n        const response: any = ctx.getResponse();\n        const request: any = ctx.getRequest();\n        const status: number = exception.getStatus();\n\n        response\n            .status(status)\n            .json({\n                statusCode: status,\n                message: exception.message,\n                error: exception.message,\n            });\n\n        this.logger.error(`HttpException ${status}: ${request.url}`);\n        this.logger.error(exception.stack);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PushNotificationService.html":{"url":"injectables/PushNotificationService.html","title":"injectable - PushNotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PushNotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/push-notification/push-notification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                sendPushNotificationToTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger, i18n: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/endpoints/push-notification/push-notification.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                    I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendPushNotificationToTopic\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPushNotificationToTopic(article: ArticleContentEntity, language: LanguageEnum)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/push-notification/push-notification.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n                                    \n                                                ArticleContentEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger } from '@nestjs/common';\nimport { TopicMessage } from 'firebase-admin/lib/messaging/messaging-api';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { I18nService } from 'nestjs-i18n';\nimport { LanguageEnum } from 'src/models/enums/language.enum';\nimport { ArticleContentEntity } from 'src/entities/article-content.entity';\nimport * as firebaseAdmin from 'firebase-admin';\n\n@Injectable()\nexport class PushNotificationService {\n\n\n    constructor(@Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n                private readonly i18n: I18nService) {\n    }\n    \n    public async sendPushNotificationToTopic(article: ArticleContentEntity, language: LanguageEnum): Promise {\n        const message: TopicMessage = {\n            topic: 'new-article-' + language,\n            notification: {\n                title: this.i18n.translate('data.PUSH_NOTIFICATION_TITLE', { lang: language }),\n                body: this.i18n.translate('data.PUSH_NOTIFICATION_BODY', { lang: language, args: { body: article.body } })\n            },\n            data: {\n                articleId: article.id + '',\n                articleType: article.article.articleType\n            },\n            android: {\n                priority: 'high',\n                notification: {\n                    sound: 'default',\n                    clickAction: 'FLUTTER_NOTIFICATION_CLICK',\n                    icon: 'notification_icon',\n                },\n            },\n        };\n\n        this.logger.log('info', `[PUSH_NOTIFICATION_SERVICE] Send push notification: ${JSON.stringify(message)}`);\n\n        // Just for testing, private key is not included in repository.\n        const messageId: string = await firebaseAdmin.messaging().send(message);\n        this.logger.log('info', `[PUSH_NOTIFICATION_SERVICE] Push notification sent: ${messageId}`);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SentryService.html":{"url":"injectables/SentryService.html","title":"injectable - SentryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SentryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/sentry.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                captureException\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/services/sentry.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        captureException\n                        \n                    \n                \n            \n            \n                \n                    \n                    captureException(message: string, data?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/services/sentry.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger } from '@nestjs/common';\nimport * as Sentry from '@sentry/node';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\n\n@Injectable()\nexport class SentryService {\n\n    constructor(\n        @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n    ) { }\n\n    public captureException(message: string, data?: any): void {\n        this.logger.error(`[SENTRY_SERVICE] Capture exception: ${message}`);\n        this.logger.error(`[SENTRY_SERVICE] Data: ${data}`);\n        Sentry.captureException(`${message} ---\\n${data}`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringToNumberPipe.html":{"url":"classes/StringToNumberPipe.html","title":"class - StringToNumberPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringToNumberPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pipes/string-to-number.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Pipe for transforming string to number.\n\n            \n\n\n            \n                Implements\n            \n            \n                        PipeTransform\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/pipes/string-to-number.pipe.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentMetadata, PipeTransform } from '@nestjs/common';\n\n/**\n * Pipe for transforming string to number.\n */\nexport class StringToNumberPipe implements PipeTransform {\n    public transform(value: string, metadata: ArgumentMetadata): number | undefined {\n        const numberValue: number = Number(value);\n        if (isNaN(numberValue)) {\n            return undefined\n        }\n        return numberValue;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagController.html":{"url":"controllers/TagController.html","title":"controller - TagController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/tag/tag.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                deleteTag\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                getAllTags\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Public\n                        Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTag(newTag: TagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create new tag if not exists.'})@ApiConflictResponse({description: 'Tag already exists.'})@HttpCode(200)@Post()\n                \n            \n\n            \n                \n                    Defined in src/endpoints/tag/tag.controller.ts:24\n                \n            \n\n\n            \n                \n                    Create new tag if not exists.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    newTag\n                                    \n                                                TagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        New tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Created tag.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Public\n                        Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTag(newTag: TagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete tag.'})@Delete()\n                \n            \n\n            \n                \n                    Defined in src/endpoints/tag/tag.controller.ts:60\n                \n            \n\n\n            \n                \n                    Delete tag.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    newTag\n                                    \n                                                TagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Tag to delete.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Public\n                        Async\n                        getAllTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTags(language: LanguageEnum)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all tags.'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/endpoints/tag/tag.controller.ts:34\n                \n            \n\n\n            \n                \n                    Get tag by id for specific language.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Tag.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Public\n                        Async\n                        updateTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTag(newTag: TagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get tag.'})@ApiNotFoundResponse({description: 'Tag not found.'})@Put()\n                \n            \n\n            \n                \n                    Defined in src/endpoints/tag/tag.controller.ts:49\n                \n            \n\n\n            \n                \n                    Update tag.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    newTag\n                                    \n                                                TagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        New tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Updated tag.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Headers, HttpCode, Post, Put } from \"@nestjs/common\";\nimport { TagService } from \"./tag.service\";\nimport { TagDto } from \"src/models/dtos/tag.dto\";\nimport { ApiConflictResponse, ApiNotFoundResponse, ApiOperation } from \"@nestjs/swagger\";\nimport { LanguageEnum } from \"src/models/enums/language.enum\";\nimport { CustomValidationPipe } from \"src/utils/pipes/validation.pipe\";\n\n@Controller('tags')\nexport class TagController {\n\n    constructor(private readonly tagService: TagService) { }\n\n    /**\n     * Create new tag if not exists.\n     * \n     * @throws          ConflictException if tag already exists.\n     * @param newTag    New tag.\n     * @returns         Created tag.\n     */\n    @ApiOperation({ summary: 'Create new tag if not exists.' })\n    @ApiConflictResponse({ description: 'Tag already exists.' })\n    @HttpCode(200)\n    @Post()\n    public async createTag(@Body(CustomValidationPipe) newTag: TagDto): Promise {\n        return this.tagService.createTag(newTag);\n    }\n\n    /**\n     * Get tag by id for specific language.\n     * @returns         Tag.\n     */\n    @ApiOperation({ summary: 'Get all tags.' })\n    @Get()\n    public async getAllTags(@Headers('x-language') language: LanguageEnum): Promise {\n        return this.tagService.getAllTags(language);\n    }\n\n    /**\n     * Update tag.\n     * \n     * @throws          NotFoundException if tag not found.\n     * @param id        Tag id.\n     * @param newTag    New tag.\n     * @returns         Updated tag.\n     */\n    @ApiOperation({ summary: 'Get tag.' })\n    @ApiNotFoundResponse({ description: 'Tag not found.' })\n    @Put()\n    public async updateTag(@Body(CustomValidationPipe) newTag: TagDto): Promise {\n        return this.tagService.updateTag(newTag);\n    }\n\n    /**\n     * Delete tag.\n     * \n     * @param newTag    Tag to delete. \n     */\n    @ApiOperation({ summary: 'Delete tag.' })\n    @Delete()\n    public async deleteTag(@Body() newTag: TagDto): Promise {\n        return this.tagService.deleteTag(newTag);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TagDto.html":{"url":"classes/TagDto.html","title":"class - TagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dtos/tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                language\n                            \n                            \n                                    Public\n                                order\n                            \n                            \n                                    \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagEntity: TagEntity)\n                    \n                \n                        \n                            \n                                Defined in src/models/dtos/tag.dto.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagEntity\n                                                  \n                                                        \n                                                                        TagEntity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/tag.dto.ts:12\n                        \n                    \n\n            \n                \n                    Uniqe string shortcut for tag.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LanguageEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/tag.dto.ts:19\n                        \n                    \n\n            \n                \n                    What language is the tag available in?\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/tag.dto.ts:31\n                        \n                    \n\n            \n                \n                    Order of the tag.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/models/dtos/tag.dto.ts:26\n                        \n                    \n\n            \n                \n                    User-friendly name of the tag.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from \"class-validator\";\nimport { TagEntity } from \"src/entities/tag.entity\";\nimport { LanguageEnum } from \"src/models/enums/language.enum\";\n\nexport class TagDto {\n\n    /**\n     * Uniqe string shortcut for tag.\n     * @example world for World news.\n     */\n    @IsNotEmpty()\n    public id: string;\n\n    /**\n     * What language is the tag available in?\n     * @example en\n     */\n    @IsNotEmpty()\n    public language: LanguageEnum;\n\n    /**\n     * User-friendly name of the tag.\n     * @example World\n     */\n    @IsNotEmpty()\n    public title: string;\n\n    /**\n     * Order of the tag.\n     */\n    public order: number;\n\n    constructor(tagEntity: TagEntity) {\n        if (tagEntity) {\n            this.id = tagEntity.id;\n            this.language = tagEntity.language;\n            this.title = tagEntity.title;\n            this.order = tagEntity.order;\n        }\n    }\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TagEntity.html":{"url":"entities/TagEntity.html","title":"entity - TagEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TagEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Optional\n                                articles\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                language\n                            \n                            \n                                    \n                                    Public\n                                order\n                            \n                            \n                                    \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        articles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, item => item.tags)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/tag.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/tag.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LanguageEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('enum', {enum: LanguageEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/tag.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/tag.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToMany, PrimaryColumn } from \"typeorm\";\nimport { LanguageEnum } from \"src/models/enums/language.enum\";\nimport { ArticleEntity } from \"./article.entity\";\n\n@Entity('tag')\nexport class TagEntity {\n\n    @PrimaryColumn()\n    public id: string;\n\n    @PrimaryColumn('enum', { enum: LanguageEnum })\n    public language: LanguageEnum;\n\n    @Column()\n    public title: string;\n\n    @Column({ default: 10 })\n    public order: number;\n\n    @ManyToMany(() => ArticleEntity, item => item.tags)\n    public articles?: ArticleEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagService.html":{"url":"injectables/TagService.html","title":"injectable - TagService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endpoints/tag/tag.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    Public\n                                    Async\n                                deleteTag\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTags\n                            \n                            \n                                    Public\n                                    Async\n                                updateTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/endpoints/tag/tag.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTag(newTag: TagDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/tag/tag.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newTag\n                                    \n                                                TagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTag(newTag: TagDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/tag/tag.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newTag\n                                    \n                                                TagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAllTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTags(language: LanguageEnum)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/tag/tag.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                LanguageEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_LANGUAGE\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTag(newTag: TagDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endpoints/tag/tag.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newTag\n                                    \n                                                TagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DEFAULT_LANGUAGE } from \"src/constants\";\nimport { TagEntity } from \"src/entities/tag.entity\";\nimport { TagDto } from \"src/models/dtos/tag.dto\";\nimport { LanguageEnum } from \"src/models/enums/language.enum\";\nimport { Repository } from \"typeorm\";\n\n@Injectable()\nexport class TagService {\n\n    constructor(\n        @InjectRepository(TagEntity) private tagRepository: Repository\n    ) {\n    }\n    \n    public async createTag(newTag: TagDto): Promise {\n\n        const tag: TagEntity | null = await this.tagRepository.findOneBy({ id: newTag.id, language: newTag.language });\n\n        if (tag) {\n            throw new ConflictException(\"Tag already exists.\");\n        }\n\n        const savedTag: TagEntity = await this.tagRepository.save({\n            id: newTag.id,\n            title: newTag.title,\n            language: newTag.language,\n            order: newTag.order\n        });\n\n        return new TagDto(savedTag);\n    }\n\n    public async getAllTags(language: LanguageEnum = DEFAULT_LANGUAGE): Promise {\n        const tags: TagEntity[] = await this.tagRepository.find({ where: { language }, order: { order: 'ASC' } });\n\n        return tags.map(tag => new TagDto(tag));\n    }\n\n    public async updateTag(newTag: TagDto): Promise {\n        let tag: TagEntity | null = await this.tagRepository.findOne({\n            where: {\n                id: newTag.id,\n                language: newTag.language\n            }\n        });\n\n        if (!tag) {\n            throw new NotFoundException(\"Tag not found\");\n        }\n\n        tag.title = newTag.title;\n        tag.order = newTag.order;\n\n        tag = await this.tagRepository.save(tag);\n\n        return new TagDto(tag);\n    }\n\n    public async deleteTag(newTag: TagDto): Promise {\n        await this.tagRepository.delete({ id: newTag.id, language: newTag.language });\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadedFileDto.html":{"url":"interfaces/UploadedFileDto.html","title":"interface - UploadedFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadedFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/dtos/uploaded-file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for uploaded file.\nCould be interface, we will not create instance of this object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            buffer\n                                        \n                                \n                                \n                                        \n                                            destination\n                                        \n                                \n                                \n                                        \n                                            encoding\n                                        \n                                \n                                \n                                        \n                                            fieldname\n                                        \n                                \n                                \n                                        \n                                            filename\n                                        \n                                \n                                \n                                        \n                                            mimetype\n                                        \n                                \n                                \n                                        \n                                            originalname\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buffer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buffer:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A Buffer of the entire file (MemoryStorage)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        destination:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The folder to which the file has been saved (DiskStorage)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Encoding type of the file\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Field name specified in the form\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the file within the destination (DiskStorage)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mime type of the file\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        originalname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        originalname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the file on the user's computer\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Location of the uploaded file (DiskStorage)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Size of the file in bytes\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface UploadedFileDto {\n    \n    /** Field name specified in the form */\n    fieldname: string;\n\n    /** Name of the file on the user's computer */\n    originalname: string;\n\n    /** Encoding type of the file */\n    encoding: string;\n\n    /** Mime type of the file */\n    mimetype: string;\n\n    /** Size of the file in bytes */\n    size: number;\n\n    /** The folder to which the file has been saved (DiskStorage) */\n    destination: string;\n\n    /** The name of the file within the destination (DiskStorage) */\n    filename: string;\n\n    /** Location of the uploaded file (DiskStorage) */\n    path: string;\n\n    /** A Buffer of the entire file (MemoryStorage) */\n    buffer: Buffer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            SERVER_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/data-source.ts\n            \n            variable\n            AppDataSource\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/database-config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/logger-config.ts\n            \n            variable\n            loggerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            DEFAULT_LANGUAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            DIRECTORY_IMAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            MAX_FILE_SIZE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            PAGE_COUNT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/endpoints/article/article.controller.ts\n            \n            controller\n            ArticleController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/endpoints/article/article.service.ts\n            \n            injectable\n            ArticleService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/endpoints/article/search/article-search.controller.ts\n            \n            controller\n            ArticleSearchController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/endpoints/article/search/article-search.service.ts\n            \n            injectable\n            ArticleSearchService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/endpoints/push-notification/push-notification.service.ts\n            \n            injectable\n            PushNotificationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/endpoints/tag/tag.controller.ts\n            \n            controller\n            TagController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/endpoints/tag/tag.service.ts\n            \n            injectable\n            TagService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/entities/article-content.entity.ts\n            \n            entity\n            ArticleContentEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/article-content.entity.ts\n            \n            class\n            ArticleContentEntity\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/entities/article.entity.ts\n            \n            entity\n            ArticleEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/tag.entity.ts\n            \n            entity\n            TagEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/filters/all-exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/dtos/article-request.dto.ts\n            \n            class\n            ArticleRequestDto\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/models/dtos/article.dto.ts\n            \n            class\n            ArticleDto\n            \n                53 %\n                (7/13)\n            \n        \n        \n            \n                \n                src/models/dtos/error-response.dto.ts\n            \n            class\n            ErrorResponse\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/models/dtos/tag.dto.ts\n            \n            class\n            TagDto\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/models/dtos/uploaded-file.dto.ts\n            \n            interface\n            UploadedFileDto\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/models/exceptions/bad-validation-request.exception.ts\n            \n            class\n            BadValidationRequestException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/services/email.service.ts\n            \n            injectable\n            EmailService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/services/file.service.ts\n            \n            injectable\n            FileService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/services/sentry.service.ts\n            \n            injectable\n            SentryService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/pipes/check-article-type.pipe.ts\n            \n            class\n            CheckArticleType\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/utils/pipes/string-to-number.pipe.ts\n            \n            class\n            StringToNumberPipe\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/utils/pipes/validation.pipe.ts\n            \n            class\n            CustomValidationPipe\n            \n                50 %\n                (1/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.9.1\n        \n            @nestjs/cache-manager : ^2.1.0\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/serve-static : ^4.0.0\n        \n            @nestjs/swagger : ^7.1.4\n        \n            @nestjs/typeorm : ^10.0.0\n        \n            @sentry/node : ^7.61.0\n        \n            cache-manager : ^5.2.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            firebase-admin : ^11.10.1\n        \n            handlebars : ^4.7.8\n        \n            moment : ^2.29.4\n        \n            mysql2 : ^3.5.2\n        \n            nest-winston : ^1.9.3\n        \n            nestjs-i18n : ^10.2.6\n        \n            nodemailer : ^6.9.4\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            sharp : ^0.32.4\n        \n            typeorm : ^0.3.17\n        \n            uuid : ^9.0.0\n        \n            winston : ^3.10.0\n        \n            winston-daily-rotate-file : ^4.7.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArticleTypeEnum   (src/.../article-type.enum.ts)\n                        \n                        \n                            LanguageEnum   (src/.../language.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/models/enums/article-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ArticleTypeEnum\n                    \n                \n                        \n                            \n                                 NEWS\n                            \n                        \n                        \n                            \n                                Value : news\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n            \n        \n\n    src/models/enums/language.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        LanguageEnum\n                    \n                \n                        \n                            \n                                 CS\n                            \n                        \n                        \n                            \n                                Value : cs\n                            \n                        \n                        \n                            \n                                 EN\n                            \n                        \n                        \n                            \n                                Value : en\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArticleSearchService\n\nArticleSearchService\n\nAppModule -->\n\nArticleSearchService->AppModule\n\n\n\n\n\nArticleService\n\nArticleService\n\nAppModule -->\n\nArticleService->AppModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAppModule -->\n\nEmailService->AppModule\n\n\n\n\n\nFileService\n\nFileService\n\nAppModule -->\n\nFileService->AppModule\n\n\n\n\n\nPushNotificationService\n\nPushNotificationService\n\nAppModule -->\n\nPushNotificationService->AppModule\n\n\n\n\n\nSentryService\n\nSentryService\n\nAppModule -->\n\nSentryService->AppModule\n\n\n\n\n\nTagService\n\nTagService\n\nAppModule -->\n\nTagService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : Backend for the news app.\n        \n            License : UNLICENSED\n        \n            Author : Dmitrij Buckovsky\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppDataSource   (src/.../data-source.ts)\n                        \n                        \n                            databaseConfig   (src/.../database-config.ts)\n                        \n                        \n                            DEFAULT_LANGUAGE   (src/.../constants.ts)\n                        \n                        \n                            DIRECTORY_IMAGES   (src/.../constants.ts)\n                        \n                        \n                            loggerConfig   (src/.../logger-config.ts)\n                        \n                        \n                            MAX_FILE_SIZE   (src/.../constants.ts)\n                        \n                        \n                            PAGE_COUNT   (src/.../constants.ts)\n                        \n                        \n                            SERVER_URL   (src/.../app.module.ts)\n                        \n                        \n                               (src/.../app.service.ts)\n                        \n                        \n                               (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/data-source.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppDataSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataSource\n\n                    \n                \n                \n                    \n                        Default value : new DataSource(databaseConfig)\n                    \n                \n\n            \n                \n                    For migration purposes. Used in package.json.\n\n                \n            \n\n        \n    \n\n    src/config/database-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataSourceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n    type: 'mysql',\n    host: process.env.MYSQL_HOST,\n    port: 3306,\n    database: process.env.MYSQL_DATABASE,\n    username: process.env.MYSQL_USER,\n    password: process.env.MYSQL_PASSWORD,\n    entities: [\n        __dirname + '/../endpoints/**/*.entity{.ts,.js}',\n        __dirname + '/../entities/**/*.entity{.ts,.js}',\n    ],\n    synchronize: true,\n    logging: false,\n    charset: 'utf8_unicode_ci',\n    migrations: [__dirname + '/../migrations/*{.ts,.js}'],\n    migrationsRun: true\n}\n                    \n                \n\n\n        \n    \n\n    src/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_LANGUAGE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : LanguageEnum.CS\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DIRECTORY_IMAGES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'uploads/images'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAX_FILE_SIZE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 1024 * 1024 * 15\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PAGE_COUNT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n\n\n        \n    \n\n    src/config/logger-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loggerConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WinstonModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n    exitOnError: false,\n    transports: [\n        new DailyRotateFile({\n            filename: 'debug-%DATE%.log',\n            dirname: './logs',\n            datePattern: 'YYYY-MM-DD',\n            maxSize: '25m',\n            maxFiles: '14d',\n            level: 'debug',\n            format: format.combine(\n                format.uncolorize(),\n                format.timestamp(),\n                format.printf(msg => {\n                    return `${msg.timestamp} [${msg.level}] - ${msg.message}` + (msg.stack ? `\\n\\t${msg.stack}` : '');\n                }),\n            ),\n            handleExceptions: true,\n            handleRejections: true,\n        }),\n        new DailyRotateFile({\n            filename: 'error-%DATE%.log',\n            dirname: './logs',\n            datePattern: 'YYYY-MM-DD',\n            maxSize: '25m',\n            maxFiles: '14d',\n            level: 'error',\n            format: format.combine(\n                format.uncolorize(),\n                format.timestamp(),\n                format.printf(msg => {\n                    return `${msg.timestamp} [${msg.level}] - ${msg.message}` + (msg.stack ? `\\n\\t${msg.stack}` : '');\n                }),\n            ),\n            handleExceptions: true,\n            handleRejections: true,\n        }),\n        new transports.Console({\n            handleExceptions: true,\n            handleRejections: true,\n            format: format.combine(\n                format.colorize(),\n                format.timestamp(),\n                format.printf(msg => {\n                    return `${msg.timestamp} [${msg.level}] - ${msg.message}` + (msg.stack ? `\\n\\t${msg.stack}` : '');\n                }),\n            ),\n        }),\n    ],\n}\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SERVER_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : process.env.SERVER_URL ?? ''\n                    \n                \n\n\n        \n    \n\n    src/app.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('../package.json')\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('../package.json')\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
